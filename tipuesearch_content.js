var tipuesearch = {"pages":[{"title":"Instagram Archive","text":"table { border-collapse: collapse; width: 80%; } table, td, th { border: 1px solid grey; } th, td { padding: 5px; min-width: 50px; text-align: center; } tr:hover { background-color: #f5f5f5; } 一 二 三 四 五 六 七 八 九 十 十一 十二 2019 ⛄️ 2018 ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2017 ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2016 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2015 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 2014 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2013 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2012 ⛄️","tags":"Instagram","url":"pages/instagram-archive.html","loc":"pages/instagram-archive.html"},{"title":"Tweets Archive","text":"table { border-collapse: collapse; width: 80%; } table, td, th { border: 1px solid grey; } th, td { padding: 5px; min-width: 50px; text-align: center; } tr:hover { background-color: #f5f5f5; } 一 二 三 四 五 六 七 八 九 十 十一 十二 2019 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 2018 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2017 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2016 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2015 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2014 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2013 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2012 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2011 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2010 ⛄️ ⛄️ 🌱 🌱 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2009 ⛄️ ⛄️ 🌱 🌞 🌞 🌞 🍁 🍁 🍁 ⛄️ 2008 🍁","tags":"Twitter","url":"pages/tweets-archive.html","loc":"pages/tweets-archive.html"},{"title":"夏季的蝉鸣","text":"夏天的时候经常被窗外的蝉叫声吵得睡不着觉，之前青蛙一直觉得这是噪音。 最近几年被吵醒的次数更多了，于是仔细分辨下蝉叫声，竟然还有各种不同。 例如，在北京最可能听到的声音是这样的： 据说它们叫黑柞蝉，长这样： （图片转自知乎 鹿鸣呦呦的回答 ） 偶尔还会听到真的知了知了叫的： 据说它们叫蒙古寒蝉，长这个样子： （图片转自知乎 鹿鸣呦呦的回答 ） 但是，如果去东北，蝉叫声很大概率会变成： 这种蝉叫做斑透翅蝉（Hyalessa maculaticollis）。知乎上的一个回答 （ 北纬多少度以上的地区就没有蝉了？ ） 大概是解释这几种蝉比较详细的一个回答了， 不但给出了各种蝉叫声的视频，还贴出了关于蝉的分布情况的链接： （图片来自网站： Cicada (17 of 46) ，里面有更加详细的种群介绍。 ） 从这个图上看日本、韩国、辽东半岛、山东半岛，还有华中华南地区是一个分布区， 中国的另外大部分地区是另一个分布区， 所以青蛙觉得这大概就是大连的蝉叫声跟北京显著不同的原因了。 这个知乎回答里面提到了收集北美地区的各种蝉叫声的网站： Cicada Mania 另外青蛙还找到了收集日本韩国蝉叫声的网站： http://zikade.world.coocan.jp/cicadasongaac_e.html 用斑透翅蝉这个学名找到了更多的视频和图片，看这个家伙撅着屁股叫的多卖力。 不过这个知乎回答里面并没有回答题目本身的灵魂拷问： 北纬多少度以上的地区就没有蝉了？ 就青蛙自己的经历来说，吉林省的某些地区夏天还能听到蝉鸣，但是已经没有特别密集了。 在网上找了一下，只有零星的一些帖子或者知乎回答提到了北方一些地区有蝉， 但是没有系统性的讲解中国蝉分布情况的帖子。 青蛙翻到了一本叫做 《中国蝉科志: 同翅目. 蝉总科》 的书，似乎里面有蝉分布情况的介绍，但是这本书在网上几乎找不见，所以也没法查阅了。 看来青蛙有机会要去图书馆找找这本书才能回答这个究级问题了。","tags":"Misc","url":"2019/08/cicada-sound-in-summer/","loc":"2019/08/cicada-sound-in-summer/"},{"title":"从分区（partitioning）中恢复 RabbitMQ 集群","text":"（本文为 https://gist.github.com/niedbalski/69a72103adad4f0f9609a0857c9810a4 的翻译文档。 ） 1) 检查 Cluster 状态。 Mnesia ( 'rabbit@juju-machine-30-lxd-11' ) : ** ERROR ** mnesia_event got { inconsistent_database, running_partitioned_network, 'rabbit@juju-machine-29-lxd-9' } $ sudo rabbitmqctl cluster_status 2) 选择合适的节点作为 master 节点。 （注：这个步骤很重要，如果没有选择合适的 master 节点，很容易造成消息丢失） # 通过连接数。 $ juju run --service rabbitmq-server \"sudo ss -t state established -nt '( sport = :amqp )' | wc -l\" # 最新的 mnesia。 $ juju run --service rabbitmq-server 'sudo find /var/lib/rabbitmq/mnesia -type f | xargs ls -ltr | tail -n 1 | cut -d \" \" -f13 | xargs -I {} stat -c \"%y\" {}' # Openstack 队列中包含最多的消息数。 $ juju run --service rabbitmq-server \"sudo rabbitmqctl list_queues -p openstack messages | awk '{s+=\\$1}END{print s}'\" 3) 在非 master 节点上停止所有的 epmd/erl 进程。 $ /etc/init/rabbitmq-server stop $ sudo killall epmd （注：在 juju 的环境里还需要关掉 jujud 以免 juju 自作主张重启 rabbitmq server） $ sudo systemctl stop jujud-unit-rabbitmq-server-0.service 确认所有的 rabbitmq 进程都被杀掉了： $ sudo ps -U rabbitmq -o pid --no-heading 4) 删除 mnesia，重新启动 rabbitmq 服务，然后停止 app。 $ sudo mv /var/lib/rabbitmq/mnesia /var/lib/rabbitmq/mnesia-back $ sudo service rabbitmq-server start $ sudo rabbitmqctl stop_app 确认 rabbitmq 服务启动，并且未加入 cluster。 ( $ sudo rabbitmqctl cluster_status ) 5) 在 master 节点上忘记（forget） 其他节点。 $ sudo rabbitmqctl stop_app $ sudo rabbitmqctl forget_cluster_node rabbit@trashed-slave $ sudo rabbitmqctl start_app （注：这里应该有比较重要的一步，就是检查所有节点上的 cluster_name 。 一定要确保其他节点上的 cluster_name 跟 master 节点一致。所以青蛙把这一步作为5.1） 5.1) 检查并确认 cluster_name 。 $ juju run --application rabbitmq-server \"sudo rabbitmqctl cluster_status |grep cluster_name\" 如果 cluster_name 不一致，需要在其他节点上修改 cluster_name ： $ sudo rabbitmqctl set_cluster_name rabbit@juju-machine-29-lxd-9 6) 将节点加入 cluster，在要加入的节点上执行： $ sudo rabbitmqctl join_cluster rabbit@master $ sudo rabbitmqctl start_app 7) 检查 clutser 状态。 $ juju run --application rabbitmq-server \"sudo rabbitmqctl cluster_status\" 8) 建议将 rabbitmq-server charm 的 cluster-partitioning-handling 选项设置为 autoheal 。 （注：这里需要注意 autoheal 可能会使 rabbitmq 丢失数据，所以也应该谨慎使用过。） https://github.com/openstack/charm-rabbitmq-server/blob/master/config.yaml#L39 Update: 关于 rabbitmq 基本内容，以及 partition 和 brain split 的一个介绍。 关于RabbitMq你必须深入理解的内容 https://zhuanlan.zhihu.com/p/60141062","tags":"Cloud","url":"2019/07/recover-rabbitmq-cluster-after-partitioning/","loc":"2019/07/recover-rabbitmq-cluster-after-partitioning/"},{"title":"修复因为 Python 升级导致的失效 virtualenv 环境","text":"（标题图片借用 PYTHON ON MACOS: BEST PRACTICES 的标题图，这篇文档也是关于MacOS上面运行python和virtualenv的。） （本篇日志为 How to fix your Python virtualenv after a Homebrew Python upgrade 的翻译文档） 你在使用Homebrew管理你的OS X上面的Python嘛？最近有没有升级过Python？ 我遇到的情况是Python 3的一个小更新：从3.4.2到3.4.3。 这个升级足够让virtualenv里面的符号连接（symbolic links）失效了。 例如 ~: cd ~/src/my_app ~/src/my_app: source venv/bin/activate [ venv ] ~/src/my_app: python dyld: Library not loaded: @executable_path/../.Python Referenced from: /Users/jeremycade/src/my_app/env/bin/python Reason: image not found Trace/BPT trap: 5 正如我提到的那样，virtualenv内部的符号连接都指向了Homebrew安装的Python， 升级之后这些符号连接都指向了错误的地方。 解决方法是删除然后重建这些符号连接。 首先，我们需要确保你的virtualenv没有生效（active）。 [ venv ] ~/src/my_app: deactivate 然后，删除这些错误的符号连接。 ~/src/my_app: find venv -type l -delete 这里我使用了OS X自带的BSD find 命令。 最后一步，重建你的virtualenv。 ~src/my_app: virtualenv venv 青蛙注 青蛙没有详细的研究这个问题。 但是感觉上应该是 virtualenv 这个包引入的，如果使用python3内建的venv module， python3 -m venv VENV_DIR 这种方式创建virtualenv的时候，并不会创建符号连接。 所以结论是，在MacOS上尽量使用python内置的venv模块， 而不是使用virtualenv包。","tags":"Programming","url":"2019/07/fix-python-virtualenv-after-python-upgrade/","loc":"2019/07/fix-python-virtualenv-after-python-upgrade/"},{"title":"Pelican 的 Google Map 插件","text":"青蛙最近整理照片和blog的时候，一直想想在blog post里添加一个地图。 但是pelican似乎没有靠谱的google map plugin。 虽然有一个 google_embed ，但是似乎现在不能用了，按照它的README写好map之后，post里面完全不会转义。 于是青蛙一怒之下自己照猫画虎写了个liquid_tag版本的google map，竟然也能用了。 目前这个plugin支持map和direction模式，青蛙还在考虑要不要添加街景模式。 添加map的方法： {% gmap \"location\" mode [maptype] [align] [width] [height] %} location ：必选项，指定地点，必须包含双引号，支持中文。 mode ：必选项，地图模式，有 place 和 search 选项， 指定地图显示单个地点或者搜索location中的关键字 maptype ：地图的显示模式，包含 roadmap 和 satelite align ：地图在页面中的对齐方式， left 、 center 或者 right width ：地图宽度 height ：地图高度 例如： { % gmap \"东方明珠,上海\" place roadmap left 600 480 % } 显示如下地图： 添加direction（导航）的方法： {% gdirection \"origin\" \"destination\" [\"waypoints\"] mode [maptype] [align] [width] [height] %} origin ：必选项，指定出发点，必须包含双引号，支持中文。 destination ：必选项，指定目的地，必须包含双引号，支持中文。 waypoints ：指定途经点，必须包含双引号，支持中文。 mode ：必选项，导航模式，有 driving 、 walking 、 bicycling 、 transit 和 flying 选项。 maptype ：地图的显示模式，包含 roadmap 和 satelite 。 align ：地图在页面中的对齐方式， left 、 center 或者 right 。 width ：地图宽度。 height ：地图高度。 例如： { % gdirection \"东方明珠,上海\" \"人民广场,上海\" driving roadmap left 600 480 % } 显示如下地图： 如果你也想在pelican里面使用这个插件，可以在 Google cloud plateform console 申请一个MAP API key，然后在 pelicanconfig.py 文件里加入API key配置： GMAPS_API_KEY = \"YOUR_API_KEY_HERE\" 然后给liquid_tag打个补丁： --- a/liquid_tags/mdx_liquid_tags.py +++ b/liquid_tags/mdx_liquid_tags.py @@ -22,12 +22,14 @@ EXTRACT_TAG = re.compile(r'(?:\\s*)(\\S+)(?:\\s*)') LT_CONFIG = { 'CODE_DIR': 'code', 'NOTEBOOK_DIR': 'notebooks', 'FLICKR_API_KEY': 'flickr', - 'GIPHY_API_KEY': 'giphy' + 'GIPHY_API_KEY': 'giphy', + 'GMAPS_API_KEY': 'gmap' } LT_HELP = { 'CODE_DIR' : 'Code directory for include_code subplugin', 'NOTEBOOK_DIR' : 'Notebook directory for notebook subplugin', 'FLICKR_API_KEY': 'Flickr key for accessing the API', - 'GIPHY_API_KEY': 'Giphy key for accessing the API' + 'GIPHY_API_KEY': 'Giphy key for accessing the API', + 'GMAPS_API_KEY': 'Google Maps key for accessing the API' } class _LiquidTagsPreprocessor(markdown.preprocessors.Preprocessor): 接着把这个文件放进liquid_tags目录里面，然后就可以在post里添加地图了。 Enjoy posting! \"\"\" Google maps Tag --------- This implements a Liquid-style google map tag for Pelican, based on the google_embed plugin. Syntax ------ {% gmap \"location\" mode [maptype] [align] [width] [height] %} {% gdirection \"origin\" \"destination\" \"waypoints\" mode [maptype] [align] [width] [height] %} \"\"\" import re from .mdx_liquid_tags import LiquidTags MAP_SYNTAX = '{% gmap \"location\" mode [maptype] [align] [width] [height] %}' # Regular expression for full syntax map_re_str = \"\"\"(?:\"(?P [\\w\\s\\,\\.]+?)\")\"\"\" map_re_str += \"\"\"(?:\\s+(?P \\w+))?\"\"\" map_re_str += \"\"\"(?:\\s+(?P \\w+))?\"\"\" map_re_str += \"\"\"(?:\\s+(?P \\w+))?\"\"\" map_re_str += \"\"\"(?:\\s+(?P \\d*))?\"\"\" map_re_str += \"\"\"(?:\\s+(?P \\d*))?\"\"\" ReGmap = re.compile(map_re_str) def get_align(align): if align == 'right': align_css = \"float:right;\" elif align == 'left': align_css = \"\" else: align_css = \"display: block;margin: 0 auto;\" return align_css @LiquidTags.register('gmap') def gmap(preprocessor, tag, markup): GMAPS_API_KEY = preprocessor.configs.getConfig('GMAPS_API_KEY') attrs = None # Default setting location = \"\" mode = \"place\" maptype = \"roadmap\" width = 600 height = 400 align = 'center' # Parse the markup string match = ReGmap.search(markup) if match: attrs = dict([(key, val.strip()) for (key, val) in match.groupdict().items() if val]) else: raise ValueError('Error processing input. ' 'Expected syntax: {0}'.format(MAP_SYNTAX)) # Construct URI location = attrs['location'] del attrs['location'] if ' ' in location: location = '+'.join(location.split()) if 'mode' in attrs: mode = attrs['mode'] del attrs['mode'] else: raise ValueError('Error processing input. ' 'Expected syntax: {0}'.format(MAP_SYNTAX)) if 'maptype' in attrs: maptype = attrs['maptype'] del attrs['maptype'] if 'width' in attrs: width = attrs['width'] del attrs['width'] if 'height' in attrs: height = attrs['height'] del attrs['height'] if 'align' in attrs: align = attrs['align'] del attrs['align'] align_css = get_align(align) linkHTML=\"\"\" \"\"\".format(mode,GMAPS_API_KEY,location,width,height,maptype,align_css) return linkHTML DIRECTION_SYNTAX = '{% gdirection \"origin\" \"destination\" \"waypoints\" mode [maptype] [align] [width] [height] %}' # Regular expression for full syntax direction_re_str = \"\"\"(?:(?P \"[\\w\\s\\S]+\"))\"\"\" direction_re_str += \"\"\"(?:\\s+(?P \\w+))?\"\"\" direction_re_str += \"\"\"(?:\\s+(?P \\w+))?\"\"\" direction_re_str += \"\"\"(?:\\s+(?P \\w+))?\"\"\" direction_re_str += \"\"\"(?:\\s+(?P \\d*))?\"\"\" direction_re_str += \"\"\"(?:\\s+(?P \\d*))?\"\"\" ReGdirection = re.compile(direction_re_str) waypoints_re_str = \"\"\"(?:\"(?P [\\w\\s\\S]+?)\")\"\"\" waypoints_re_str += \"\"\"(?:\\s+\"(?P [\\w\\s\\S]+?)\")\"\"\" waypoints_re_str += \"\"\"(?:\\s+\"(?P [\\w\\s\\S]+?)\")?\"\"\" ReGwaypoints = re.compile(waypoints_re_str) @LiquidTags.register('gdirection') def gdirection(preprocessor, tag, markup): GMAPS_API_KEY = preprocessor.configs.getConfig('GMAPS_API_KEY') attrs = None # Default setting origin = \"\" destination = \"\" waypoints = \"\" mode = \"place\" maptype = \"roadmap\" width = 600 height = 400 align = 'center' # Parse the markup string match = ReGdirection.search(markup) if match: attrs = dict([(key, val.strip()) for (key, val) in match.groupdict().items() if val]) else: raise ValueError('Error processing input. ' 'Expected syntax: {0}'.format(DIRECTION_SYNTAX)) # Construct URI directions = attrs['directions'] del attrs['directions'] m = ReGwaypoints.search(directions) if m: attrs.update([(key, val.strip()) for (key, val) in m.groupdict().items() if val]) else: raise ValueError('Error processing input. ' 'Expected syntax: {0}'.format(DIRECTION_SYNTAX)) origin = attrs['origin'] del attrs['origin'] if ' ' in origin: origin = '+'.join(origin.split()) destination = attrs['destination'] del attrs['destination'] if ' ' in destination: destination = '+'.join(destination.split()) if 'waypoints' in attrs: waypoints = attrs['waypoints'] del attrs['waypoints'] if ' ' in waypoints: waypoints = '+'.join(waypoints.split()) if 'mode' in attrs: mode = attrs['mode'] del attrs['mode'] if 'maptype' in attrs: maptype = attrs['maptype'] del attrs['maptype'] if 'width' in attrs: width = attrs['width'] del attrs['width'] if 'height' in attrs: height = attrs['height'] del attrs['height'] if 'align' in attrs: align = attrs['align'] del attrs['align'] align_css = get_align(align) query_str = 'origin={0}&destination={1}'.format(origin,destination) if waypoints: query_str += '&waypoints={0}'.format(waypoints) linkHTML=\"\"\" \"\"\".format(mode,GMAPS_API_KEY,query_str,width,height,maptype,align_css) return linkHTML @LiquidTags.register('gmap_places') def gmap_places(preprocessor, tag, markup): GMAPS_API_KEY = preprocessor.configs.getConfig('GMAPS_API_KEY') attrs = None linkHTML=\"\"\" \"\"\".format(GMAPS_API_KEY) #---------------------------------------------------------------------- # This import allows image tag to be a Pelican plugin from liquid_tags import register Update: 2019-07-13 青蛙翻了几天google map API文档，给这个plugin山寨了一个同时显示多个地点的参数。 不过并没有最终完成，所以先不放出完整代码了。大概效果是这个样子： var locations = [ ['1', 'remmin park, shanghai', '#location 1'], ['2', 'shanghai museum, shanghai', '#location 2'], ['3', 'lippo plaza, shanghai', '#location 3'], ]; 参考文档： [1] Google Embed [2] google_embed [3] Liquid-style Tags [4] Geocoding Service | Maps JavaScript API | Google Developers","tags":"Site","url":"2019/07/create-a-google-map-plugin-for-pelican/","loc":"2019/07/create-a-google-map-plugin-for-pelican/"},{"title":"将Instagram内容导入Blog","text":"青蛙关站的这几年，虽然没有写blog，但是instagram和twitter发了可真不少。 今天研究了下怎么导入instagram的照片和twitter的条目。 看起来instagram很容易实现，因为有一个python的客户端 Instaloader 。 首先，用pip把这个客户端装上 $ pip3 install instaloader 然后，自己搞个脚本，从instagram数据里面直接生成markdown文件，写的不太好看，不过数据基本完美导入Blog了。 import instaloader import os import time L=instaloader.Instaloader() L.interactive_login(\"gfrogcn\") profile = instaloader.Profile.from_username(L.context, \"gfrogcn\") new_template =\"\"\"title: Instagram Picture %s date: %s 23:59:59 slug: instagram-picture-%s category: Pictures comments: true layout: post _%s_ %s [via Instagram](https://www.instagram.com/p/%s/) %s \"\"\" append_template = \"\"\" _%s_ %s [via Instagram](https://www.instagram.com/p/%s/) %s \"\"\" i = 0 for post in profile.get_posts(): link = \"\" post_date = post.date_local.strftime(\"%F\") post_time = post.date_local.strftime(\"%T\") print(\"%s - %s\" % (post_date, post.shortcode)) if post.caption: caption = post.caption.replace(\"\\n\", \"\\n\\n\") else: caption = \"\" if post.typename == \"GraphSidecar\": for n in post.get_sidecar_nodes(): if n.is_video: link += \"[%s][%s]\\n\\n\" % (n.video_url, n.video_url) else: link += \"![1](%s)\\n\\n\" % n.display_url elif post.is_video: link = \"[%s](%s)\" % (post.video_url, post.video_url) else: link = \"![1](%s)\" % post.url md_file = \"%s-instagram-picture-%s.md\" % (post_date, post_date) if os.path.isfile(md_file): file_open_mode = \"a+\" output = append_template % (post_time, caption, post.shortcode, link) else: file_open_mode = \"w+\" output = new_template % (post_date, post_date, post_date, post_time, caption, post.shortcode, link) with open(md_file, file_open_mode) as file: file.write(output) i += 1 if i >= 12: time.sleep(20) i = 0 目前没有解决的问题有两个，这两点以后有时间再研究吧。 如果有新的instagram内容，可能需要有一个daemon每天监测然后转换成markdown。 没办法处理视频内容，现在只是把视频文件链接留下了，但是没办法直接在blog播放。 之后有时间需要找一个嵌入video的办法。 Update: 原来liquid_tags.video插件就可以插入video，只需要在post里写 { % video link width height % } 就好了。 Update 2: Instagram 的 video link 几天之后就失效了。 所以目前青蛙的办法是直接在 Instram 里面导出 video 的 embed code，贴到 post 里面就好。","tags":"Site","url":"2019/07/import-instagram-pictures-into-blog/","loc":"2019/07/import-instagram-pictures-into-blog/"},{"title":"本站重新恢复","text":"目前本站已经在github上恢复，从2007-2013年的数据大部分已经可以访问。 从上海出差回来之后，青蛙突然有了把blog恢复的动力。 努力了三天，重新使用pelican构建了blog， 然后review了一遍之前的post，修复了一大堆错误。 回顾当年的老文章，感慨良多。当年青蛙也是个爱学习的好孩子， 同时不禁感叹这些年真的没有神马进步。 重新开站，不对自己做硬性指标了，希望能认真写/记录点啥。 本站域名： https://www.gfrog.net/ 源码： https://github.com/gfrog/gfrog.github.io","tags":"Misc","url":"2019/07/this-blog-recovered-on-github/","loc":"2019/07/this-blog-recovered-on-github/"},{"title":"上海五日游杂记","text":"青蛙对于魔都向往已久，虽然到过魔都很多次，然而并没有太多机会在魔都玩一玩。 刚好六月在魔都有KubeCon展会，趁着开会的机会，青蛙利用周末在魔都转了转。 不知道是不是刚好赶上了气温最适宜的那几天， 在帝都被热吐了之后， 到魔都竟然感觉气温舒适宜人， 在外面溜达感受黄浦江上的阵阵凉风，惬意的很。 夏天去魔都肯定要坐火车的啊，不然坐飞机延误起来不一定要多久。 兔子屎色动卧，顶着D车头衔的T车， 这车虽然叫D，但是大部分时间都跑在京沪普线上， 价钱却跟真正的D车票价看齐， 铁总真是赚的一手好钱。 联通手机在京沪线上基本没法用，只有2G和隐隐约约的3G， 甚至到某些车站都没有4G信号，真是无奈到家。 开掌上高铁连车上Wi-Fi速度也渣到爆，甚至有时候连这个app都没法连接。 相比起前几天青蛙去法国体验的法国高铁爸爸的app， 显示路线图实时速度，还能显示wifi覆盖情况， 在线预订餐车餐食，目的地及沿途景点介绍。 最重要的是上网速度飞快！ 上海站到达，似乎上局放弃普速车站了？ 上海站也是破破烂烂的早期火车站形象。 一大早的人民广场，非常安静， 旁边广场上有一群白衣服老人家打太极拳。 照片尽头就是准备入住的饭店。 青蛙拍完这张照片2分钟后就遭到了便便毒气攻击。 上海市中心这种地方，紧靠着市政府，竟然有很多露宿街头的和随地大小便的人。 似乎魔都真是金玉其外。 一大早的南京路 vs 晚上的南京路，反差巨大。 不过让青蛙想起了盛京的中街。 魔都奇葩楼之一： 金刚钻。 （青蛙白天时间去上海博物馆参观，游记请见 参观上海博物馆 ，以下内容为参观博物馆之后，晚上在外滩的游记） 和平饭店打卡，来的路上被汹涌的人潮吓到了， 人行道上竟然被塞得满满的，行人到路口之前提前20米就被拦下来， 因为前面20米要给马路对面过来的左转行人留出位置。 拍照完毕之后继续被外滩防洪堤上的人潮吓到。 东方明珠 + 魔都三件套。 有人说这照片照的东方明珠像要倒了，手机畸变太大，实物不是这样。 遍地是人，据说前些年这地方还发生过踩踏事件。 上海市人民英雄纪念塔，红红的，在夜色里非常醒目。 把纪念塔和对岸的大棒棒们合个影。 纪念塔和东方明珠背靠背。 这边人潮虽然比和平饭店那里少了些，但是依然汹涌。 很多网红、大妈、新婚夫妇来外滩拍照片，这里也是网红胜地。 外白渡桥，又一个网红打卡胜地。桥栏边上都是拍照的。 似乎很多描述十里洋场的电影里，这个桥曝光率也很高？ 1907年英国公司制造，载重只有20吨。 桥上非常窄，两个方向都堵车。 在外白渡桥上，青蛙做了一个愚蠢的决定。 原本计划看完桥之后，就找个公交车去陆家嘴， 但是一念之差，青蛙最后去了城隍庙，累的半死不说， 城隍庙那边完全就是大妈旅行团的必去景点，人挤人人挨人， 而且晚上只有一些商店小吃店开着，豫园和城隍庙都进不去。 以下就是在作死的路上。外滩夜景。 远处宇宙行那个楼似乎烫了个发？ 走过来再往回望望。 这个柱子很别致，地图上说是个信号塔。 据说是法国人修的一个给江上的船只指示天气信号的。 千辛万苦，终于爬到了城隍庙，然而神马也没有。 凝晖阁，果然够光辉。 路遇帝都银行。 Day 2，在南京路上看到的M&Ms店 LEGO ❤️✔️ SH ✔️ 好八连雕塑，好像之前走到过这。 人民公园北边，有五卅运动纪念碑。 去开封菜吃早餐，大概开封菜老板换了个天津人，大饼卷万物。 魔都特色胡同子晾衣服。 窗口晾衣服。 梅赛德斯奔驰飞碟。 魔都土著同事带我们去的一家啤酒阿姨， 酒柜相当壮观，估计大概有几百种酒。 折叠小杯子。 会议结束，组团吃顿云南菜慰劳自己。 汽锅鸡，鸡汤棒棒哒，很好喝。 徐家汇的一个写字楼，弄的像核电站一样…… 最后一天，去车站之前还有几小时时间，逛逛本地高端超市。 回家的伴手礼自然是大白兔🐰啦。 到达帝都，开始搬砖。","tags":"Travel","url":"2019/06/five-days-tour-in-shanghai/","loc":"2019/06/five-days-tour-in-shanghai/"},{"title":"体验上海轮渡","text":"青蛙自从前些年部分遍历帝都地铁之后，已经很久没做过遍历公交这种事情了。 这次来到魔都，有一上午时间没地方去，所以决定部分遍历魔都轮渡线路。 遍历的目标就是从外滩沿黄浦江向上，到南浦大桥结束。 这其中需要乘坐5条线路，经过8个渡口： 浦西 线路 浦东 金陵东路渡口 东金线 东昌路渡口 复兴东路渡口 东复线 东昌路渡口 复兴东路渡口 杨复线 杨家渡渡口 董家渡渡口 塘董线 塘桥渡口 陆家浜渡口 南陆线 南码头渡口 var locations = [ ['金陵东路渡口', '金陵东路渡口, huangpu, shanghai', '#jinling-east-road'], ['东昌路渡口', 'Dongchang Road Ferry, pudong xinqu, shanghai', '#dongchang-road'], ['复兴东路渡口', '复兴东路渡口, huangpu, shanghai', '#fuxing-east-road'], ['杨家渡渡口', '杨家渡渡口, pudong xinqu, shanghai', '#yangjiadu'], ['塘桥渡口', '塘桥渡口, lujiazui, pudong, shanghai', '#tangqiao'], ['董家渡渡口', '董家渡渡口, huangpu, shanghai', '#dongjiadu'], ['陆家浜渡口', '陆家浜渡口, huangpu, shanghai', '#lujiabang'], ['南码头渡口', 'Nanmatou Ferry, pudong, shanghai', '#nanmatou'], ]; 金陵东路渡口 WIKI: 东金线轮渡 （这个渡口青蛙竟然忘了拍站牌，当时光想着赶紧冲进去赶上船， 站外什么也没拍，然而等了大概15分钟才发船。 于是只好拿前一天晚上拍的信号塔的夜景代替站外的招牌啦，这个渡口就在这个信号塔旁边。） 这条航线是外滩到东方明珠的最近路线，所以渡船上面几乎装满了人。 青蛙好不容易找到个靠窗的空地儿拍了几张照片。 前排C位黄金震旦，后排陆家嘴三件套：注射器、开瓶器、打蛋器。 金陵东路码头的栈房和栈桥。 水上警察和海事部门的执法船和码头。 浦江北岸，看起来都是金融巨头们的地盘。 连游船的广告商都是VISA和太平洋保险。 不知道是哪个船上的混蛋扔了个瓶子在江里，瞬间就漂出去很远，大概待会就直接出海了。 浦江北岸。 到达东昌路渡口，这条航线基本就是条直线，非常快。 东昌路渡口 WIKI: 东复线轮渡 东昌路渡口，往复兴东路和金陵东路方向是两个不同的进站口， 所以到达之后先刷卡出站，然后再刷卡进站。 从浦东看一眼对岸，魔都奇奇怪怪的楼房好多，右边那个好像把海葵顶脑袋上了。 除了金陵东路到东昌路这条线路上不允许自行车和摩托车上船，其他渡口都可以摆渡自行车和电动车，甚至连三蹦子都能开上去。 另一个角度的打蛋器和瓶起子。 浦江南岸。 杨家渡方向开来的渡船。 复兴东路渡口到达。 复兴东路渡口 WIKI: 杨复线轮渡 从东昌路方向的出口出来，转个身再进入杨家渡方向的渡口。 到杨家渡的渡船都是双层渡轮，底层基本都是满满的电瓶车自行车， 行人非常自觉的几乎全部上二层了。 而且二层有个露天区域，虽然没空调，但是江上的风吹过来也非常凉爽。 再换个角度看打蛋器和瓶起子，东方明珠露出个尖尖。 沪航客97，这是刚才坐的东昌路轮渡。 渡口栈桥。 阳光指向的地方就是杨家渡，出发。 渡船一层，大爷把三轮油驴都骑上来了。 杨家渡渡口 杨家渡到达。 杨家渡渡口到达之后，青蛙需要步行1km多才能到达塘桥渡口。 好在杨家渡出来右转就是一条健身布道，可以在塑胶跑道上溜达溜达，或者在渡口找一辆共享单车。 步道中间有几个大草坪，不少家庭带着娃在草坪上玩耍。 路过一个大帆船，不过好像是个饭店。 在步道上就可以远远的看到南浦大桥了，待会渡船还从桥下开过。 路遇一个吊车抓斗，难道这里之前是运煤的码头？ 健身步道，虽然盯着大太阳，依然有很多人溜达锻炼。 塘桥渡口 WIKI: 塘董线轮渡 顶着太阳跋涉1km多之后，终于到达塘桥渡口了。 不知道是因为中午时间还是这边已经渐渐远离外滩中心区域， 等船的人明显少了。 世博客渡22，貌似这个船是为世博会准备的渡船。 从上游望向外滩方向，最显眼的依然是三件套。 南浦大桥，很高很霸气，修这么高大概也是为了过轮船考虑吧？ 塘桥开船。 新友好，大概是个游船？ 这个渡轮也是双层渡船，上二层呆着看风景去。 董家渡渡口 董家渡到达。 董家渡到陆家浜渡口之间也需要走路，而且是沿着黄浦江北岸的防洪堤。 青蛙在这段路上被晒爆了。后半段黄浦江边上的烂泥还有一股子臭味，体验很糟糕。 陆家浜渡口 WIKI: 南陆线轮渡 陆家浜路渡口到达。 陆家浜这个渡口修的相当气派，大概因为正对着当年世博的场馆。 南浦大桥左边。 从陆家浜路再往外滩方向看，这里黄浦江有一个大弯，已经看不到三件套了。 从渡船窗里往上游看看，不少货船来来往往，似乎江边的建筑开始变得低矮稀疏了。 当年世博会期间这条船估计也是作为世博轮渡用的，船上还有涂掉的世博logo。 南浦大桥桥下。 桥下面是个月子中心，选这个地方环境不错。 南浦大桥右边。 桥中心位置，桥上还挂着航路的信号灯。 沪WJ0001，这船看起来很牛逼的样子，窗子都用帘子遮起来。 南码头渡口 南码头渡口到达。 到这里青蛙的部分遍历魔都轮渡的行程结束。 共计耗时2小时19分钟。 这个季节的魔都似乎是一个非常适合户外活动的季节， 除了在防洪堤上被晒成傻子，其他路段竟然非常适合走一走。 感觉自己好像爱上魔都了。 另外在闵行、松江，还有黄浦江下游，还分别有4-5条轮渡线， 如果有机会的话青蛙还有兴趣继续遍历一下。 不过目前并没有计划，大概需要自己准备一个陆地交通工具才行。 行程最后，青蛙骑车去找了一家小杨生煎。 结果大失所望，除去毫无意外的毁了一件衣服， 小杨生煎的味道完全对不起他的名气，甚至还不如清河五彩城地下的生煎摊。 盛名之下其实难副，下次来魔都可以着重考察下那些不太出名的小店。","tags":"Travel","url":"2019/06/take-shanghai-ferry-service/","loc":"2019/06/take-shanghai-ferry-service/"},{"title":"2013年终总结及2014年新年目标","text":"辞旧迎新，又是一年年终总结和新年展望的时候。 首先，工作。 今年青蛙完成了来北京三年之后的第一个转折：换工作。 虽然这次换工作是在年度计划之中的，但是确实是在原来公司的团队里发现了问题，以至于不得不提前离开。 （也是由于拖延症的关系，一直到年底，换工作的blog也没有写完，只好在这里简单写一下对前公司的感想了） 青蛙的前东家，也就是Red Hat，实际上是一家非常不错的公司。青蛙刚刚进去的时候，体会到的是宽松活泼又快速的工作方式。 在这种工作环境里，工作本身就是件很有意思的事情。 首先，在每个人保证自觉性的前提下，老板们基本不会过多的过问进度方面的问题， 只要能完成任务，剩下的时间可以随意安排。于是青蛙自己就有了很多学习和研究的时间。 但是，随着老员工的离去和新鲜血液的加入，这种工作氛围慢慢的没有了。 青蛙最常听到的抱怨就是任务太重以至于不得不加班…… 大概是太多华为来的家伙把加班文化带到了这里？ 一个工资不到华为三分之一，每天还要加班到8-9点钟的公司，实在不能说是一个好选择。 于是很多人离开也完全可以理解。 在这种环境下，青蛙开始慢慢的跟找上门的猎头接触，并且参加了一些面试。 但是出去看过了才发现自身很多的不足，例如基本功不扎实，编码能力不足…… 然后回过头来再看看身边的同事，每天都为一些鸡毛蒜皮的小事情扯来扯去， 完全没有值得自己学习借鉴的地方。于是青蛙下定决心，一定要在工作满三年之前离开。 然后在 侯总 的帮助和引荐下，青蛙有幸加入了Canonical大家庭。 虽然比起Red Hat，Canonical只是一家小公司，但是这家公司的文化更接近几年前的Red Hat。 另外这家公司里前帽帽员工竟然出奇的多，青蛙的老板，老板的老板，老板的老板的老板，都是前帽帽员工…… 其实也难怪，做Linux的公司实际上就那么几家而已。 新的工作基本跟编码彻底不贴边，于是青蛙感觉这辈子可能基本就告别码农身份了。 当然，业余时间如果能做些Python的项目最好，但是，拖延症患者一般只会把这种想法放在脑子里想想而已…… 其次，生活。 上半年青蛙基本还是延续了2012年疯狂运动的状态。从春天开始就一直在骑车。 但是夏天的时候不幸病倒了，然后就突然从骑车运动变成了四处旅游。 首先是北京周边的几个地方： 鸡鸣驿 ， 土木堡（游记整理中……）。 然后就一发而不可收拾，青蛙从九月到十二月，几乎月月都跑出去玩儿： 青岛（游记整理中……）， 杭州（游记整理中……）， 天津塘沽（游记整理中……）， 张家口（游记整理中……）， 厦门（游记整理中……） 难道这就是传说中的读万卷书，行万里路？ 读万卷书在这个快节奏的时代比较难，但是行万里路现在真是太简单了。 2014，青蛙应该继续行走在路上。 当然，自从发现老爹老妈还是很喜欢我常回家看看之后，青蛙只要有比较长的假期都会跑回家待几天。 但是在家好吃懒做也引起了老妈的反感。 2014，除了常回家看看，还有多帮老娘做做家务。 第三，学习。 因为去年下半年一直处于学习状态，所以今年上半年青蛙也一直在努力奋进的状态：努力看书，努力背单词。 但是拖延症患者要保持一个长久的学习状态非常难，于是从不知道什么时候起，背单词和看书的事情就被荒废了…… 换了新工作之后，因为接触的都是全新的东西，所以学习的重点都放在新的业务系统上了。 但是青蛙也在工作中发现，很多基础的Linux知识依然不清楚，继续啃RHCA还是很有必要的。 另外一方面，因为老板和同事全都是外国人，口语和听力成了青蛙必须尽快解决的大问题。 目前听比较标准的英音的话，青蛙大概能听懂一多半，但是稍有口音就完全听不懂了。 解决的方法似乎只有一个：多听，玩命的听。 口语的话，发音是个大问题，然后就是词不达意。当然也没别的途径好解决，只有多说。 第四，折腾。 NAS? （笔记整理中……） 2013总结 整体上来说，2013年计划完成度就是四个字来形容：啥也没干！ 总之今年过的有点混乱。 学习，P1，完成RHCA/CCIE认证中的一个。 未完成，青蛙试图参加RHCA的培训和考试，但是被Boss无情的拒绝。 只好自己先慢慢看了…… 然后青蛙又报了CCIE-SP的培训，但是因为换工作的原因没有完成培训。 学习，P1，雅思7分。 买了雅思单词书和真题，但是目前雅思单词完成度只有三分之一。 但是背单词已经有些效果了，看美剧一些单词可以直接听出来了，lol 学习，P2，尽可能多的阅读其他项目的Python代码，例如VDSM。 随着换工作也一并搁置。不过目前还是有Python项目可读，例如Openstack。 学习，P2，Debug Hacks，读完、理解这本书。 完成度三分之一，拖延症…… 学习，P2，Facebook上Cisco学院会经常帖一些实际的项目或者实验拓扑，虽然有些可能只是CCNA Level，但是拿来每天练手很不错。 未进行，开始实施的时候发现实际上并没有时间做这个事情，单词学习和代码阅读竟然把空闲时间挤满了。 编码，P1，完成目前手头准备给Autotest upstream的代码，旧的这几个patch没有处理完成之前，不要再做新的了，免得一无所成。 最后的结果是离职前所有手头的patch全部被放弃，很可惜。 编码，P1，pdf剪裁工具，目前看来是非常需要的。即使以后不在Kindle上看pdf了，给iPad/iPhone用也是相当不错的，目前有些很多白边的pdf看起来非常不舒服。 今年接触pdf不多，于是这个软件也处于停滞状态。 编码，P2，IRC bot继续增强。这个似乎可以发掘下有没有人对这个也感兴趣，一起来做了。 在离职之前一直维护中，可以查询很多工作系统的信息了。到新公司之后，放弃…… 采购，P1，四轮。 赶在2013年的最后一天，也就是12月31号，去交了钱准备提车。 采购，P2，公路车。 2013 春季促销的时候海淘了一辆Focus。骑过公路之后青蛙才发现公路真的是青蛙想要的那种车。 采购，P3，MBA，万一没本子用了，就买MBA吧。 虽然到新公司之后自己买了本子，但是考虑到工作需要还是买的Thinkpad。 但是青蛙在酝酿再买台MacOS的系统自用，等2014年实现吧。 生活，P1，坚持写Blog，至少每周1篇。 （ Update 2012-12-31 21:16:00 ） 拖延症导致很多blog开了个头但是没完成。目前手头积压10+篇，青蛙要补欠帐喽。 2014展望 新的工作，意味着新的开始和新的挑战。所以明年应该是忙碌又充满变数的一年。 学习，P1，完成CCIE认证。2014年青蛙的CCIE认证需要重认证了，这样刚好可以参加一个新的笔试。 学习，P1，雅思7分。这个会英语包打天下的年代，必须尽快增强英语能力才行。 学习，P1，阅读Openstack代码。 学习，P2，INE的CCIE DC视频，了解Cisco DC解决方案。 采购，P1，MacOS系统的电脑， rMBP？ Mac mini？ 采购，P2，新的相机，Nex6？ 生活，P1，跟之前的同事朋友保持联络，每月聚会？ 生活，P1，坚持写Blog，至少每周1篇。 生活，P2，继续出行，争取走遍全国各省。","tags":"Misc","url":"2013/12/2013-summary-and-2014-outlook/","loc":"2013/12/2013-summary-and-2014-outlook/"},{"title":"QEMU中的 pvpanic设备","text":"pvpanic设备是在Qemu-1.5的时候引入的一个ISA设备[1]， 旨在让hypervisor可以感知guest kernel panic，并作出相应的处理。 在目前的实现中，pvpanic使用了一个固定的I/O端口（默认为0x505）， 向这个端口的bit 0写入1的时候，即意味着guest kernel panic发生了。 首先，先来玩一玩这个设备，看看它到底会干点啥。 青蛙目前用的Ubuntu Saucy 系统上面的 Qemu 版本是1.6.0。 由于pvpanic设备在设计过程中并没有过多的考虑windows guest的情况， 并且libvirt支持这个设备也遇到了困难，所以qemu的开发者们曾经就这个设备发生了一大串的讨论[2]。 所以在现在的Qemu 1.7.*, 1.6.*, 1.5.4+中，这个功能都是默认关闭的， 要使用这个pvpanic，还需要几条额外的选项： qemu-system-x86_64 -name test-pvpanic -nodefaults -cpu host -m 1024 -M pc \\ -smp 1 ,sockets = 1 ,cores = 1 ,threads = 1 \\ -chardev socket,id = charmonitor,path = /tmp/monitor-test-pvpanic.sock,server,nowait \\ -mon chardev = charmonitor,id = monitor,mode = control \\ -drive file = test-pvpanic.qcow2,if = none,id = drive-virtio-disk0,format = qcow2 \\ -device virtio-blk-pci,scsi = off,bus = pci.0,addr = 0x5,drive = drive-virtio-disk0,id = virtio-disk0 \\ -vnc :0 \\ -device cirrus-vga,id = video0,bus = pci.0,addr = 0x2 \\ - Links [1] https://github.com/qemu/qemu/blob/master/docs/specs/pvpanic.txt [2] pvpanic plans? http://thread.gmane.org/gmane.comp.emulators.qemu/229289","tags":"Virt","url":"2013/12/new-device-pvpanic-in-qemu/","loc":"2013/12/new-device-pvpanic-in-qemu/"},{"title":"青岛两日游（下）","text":"第二天一早，首先的目的地就是超市，仰慕已久的崂山可乐怎么能不来一发呢。 甜甜的红枣味，还满好喝的。 超市采购完毕，赶奔轮渡码头，体验一下青岛到黄岛的轮渡。 7块钱半小时，童叟无欺良心价。 大轮船。楼下走车，楼上走人。开闸放车了。 鲁胶渡2。 旁边的叫鲁胶渡7。 搭轮渡的汽车也不少，不用绕行隧道，还能歇半小时。就是不知道船票价钱怎么样。 开船，岸边高楼林立。 远远的一艘大轮船开进来。 大轮船船舷豁了一块儿是什么道理？难道这船也是汽车滚装船？ 准备收网的渔船，随着海浪起起伏伏。 看到一个大家伙，GC tanker，垃圾回收箱？ 屁股来一张，照片里感受不到山一样高的船的气息。 黄岛那边不知道是做啥的工厂。 黄岛轮渡站到达。 从黄岛下船之后，青蛙又坐公交回到青岛。下一站就是圣弥爱尔大教堂。 路遇嗨嘤嘤海产品批发。 西行漫记没看过，续更没看过。 遇见教堂，和横店电影城…… 很大很气派。 又遇到好几对拍婚纱照的。 教堂没有开放，不知道为什么。不能进去参观了，遗憾。 从教堂出来，时间差不多了，准备赶奔车站， 在路上遇到了青岛的另外一大特产：崂山啤酒，青蛙很想带一打回家，可惜太沉了，作罢。 青岛站的候车大厅也很有欧式气派啊。 进站，上车。 动车上路遇大雨，不过完美躲过。 安全抵达帝都南站。 周末两天时间紧迫，只是匆匆逛了一下青岛。 以后有机会再去青岛继续探索吧。 青岛两日游 上篇 青岛两日游 中篇","tags":"Travel","url":"2013/09/tour-of-qingdao-c/","loc":"2013/09/tour-of-qingdao-c/"},{"title":"青岛两日游（中）","text":"其实从八大关回市区的路上还发生了杯具， 青蛙本以为原路返回就行了，结果来的时候这条路是单行线，既没公交，也没办法打车。 在地图上查了下路不远，于是决定腿着回去。 不过腿着走就发现了好东西 —— 海军博物馆。 虽然青蛙不是个军事迷，但是有大军舰在这摆着，还是很想去看看的。 门前的古炮，虽然牌子上写的是道光年间的，但是青蛙猜测真的文物估计不会就这么摆在大门口吧。 而且它的成色很新呢，lol 门票，50羊。可惜这个116不在博物馆里。 这飞机不知道是啥型号，大概是个水上飞机。今天时间有限，岸上的飞机基本没看，直奔105舰。 105舰，就是\"济南\"舰，是051型驱逐舰的首舰，Wiki page 在 [1] 正在摆弄机枪的小伙伴。 105退役的时候把能拆的都拆了，能剪的线也都剪了，于是驾驶仓一片乱糟糟，青蛙也就不拍了。 来一张坐在驾驶台上眺望的照片算了。 正面的火箭发射器和主炮。 130口径。 导弹发射架的说明，不过看这个牌子，就可以理解为什么这些船需要经常维护了。大概海水或者雨水的腐蚀过于严重。 531舰舷号。531是我国第一艘携带舰对空导弹的护卫舰， Wiki page 在 [2] 531引以为傲的小导弹，lol 很不巧的是531舰正好处于维护中，没法上去参观，只能在105和101上远远的看几眼了。 从105舰上下来，太阳已经快落山了，于是青蛙只能匆匆在101舰上转一圈。 101舰说明介绍，Wiki page 在 [3] 未完待续... 青岛两日游 上篇 青岛两日游 下篇 参考资料： [ 1 ] 051型驱逐舰 [ 2 ] 053K型护卫舰 [ 3 ] 鞍山级驱逐舰","tags":"Travel","url":"2013/09/tour-of-qingdao-b/","loc":"2013/09/tour-of-qingdao-b/"},{"title":"青岛两日游（上）","text":"去青岛的计划，青蛙已经酝酿很久了，可惜迟迟没法行动。 眼看秋天就来了，再不动弹天气就凉了，于是心一横，无论如何今年也要去一次青岛。 首先就是往返车票的问题，北京站到青岛的车只有G和D了，生活在在这个被高铁的时代的 穷游党真是太不幸了。还好之 MnOz 曾经说过黄村站还有 一趟去青岛的普速车K709。但是8月21号订票的时候，黄村到青岛的卧铺票已经卖光了。 本着死活都要出去玩态度的青蛙一咬牙一跺脚，干脆多花了70多大洋，买了前几站丰镇 的车票。虽然还是比动车便宜，不过心还是淌血啊。 一晚上卧铺，顺利抵达青岛地界。 K709在青岛四方站技术停车将近办小时，站外的小山上挂满了青岛的著名品牌。 抵达青岛： 听说青岛的下水道很有名： 下车直奔车站对面的长途汽车站，寻觅去崂山的汽车， 结果被告知每天去崂山只有早上8点一班车，我们来的太晚了，想去崂山请明天赶早。 没办法，只能临时更改行程，去掉游崂山的计划，改成2天青岛市内游览。 先去麦当当填饱肚子。 高端大气的楼梯，请原谅我这个帝都土鳖没在麦当当见过这么宽的楼梯： 吃完早午饭，先去栈桥转转。 结果遇上栈桥在整修，没法上去，妈蛋，只好远眺了。 栈桥旁边的海滩，礁石上都是海蛎子啊海蛎子。 海滩上密密麻麻的海蛎子 来张全景，Google+自动生成的全景完全hold不住照片亮度差异问题。 路边的欧式建筑 路过德国监狱旧址，据说里面超级无聊，就不进去了，在外头看看算了。 既然崂山计划取消，那第一天就直奔八大关耍。 下车，紫荆关路口。 八大关 顺紫荆关路一路像南，就到了花石楼门口。 从前蒋总统曾经住过这里，建国后陈毅也在这住过。 门口售票，票价7羊。 花石楼内部全景 一层 二层 三层 顶层露台 站在花石楼上远眺海滩。现在这个季节大概是青岛人少景色又好的季节，拍婚纱照的也扎堆儿。 出花石楼沿山海关路向西，在正阳关二支路往北拐，走到居庸关路上，就是公主楼了。 这座小楼据说是为了迎接某个公主到达青岛而建的，但是目前处在关闭状态，没法参观。 只好拍拍外面的树叶。 在八大关一直待到太阳向西，说来这个地方很适合假日休闲或者带妹纸来拍些小清新的片子， 游览的话，看过两个楼之后就可以撤退了。 海边随手拍，金色的大海： 路过水族馆，但是时间不够，没法进去看看了。 未完待续... 青岛两日游 中篇 青岛两日游 下篇","tags":"Travel","url":"2013/09/tour-of-qingdao-a/","loc":"2013/09/tour-of-qingdao-a/"},{"title":"探访鸡鸣驿","text":"青蛙这周有点感冒的迹象，所以没法出去得瑟骑车，只好搞点简单的户外活动了。 昨天跟 MnOz 商量着走丰沙线，顺路逛一下传说中的鸡鸣驿。 话说这个鸡鸣驿，还真是大有来头。大话西游最后那段城墙激吻，就是在这拍的。 传说亮剑里李云龙轰掉的那个城门楼，也是鸡鸣驿的西门。 原计划是周六早上坐S2到沙城那班车S287，到沙城下，然后换乘公交到鸡鸣驿的。 结果到了北京北站一看，排队坐S2的队伍已经里三层外三层了，车站广播里一直 在叫唤着下一班S2已经是10点多的了。周末去郊区旅游的人还真是多。 没办法，只好赶奔德胜门换乘公交，880到下花园然后往回走到鸡鸣驿。 880的始发站在德胜门的东南角，青蛙今天坐的是去下花园的支线。 8点多点儿到的时候站牌下面已经排了好长的队伍了。还好上车之后还剩了最后排 的两个座位，不然又得等下一趟车。 有公交卡的话车票20羊，这是河北段的车票，北京段的直接刷卡，4.8羊。 沿G6出六环，到昌平，一路顺畅。这辆公交在昌平西关停了一下，但是车上已经 坐满了，没人上车。 在居庸关之前，G6上毫无意外的堵车了。 公交车走走停停，很是难受。 爬过八达岭之后突然就不堵车了，估计还是因为某些大卡车在八达岭之前的爬坡 路段爬不动，导致整体车流都很慢。 路过官厅水库， 两岸密密麻麻的都是大风车，好看的很。不过青蛙坐在里排， 一直没抓到拍风车的机会，发张蓝天碧水铁路桥凑数吧。 880在途中停一站官厅服务区，然后继续向前就是河北怀来了。 河北的山，跟北京的明显不同，高了不少，都是石头，都没树。但是天依旧很蓝。 今天真是个适合出游的好天气！ 880的车站就在下花园高速出口不远，离城区还有一段距离，虽然有城里的小公交 做摆渡，但是需要等很久。于是车站门口遍地都是出租车和黑车。 我们刚出来刚好有个司机在吆喝去鸡鸣驿，我们上去打听，20块，到鸡鸣驿城墙下。 反正不知道当地是啥价钱，但是跟帝都比这价格真不算贵，上车走起。 在出租车上颠了20来分钟，就到鸡鸣驿了。 这是西北角的碉楼。正在翻修。 门票40羊。看到这价格我们转身就走。虽然这是国家级的历史遗迹， 但是40羊的门票真是不便宜。 转过身来，拍一张鸡鸣山。这座山在鸡鸣驿的西北方向，鸡鸣驿就是以此山得名。 至于为啥叫鸡鸣山，青蛙没找到资料。 据说山背面有防火道可以上山，不过这座山不在今天的日程安排里。 东城墙，虽然有过修补，不过大部分还是当年的墙砖。 东城门 门口的铭牌。全国重点文物保护单位。 在这我们遇到了一个大爷，自称就是鸡鸣驿村儿里人，可以带我们直接进去。 两个人，50羊，附带导游。这大爷还特意强调讲解完毕再付钱，童叟无欺。lol 我们同意之后，这大爷告诉我们从某条路去某个门，然后他在那个门口等我们。 在城外老房子上看到的标语。 鸡鸣驿城里现存的景点就是几座庙宇和原来的驿馆。但是青蛙对庙和拜神这种事 完全不感兴趣，通通免进。出来随手拍拍路吧。 鸡鸣驿原本只有东西门，后来不知道什么时候，又在南北方向上各开了一个小门。 东西门之间的大街和东城门。 西城门，各种电影电视剧都在这拍啊，有木有眼熟的感觉？ 驿馆的遗址。现在里面已经成了民居，没法进去看了。据后来我们遇到的以为 老大爷说，当年鸡鸣驿的驿馆有6进院子，但是现在只剩下前后院，还成了民居。 驿馆后边是之前的养马场，现在已经全盖满民房了。 在一个院子里，青蛙发现了这么一堆破石头。这些大多都是当年在各个院子里 的石碑，在某个年代被砸碎之后，都扔在这了。 很多石碑上的字已经没法认了。挑两个勉强还能看出来的落款拍拍。 驿学门前的辘辘，井里的水早就干了。现在城里的居民都有自来水，也用不着 这种水井了。 驿学，文昌宫。明显是翻修过的。 泰山行宫，这座庙也被翻新过。但是庙里还保存这几十幅明代和清代的连环壁画。 因为青蛙对庙敬而远之，所以没有照片。 到这之后，城里的古迹就转完了，跟导游老人家寒暄几句，交钱闪人，爬到城墙 上看看。 从东城墙上看城里和鸡鸣山。 东城墙，城门楼是翻修过的。我们爬上去的时候东南角的角楼也正在翻修。 从南城看城内。这里几乎家家都有枣树。 南城墙，也是修复过的。 西城墙和城门楼。为神马青蛙看大话西游的时候不记得里面有山呢…… 城西南角的城隍庙，正在拆房顶准备翻修。 这真是跑到关老爷头顶上动土来了。 从西城门看城内。青蛙发现一个很有意思的现象。这里的两个城门竟然不是正对着的。 中国古代筑城不是很讲究对称嘛，为什么这两个城门不直对着，而且路也是歪的呢？ 西城门，这估计是当年的老物件儿，竟然还能竖在这。 出城，在城外看一眼西城门。为毛一点都不像大话西游的场景呢。电影里那个好像是土城啊。 好吧，据 维基百科 说大话西游这事儿其实是个误传。 鸡鸣驿城参观结束。爬到城北的路边拦中巴车赶奔沙城。 这条路上中巴车似乎很多，到沙城票价5羊。 中巴在沙城到沙城汽车站，直接向南走就是沙城火车站了。如果不想走，6块钱打车过去即可。 在到沙城站之前的一个小路口有那家传说中的喜来乐包子。 不过今天青蛙来的不巧，据说店里在装修，没有营业。 沙城站 K7702水牌，超级大套跑。 丰沙线上的绿皮车几乎被消灭干净了，坐K车的话很多小站直接通过了。很无趣。 丰沙线沿着永定河一路南下，一面是山，一面是水，风景很是不错。 不过青蛙今天坐的是靠山这面，车离山太近，基本来不及拍照片。只简单扫了几张。 车到三家店，过永定河。 然后过丰台，7点40多，进北京西。 一天游览结束。","tags":"Travel","url":"2013/07/outing-jiming-dak-in-hebei/","loc":"2013/07/outing-jiming-dak-in-hebei/"},{"title":"一张流：大连造船厂","text":"原来停潜艇的地方停了两艘在建的货船。","tags":"Pictures","url":"2013/06/pic-of-dsic/","loc":"2013/06/pic-of-dsic/"},{"title":"体验哈大高铁","text":"端午假期，青蛙因为算错了放假的日子，结果没有买到从北京直接去大连的车票。 于是只好动车回沈阳，然后从沈阳坐高铁去大连。 不过歪打正着，正好体验下提速之后的哈大高铁。 目测哈大高铁提速之后没有太明显的晃动，当然节约的时间其实并不多， 从冬天时候的2.5小时变成了夏天的2小时。 不过经过隧道的时候耳朵有很明显的疼痛。 车票，特等座要比二等座贵将近一倍 沈阳北站里动车的赠水处，在候车室最里面，难怪我之前几次都没找到。 沈阳北站站牌。 座席，是红色的，坐起来倒还满舒服，但是两人座位这边，中间的扶手还是只有一个，同时坐满有点挤。 紧挨着司机室，甚至可以听到里面传出来路况信息通告和列车员在对讲机上喊话的声音。 小桌板，这张拍虚了。 其实特等坐没必要在候车室领水，车上列车员还会再发水的。","tags":"Travel","url":"2013/06/travel-to-dalian-by-crh/","loc":"2013/06/travel-to-dalian-by-crh/"},{"title":"一张流：北京站","text":"两列高铁同站台停车。","tags":"Pictures","url":"2013/06/pic-of-beijing-railway-station/","loc":"2013/06/pic-of-beijing-railway-station/"},{"title":"马牌微型尾包","text":"青蛙早想着收一个尾包装工具和备胎，可惜淘宝搜到的包儿都很大，不太适合公路党用。 虽然公路党理论上不应该绑个包在车上，但是青蛙这种没有后援的屌丝只能用这方法带 工具了。 前几天水木车版上有大牛给推荐了一个小尾包，据说很小巧。青蛙立即淘宝之。 到手之后虽然不像想象中的那么小，但是还算不错，比常规尾包小了很多。 而且内附内胎一枚，撬胎棒两只。内胎还是马牌儿自家的，着实不错。","tags":"Cyclone","url":"2013/06/continental-saddle-bag/","loc":"2013/06/continental-saddle-bag/"},{"title":"一张流：蔷薇","text":"","tags":"Pictures","url":"2013/05/pic-of-rosebush/","loc":"2013/05/pic-of-rosebush/"},{"title":"酱油党之奥园笔记20130515","text":"今天晚上继续奥园。天气明显没有昨天给力，稍微有点冷，而且东南风严重。 骑到五环辅路和奥体东路上明显感觉到迎面吹来的大风，然后就各种流泪， 各种看不清路。近视党骑车就是这么杯催，弄得我再一次有换隐形眼镜的想法了。 今晚在奥园的人不多，也可能青蛙去的比较晚，反正刷圈儿的寥寥几个人。 晚上时间不多，来不及多刷，努力刷了两圈就闪人了。第一圈在奥体东路的红绿灯被拦住，损失20秒。轨迹： http://www.endomondo.com/workouts/190110837/1816111 第二圈前三公里前面几百米有两个人，于是青蛙一直在奋力追赶。 http://www.endomondo.com/workouts/190115362/1816111 看上面两条轨迹，每个拐弯的地方都会损失很多速度。青蛙目前还不敢用 公路压弯，真是比较丢人，囧。","tags":"Cyclone","url":"2013/05/riding-olympic-park-0515/","loc":"2013/05/riding-olympic-park-0515/"},{"title":"酱油党之奥园骑行笔记20130514","text":"今天是今年第一次刷奥园。算起来比去年懒了很多， 去年3月初的时候就已经刷了好几次了，虽然北风呼啸，但是也很锻炼人。 今年疏于锻炼的下场就是，虽然换车之后体力节省了很多，但是奥园一圈仍然需要12分半，真是猪一样了。 http://www.endomondo.com/workouts/189633005/1816111 第一圈刷完，遇见枪兵，benying，49妹，稍微聊了一下，他们迅速撤退。青蛙一个人继续刷圈儿。 奥园三圈共19.4km，用时41mins，匀速28.3 km/h。 这个成绩比去年平时成绩还差，要抓紧锻炼了。 http://www.endomondo.com/workouts/189637874/1816111","tags":"Cyclone","url":"2013/05/riding-olympic-park-0514/","loc":"2013/05/riding-olympic-park-0514/"},{"title":"Python Exception class中的args属性","text":"话说今天青蛙遇到了一个bug，在某个Exception里抛出了TypeError Exception， 青蛙仔细查了半天，才想到Exception有一个内置属性args，刚好跟这个Exception 定义中的args重名。 首先看下这个Exception的定义： In [ 4 ]: class E ( Exception ): def __init__ ( self , a , b , c ): Exception . __init__ ( self ) self . a = a self . args = b self . c = c def __str__ ( self ): return \"a = %r , b = %r , c = %r \" % ( self . a , self . args , self . c ) .... : 当这个Exception被触发时，又引发了一个TypeError： In [ 5 ]: raise E ( '1' , None , '3' ) --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) < ipython - input - 6 - b57acf162917 > in < module > () ----> 1 raise E ( '1' , None , '3' ) < ipython - input - 5 - fac85dd51acb > in __init__ ( self , a , b , c ) 2 def __init__ ( self , a , b , c ): 3 Exception . __init__ ( self ) 4 self . a = a ----> 5 self . args = b 6 self . c = c 7 def __str__ ( self ): TypeError : 'NoneType' object is not iterable 这就是Exception的args属性在作怪了，如果把self.args的名字换一下，世界又恢复正常了。 In [ 2 ]: class E ( Exception ): def __init__ ( self , a , b , c ): Exception . __init__ ( self ) self . a = a self . b = b self . c = c def __str__ ( self ): return \"a = %r , b = %r , c = %r \" % ( self . a , self . b , self . c ) .... : In [ 3 ]: raise E ( '1' , None , '3' ) --------------------------------------------------------------------------- E Traceback ( most recent call last ) < ipython - input - 3 - b57acf162917 > in < module > () ----> 1 raise E ( '1' , None , '3' ) E : a = '1' , b = None , c = '3' 背后的原因呢，就是Python不管这个args是啥，都会转换成一个tuple， 但是当args是一个NoneType，问题就来了。 17 /* 18 * BaseException 19 */ 20 static PyObject * 21 BaseException_new ( PyTypeObject * type , PyObject * args , PyObject * kwds ) 22 { 23 PyBaseExceptionObject * self ; 24 25 self = ( PyBaseExceptionObject * ) type -> tp_alloc ( type , 0 ); 26 if ( ! self ) 27 return NULL ; 28 /* the dict is created on the fly in PyObject_GenericSetAttr */ 29 self -> dict = NULL ; 30 self -> traceback = self -> cause = self -> context = NULL ; 31 32 self -> args = PyTuple_New ( 0 ); 33 if ( ! self -> args ) { 34 Py_DECREF ( self ); 35 return NULL ; 36 } 37 38 return ( PyObject * ) self ; 39 } 找到原因，解决起来就很简单了。给args换个名字，一切ok。 当然编码时的坏习惯才是导致这种bug最大的根源，以后千万不能乱写变量名了。","tags":"Programming","url":"2013/05/args-in-python-exception/","loc":"2013/05/args-in-python-exception/"},{"title":"一张流：绿叶","text":"真喜欢这种风格，绿色，阳光，生命，还有最关键的：希望。","tags":"Pictures","url":"2013/04/-pic-of-green-leaves/","loc":"2013/04/-pic-of-green-leaves/"},{"title":"Python中关于变量作用域的一些demo","text":"其实青蛙不是很想在blog里面说编程方面的东西，毕竟青蛙自己只 是个半调子，怕言多有失。不过这次遇到了一个很常见又很有趣的 问题，记下一笔，权当取乐。 话说上周一个同事在patch里面使用了一种比较hacker的方法[1]： 使用定义list成员的方式把函数的局部变量传递给sub-function并 在sub-function修改其内容。 这种做法被其他同事猛烈的抨击，实际上在python2.x中，因为语言 实现的问题，嵌套的子函数是没法直接写它的上层函数的变量的。 这个问题之前在Team内部没有引起足够的重视，大家习以为常的在 子函数里直接给一个父函数的变量赋值，结果都是错的，这个赋值 操作会直接引发异常。 有人总结了一下python嵌套子函数访问变量的行为[2]: In Python 2 . x , it is not possible to modify a non - local variable ; you have either read - only access to a global or non - local variable , or read - write access to a global variable by using the global statement , or read - write access to a local variable ( the default ) . That ' s just the way it ' s been designed ( probably for performance and purity ) . In Python 3 , the nonlocal statement has been introduced with a similar effect to global , but for an intermediate scope . 青蛙根据上面的总结写了几个函数的demo，然后引发了更深入的讨论， 于是终于引出了PEP-3104[3]。 这是青蛙最开始的例子， f1() 是最基本的函数调用，其中操作的foo也是f1内部的foo。 f2() 用到了global关键字，声明全局的foo变量，这是f2操作的就是全局 的foo了。 f3() 是错误的操作，子函数会直接抛出异常。 f4() 是使用list的方法避开命名空间的问题，因为在嵌套函数中依然可以 读取上层函数的变量，于是 sub_func 可以访问到那个list foo，然后可以 进一步操作其成员。 f5() 实际上操作的还是全局的foo。 #!/usr/bin/python foo = \"I'm global\" def f1 (): foo = \"I'm a string\" print \"foo in f1: %s \" % foo def f2 (): global foo foo += \" and modified in f2\" print \"foo in f2: %s \" % foo def f3 (): foo = \"I'm in f3\" def sub_func (): try : foo += \" and modified in f3's sub function\" print \"foo in sub_func of f3: %s \" % foo except Exception , e : print \"oops in sub_func of f3: %s \" % e sub_func () print \"foo in f3: %s \" % foo def f4 (): foo = [ \"I'm in f4\" ] def sub_func (): try : foo [ 0 ] += \" and modified in f4's sub function\" print \"foo in sub_func of f4: %s \" % foo [ 0 ] except Exception , e : print \"oops in sub_func of f4: %s \" % e sub_func () print \"foo in f4: %s \" % foo [ 0 ] def f5 (): foo = \"I'm in f5\" def sub_func (): global foo try : foo += \" and modified in f5's sub function\" print \"foo in sub_func of f5: %s \" % foo except Exception , e : print \"oops in sub_func of f5: %s \" % e sub_func () print \"foo in f5: %s \" % foo f1 () f2 () f3 () f4 () f5 () 在PEP-3104中，定义了一个 nonlocal 关键字，这个字的作用就是声明 一个变量既不是 local 的也不是 global 的，而是上层函数（outer scope） 中的。 但是在Python2.x中仍然没有这个 nolocal 关键字，PEP-3104中也给出 了两种实现来解决这类问题： #!/usr/bin/python def f5 (): f5 . foo = \"I'm in f5\" def sub_func (): try : f5 . foo += \" and modified in f5's sub function\" print \"foo in sub_func of f5: %s \" % f5 . foo except Exception , e : print \"oops in sub_func of f5: %s \" % e sub_func () print \"foo in f5: %s \" % f5 . foo f5 () #!/usr/bin/python class Namespace : pass def f5 (): ns = Namespace () ns . foo = \"I'm in f5\" def sub_func (): try : ns . foo += \" and modified in f5's sub function\" print \"foo in sub_func of f5: %s \" % ns . foo except Exception , e : print \"oops in sub_func of f5: %s \" % e sub_func () print \"foo in f5: %s \" % ns . foo f5 () 这两种方法本质上就是给变量bind到了其他地方（一个类成员， 一个函数成员）。这样在嵌套函数里可以访问一个全局的类的 成员来达到访问这个变量的目的。 本质上还是把变量扔进了 globals() ，随意青蛙并不推崇这种 方式。 而在上层函数定义list或者dict的方法，看起来hacker，所以 青蛙也不是太喜欢。 青蛙自己的方式是把上层函数的变量作为参数传入嵌套函数， 然后在嵌套函数中把修改后的结果作为返回值返回。虽然这种 方法看起来像C，有点不pythonic，但是免去了那些命名空间 猜来猜去的麻烦。 def f5 (): foo = \"I'm in f5\" def sub_func ( foo ): try : foo += \" and modified in f5's sub function\" print \"foo in sub_func of f5: %s \" % foo except Exception , e : print \"oops in sub_func of f5: %s \" % e return foo foo = sub_func ( foo ) print \"foo in f5: %s \" % foo Reference [1]. How do I change nesting function's variable in the nested function [2]. python can't access nonlocal variable before local variable is defined with same name [3]. PEP-3104","tags":"Programming","url":"2013/04/some-demo-for-python-varients-scope/","loc":"2013/04/some-demo-for-python-varients-scope/"},{"title":"图片：杏花开","text":"帝都上个星期还在下雪，结果这星期花就突然开了。 春天来的太突然，真让人措手不及。","tags":"Pictures","url":"2013/03/pics-of-apricot-flower/","loc":"2013/03/pics-of-apricot-flower/"},{"title":"东方红朝圣-20130323","text":"新年东方红朝圣游，虽然换了新车，但是依旧萎靡，东方红仍然不及格。 今年东方红山顶上竟然还有雪，比去年爬东方红气温低了很多。","tags":"Cyclone","url":"2013/03/riding-dongfanghong-201303023/","loc":"2013/03/riding-dongfanghong-201303023/"},{"title":"Wordpress转换到Octopress","text":"今天青蛙下定决心干掉Wordpress了，不为别的，就因为 在大天朝访问Openshift不靠谱的连接状态。 把Wordpress转换到Octopress这件事，对于天天泡在github 上的青蛙来说，实在是简单到爆了。github账户有了，ruby 运行环境有了，只要简单几步就够了： 按照 http://octopress.org/docs/setup/ git clone回octopress代码，安装bundler，安装默认主题。 按照 http://octopress.org/docs/deploying/github/ 在github上新建一个repo，名字取为\"your_github_id.github.com\"，在Octopress的目录中执行 rake setup_github_pages ， 在提示符中填入这个新建的repo的git地址。 然后 rake generate rake deploy 用浏览器访问\"http://your_github_id.github.com\"，应该就能看到Octopress的页面了。 记得要把源码（包括blog的markdown文件）提交到git repo里： 包括blog的markdown文件 git add . git commit -m 'your message' git push origin source 之后每次写完新post都需要做这个操作，以便保留原始文档方便日后编辑。 编辑_config.yml文件，修改blog的title、author、email等等信息。 http://octopress.org/docs/configuring/ Octopress 配置好之后就是把Wordpress迁移过来了，青蛙找到了一个exitwp的工具： https://github.com/thomasf/exitwp 按照exitwp的README安装好之后，从wordpress导出xml格式的文章备份，首先用xmllint检查 一下这个xml文档是不是有语法错误，特别是特殊字符之类。因为exitwp用了python的xml module， 这个模块对某些错误极度敏感，所以要修正xmllint报出的所有错误才行。 把这个xml扔进exitwp里面的wordpress-xml目录，执行exitwp，所有的wp post就会被转换成 一个个markdown文件了。 把这些markdown复制到octopress目录里的source/_posts下面，然后运行 rake generate && rake deploy 就可以把Wordpress的post内容都迁移到Octopress上了。 最后记得把这些markdown都扔进source branch里。 目前青蛙还没解决的几个问题： Category的英文名字似乎没法编辑，青蛙还没找到相关的文档。 Draft和private状态的文档还不清楚怎么转换。 当post很多时（>1000）， rake generate 需要运行相当长的时间，青蛙每次执行这个命令都需要2分钟+。 Update 2013-03-16: Category的问题据说在Octopress2.1里面被解决了。 青蛙从2.1的branch上backport了一个patch到master，终于解决了中文category名字的问题。 patch在： https://github.com/gfrog/gfrog.github.com/commit/60212ee17766e8ba84f81cfdc3f36ef992ae6fb1 没有经过完整测试，不过目前使用状况良好。 目前Category的写法为 - Category link[Category Name] ，从而完美搞定中文分类名的问题。 Update 2013-04-03: 补充一些Octopress用法的问题： 新建post： rake new_post[\"Post标题\"] ， 不过permalink似乎比较难修改，在markdown里写slug似乎无效，只能修改markdown文件名。 codeblock 的用法： http://octopress.org/docs/plugins/codeblock/ 修改header menu： 编辑 source/_includes/custom/navigation.html 添加Header image： 编辑 sass/custom/_styles.scss，加入： header [ role = \"banner\" ] { background-image : url ( /images/header_bg.png ); background-repeat : no-repeat ; }","tags":"Site","url":"2013/03/convert-wordpress-to-octopress/","loc":"2013/03/convert-wordpress-to-octopress/"},{"title":"办公室的花","text":"这几天办公室的前台摆了一盆蝴蝶兰，真是美爆了。 不过，摆在工位上的花花草草就悲惨的多。 因为办公室温度太高，这些刚搬过来的植物显然不太适应， 瞅瞅，昨天刚搬来的时候还是绿油油的，今天就成了这个样子： 现在办公室的温度湿度真是太不适合生物生存了。 -___-","tags":"Pictures","url":"2013/03/pics-of-flowers-in-office/","loc":"2013/03/pics-of-flowers-in-office/"},{"title":"终于入了公路车","text":"纠结了良久，终于下手买了公路车。 新车是去年款的Focus Focus Izalco Team Ergoride 3.0 Force 2012， 英国直邮过来，被海关拦住叫了400羊的税。","tags":"Cyclone","url":"2013/01/2013-01-30-new-road-bike-focus/","loc":"2013/01/2013-01-30-new-road-bike-focus/"},{"title":"我们来打洞：转发DNS包","text":"基于某些众所周知的原因，在天朝上网非常需要勇气和技术。 今天在跟某人聊天时了解到Chrome竟然没办法使用proxy进行DNS查询<1>， 导致DNS查询结果持续被污染。 虽然用proxychains能把一切流量塞进代理里面， 不过用proxychains启动浏览器的话，各种自动代理插件就失效了，所以这是个得不偿失的方法。 青蛙晚上的时候突然想到iptables是不是可以把DNS查询流量转发进ssh tunnel呢？ 上网google一番之后，发现这是可行的，而且其实用不到iptables，只要nc就够了。 要用SSH Tunnel转发DNS流量，最大的问题是要把DNS协议使用的UDP协议转换为TCP协议，然后在proxy端还要转换回来。 所以目前青蛙想到的方案有一个很大的缺陷，就是如果ssh服务器上不提供nc命令的话，下面的操作是没法完成的。 首先，用SSH连接ssh服务器，这里青蛙打了一套组合拳，ssh -L + -D组合，分别负责DNS流量和普通数据流量： ssh - D1080 - L5353 : 127.0.0.1 : 5353 user @ssh - server -L 参数的目的是在本地机器上打开一个5353端口，发送到这个端口的数据都会被转发到ssh服务器上的5353端口上。 然后，在ssh服务器上执行： server$ mkfifo / tmp / fifo server$ nc - l - p 5353 < / tmp / fifo | nc - u 8 . 8 . 8 . 8 53 > / tmp / fifo 这两条命令用普通用户就可以执行，在大部分ssh服务器上应该都可以用。 另外<2>中还提供了一个socat版本，这个东东可以省去创建fifo管道的步骤， 看起来比较简洁，但是做的事情跟nc是一样的： 把ssh服务器上TCP5353端口收到的包转发到8.8.8.8的UDP53端口上去。 socat tcp4 - listen : 5353 , reuseaddr , fork UDP : 8 . 8 . 8 . 8 : 53 接下来在本地机器上执行： local # mkfifo / tmp / fifo local # sudo nc - l - u - p 53 < / tmp / fifo | nc localhost 5353 > / tmp / fifo 在本地UDP53端口上监听，一旦有数据包，就转发到本地的TCP5353端口上去。 socat版本： socat udp4 - listen : 53 , reuseaddr , fork tcp : localhost : 5353 好了，到此打洞的部分完成，最后的包转发流程应该是： localhost : UDP53 -> localhost : TCP5353 -> ssh - server : TCP5353 -> 8.8 . 8.8 : UDP53 主要就是使用nc/socat把UDP和TCP流量进行转换，以便可以把他们扔进SSH Tunnel里。 然后，修改/etc/resolv.conf： nameserver 127 . 0 . 0 . 1 这样再用Chrome浏览器就应该没有该死的DNS污染问题了。 这个解法不算太好，因为需要在Server端执行命令，如果是一些不给pty的host，就没办法用这个方法了。 可能比较好的方案还是透明代理之类的。 参考资料： <1>. Issue 29914: DNS queries not forwarded through SOCKS v5 proxies https://code.google.com/p/chromium/issues/detail?id=29914 <2>. UDP traffic through SSH tunnel http://superuser.com/questions/53103/udp-traffic-through-ssh-tunnel","tags":"Linux","url":"2013/01/foward-dns-packet-with-tunnel/","loc":"2013/01/foward-dns-packet-with-tunnel/"},{"title":"新年第一天，折腾一下各种装备","text":"放假在家，闲来无事，青蛙把之前一直想拆开看看的几个东西动手拆了。 第一个是前不久买的WD 3.5寸移动硬盘。拆开之后，果然是绿盘。 反面，右下角是移动硬盘的控制器。 靠近点瞧瞧，给主控芯片来个特写，这是不知道啥来历？ 拆开的时候过于暴力，而且方法不对头，卡子掰坏了。 虽然这个小东西外壳挺烂的，不过四个角的橡胶垫设计的还不错，充分减少硬盘的震动。 这次拆解这块硬盘的目的主要是看下这个小盒子的内部空间够不够放进一块儿Raspberry Pi， 结果很让人失望，虽然硬盘边上有一定的空间，不过还是不够放下树莓派的。 看来在移动硬盘里做些什么的想法是没法实现了，只能在外面挂个盒子。","tags":"Misc","url":"2013/01/fix-some-device-in-first-day-of-2013/","loc":"2013/01/fix-some-device-in-first-day-of-2013/"},{"title":"2012年终总结及2013年新年目标","text":"又到一年岁末时，再来总结一下今年的历程吧。 首先，工作。 上半年基本就是在浑浑噩噩中度过了，在 年中总结 里面提到过，感觉上半年一直就是混过来的。 本来准备在上半年搞定CCIE的考试，结果拖延症爆发，一直拖到了年底才完成。 万一年底这次过不了，那么明年的计划肯定要完全耽误了。 下半年呢，5月下旬到6月初的时候青蛙一直忙于找房子，所以从5月开始就就没有全力投入工作中。 再加上下半年筹备CCIE考试，导致投入工作中的精力大幅度减少。 于是很多应该在今年完成的工作目标都没有达成。 并且精力少了，追踪最新的Qemu/Kernel代码的时间就少了很多， 导致今年底对于Qemu-kvm的了解反倒没有年初多。 Python呢，九月份左右的时候青蛙试图使用OO的方式重构一部分代码，但是反响似乎不太好。 现在回头再读那些代码，可读性确实不太高。 明年，青蛙需要着重加强编码质量和代码可用性。 2012年的代码量也因为考试被拖下来很多，2011年的时候几乎每天都有新patch， 今年只是断断续续的修复一些问题。很少有增加新功能的patch。 看来学习新东西真的是一件很耽误时间的事情啊。 今年的工作方式也因为考试耽误了不少，之前青蛙给自己制定了每日工作内容， 今年这个工作内容彻底被打乱了。 虽然12月考完试之后青蛙正努力恢复每日工作内容，但是因为每天的效率不高，所以收效不大。 今年秋天有幸人生中的第一次升了Title，虽然看起来没啥，不过毕竟工作了5年， 才换来这么个Title，看来之前青蛙确实挺失败的。没办法，唯有继续努力。 其次，生活。 下半年青蛙重新找房子，恢复了跟陌生人合租的状态。 这种状态直接导致了每天不想回家，因为回家就是个小盒子，只是个睡觉的地方。 于是办公室和教室是青蛙待的最多的2个地方。总之，宅。 2012年几乎没有旅行，回家探亲，包括去大连考试，都是匆匆而过，甚至顾不上停下来到处走走。 十一的时候看似疯狂的带自行车去看爷爷奶奶，结果一路都是下雨天，到了爷爷奶奶那直接病倒，十一趴了一周。 今年跟老爸老妈似乎多见了几次面，每次都感觉到他们见到我回去的那种开心。 明年争取多回家陪陪老爸老妈吧。 第三，学习。 2012年青蛙的Kindle4没有发挥它应有的作用，上半年看过几次， 下半年开始备战CCIE考试之后就基本扔在一边了， 因为考试相关的资料全是PDF的，用小屏幕的Kindle看起来太痛苦了。 Kindle Sync的工具青蛙已经很久没有动过了，因为青蛙最近连Google reader都没有读过。 总之，2012年的阅读量简直低的让人发指，完整的读完一本书似乎在今年都没有发生过。 不清楚今年青蛙为什么会这么浮躁，一看书就想迅速翻到结尾，这个问题明年必须要改掉。 如果说今年最大的成果，那就是拿到了2个认证，一个是RHCE认证，另外一个是CCIE。 RHCE拿到的比较轻松，因为目前青蛙主要就是做这方面的内容嘛，每天遇到的情况堆起来， 也差不多就是RHCE的考试题了 XD。 另外加上这是我司的内部考试，考前有充分的培训加练习，所以基本没有什么压力就拿到了。 然后，就是今年最痛苦的一段时间，CCIE lab练习，这段时间真的像是回到了高考备考那种状况， 每天晚上早起晚睡，在公交车上还要看配置。 索性功夫不负有心人，Lab还是一次通过了，虽然当中有些惊险，不过结果还是令人满意的。 考过CCIE之后，青蛙突然觉得有点茫然。 虽然考过了拿到号码，但是不会的还是不会，没经验也还是没经验。 似乎应该继续敲敲实验（多出去围观下项目？这个不知道有没有机会了） 考试过后青蛙一直没有找准继续的努力方向，是先学习RHCA课程把RHCA搞定， 还是趁热打铁争取拿下新的CCIE，现在这个就悬在这了，没有清晰的方向。 不过目前最清晰的目标就是英语啦，青蛙自觉英语真是烂到爆了， 于是找来背单词软件，买了雅思单词书，正在背单词。 虽然进度不快，不过感觉时时背些单词还是很有用的。（虽然还仅限于CET4词库 -_-） 第四，折腾。 人不折腾枉少年，今年青蛙同样没少折腾。 首先是 搞了个山寨Go Pro ， 实战效果挺好，可惜今年出去骑车的机会很少，它很少有发威的时候。 然后，把山地车卖了。因为今年用的实在太少，干脆出掉折现，择机收入公路车好了。 接着， 购入理发器自己剃头 。 这个很有意思，虽然有点不太敢想象，不过自己剃个简单的球形发型是没问题的。 再继续，青蛙考完CCIE之后发现实在没有地方安置之前那些学习视频和资料，于是败入新的移动硬盘一枚。 接着想到移动硬盘可能丢失资料的问题，败入3.5寸外置硬盘一枚。 然后呢，为了方便每天下载片片儿，又败了一枚树莓派（raspberry pi）准备搭建个NAS。 目前正在实施中。 2012目标总结 读完vdsm代码 基本没有进展，上半年曾经读过几个patch，也感觉到vdsm设计上确实有值得借鉴的地方。但是下半年的学习计划完全打乱了脚步。 通过 CCIE认证 完成。代价就是混乱的工作/生活状态。 增加跟autotest upstream的联系，多多在upstream冒泡 上半年Patch交流挺多，下半年，同样被打乱。 经常回顾python的基本知识，python核心编程之类，多读几遍 进展细微，因为下半年疏于练习，甚至感觉Python知识有倒退的迹象。 读一本关于linux内核的书，可以找尽量短点的，先学个皮毛 2012年，无读书。 完成那个给kindle推文章的小工具 无需求导致停笔。 做/改一个irc bot，给内部irc，也可以自己在freenode上跑一个，方便自己。 年中总结的时候以为青蛙今年不会做这个东东了，结果它是今年里意外的一个亮点。 青蛙以 phenny 为基础，改造了一个小bot， 每周五的时候会给它加一点新的功能或者bugfix，一点点积攒下来， 这个小Bot竟然在内部频道里工作的不错。明年要继续改进它。 采购计划： 一个更加给力的读书工具，kindle dx？ kindle fire？ ipad？ 最后还是买了iPad，备战CCIE的时候非常频繁的使用，阅读+笔记利器。 考完之后...目前在桌儿上落灰。（为了ipad也要有个阅读计划了。） 一部胶片口袋机， 奥记u2？ 相机买了，玩儿相机的时间没了。总之今年几乎就没拍片儿。 给媳妇买台ps3/ps4？ 再加一台电视？ 媳妇反对，放弃。不过买了个蓝光光驱，在电脑上看看蓝光电影凑合吧。 2013展望 既然世界末日就这么平平淡淡，毫无意思的过去了，那么日子就还得继续。 2013年的计划写在这，看起来有点复杂有点困难，不过没有挑战的人生还有神马意义呢？ 加油！ 学习，P1，完成RHCA/CCIE认证中的一个。 学习，P1，雅思7分。 学习，P2，尽可能多的阅读其他项目的Python代码，例如VDSM。 学习，P2，Debug Hacks，读完、理解这本书。 学习，P2，Facebook上Cisco学院会经常帖一些实际的项目或者实验拓扑，虽然有些可能只是CCNA Level，但是拿来每天练手很不错。 编码，P1，完成目前手头准备给Autotest upstream的代码，旧的这几个patch没有处理完成之前，不要再做新的了，免得一无所成。 编码，P1，pdf剪裁工具，目前看来是非常需要的。即使以后不在Kindle上看pdf了，给iPad/iPhone用也是相当不错的，目前有些很多白边的pdf看起来非常不舒服。 编码，P2，IRC bot继续增强。这个似乎可以发掘下有没有人对这个也感兴趣，一起来做了。 采购，P1，四轮。 采购，P2，公路车。 采购，P3，MBA，万一没本子用了，就买MBA吧。 生活，P1，坚持写Blog，至少每周1篇。 （ Update 2012-12-31 21:16:00 ）","tags":"Misc","url":"2012/12/2012-summary-and-2013-outlook/","loc":"2012/12/2012-summary-and-2013-outlook/"},{"title":"红帽年度拼图游戏","text":"We can do more when we work together. 好几个人work together，耗时一下午，终于完成。","tags":"Pictures","url":"2012/09/yearly-jigsaw-puzzle-in-readhat/","loc":"2012/09/yearly-jigsaw-puzzle-in-readhat/"},{"title":"购入理发器一枚","text":"生活在物价飞涨的帝都，必须在方方面面想办法节约生活成本。为了剩下每个月20羊的剃头费用，青蛙决定买一只理发器自己剃。","tags":"Misc","url":"2012/09/bought-a-philips-diy-hair-clipper/","loc":"2012/09/bought-a-philips-diy-hair-clipper/"},{"title":"2012年中总结之迟到篇","text":"整理blog的时候发现了 去年写的年终总结和展望 ， 现在回头看看，基本目标完全没有实现。还有4个月，要努力奋斗才行！ 其次，工作上似乎有条理了一些，但是自己仍然处于迷失状态。自己到底做点什么，以后怎么发展，仍然迷茫。 虽然这是一件很不应该的事情，工作四年，仍然不知道自己的方向在哪里，真是loser。 以至于年终曾经转去做kernel方向，但是担心自己的能力，又不了了之。 又工作了大半年，青蛙即将步入工作的第五个年头了，但是仍旧找不到自己的方向，不得不说这真是个悲哀。 管理做不来，售前做不来，售后做不来，总之需要频繁跟人打交道的职业都做不来，未来该往哪走，还真是不明朗。 不过在现在的职位上已经有一些心得了，对于python，对于虚拟化，已经不像去年像一个文盲的状态了。 如果再在这个方向上做下去，也是有许多有趣的事情可以做。 不过一年中学到的技术知识似乎不多？现在想想，似乎编程技能并没有太多的提高，这是一个急需提升的地方。 青蛙在上半年尝试着开始读一点qemu-kvm的代码 ，勉强能看懂一些简单的patch， 但是qemu-kvm整体的结构还是傻傻闹不清楚，如果想在这方面继续深入下去，还得持续地读代码。 Python方面，似乎2012以来没有太多的进展，代码量明显不如2011年多，质量似乎也变差了。 年初制定的编码量计划根本没有达到，接下来四个月要在这方面努力才行。 十月份青蛙收了一部kindle4，之后的三个月里阅读量比之前的九个月加起来都多。 kindle真的是值得拥有的好东西，赞美亚马逊。 Kindle4在2012年没有发挥它应有的作用，因为青蛙想看的基本书只有pdf格式，但是k4看pdf文档又相当不爽。 目前青蛙正在研究pdf跟tiff格式，试图搞出一个工具可以自动裁掉pdf的白边。 另外青蛙自己写了一个小工具抓取小说并推送到kindle（好吧，kindle上看的小说也不少）， 写这个小东东的过程中会思考一下如何构建一个方便扩展又方便编码的结构， 不过写完之后却发现跟工作上使用的 kvm-autotest 结构真的很像。 由此，青蛙决定多读读其他的代码，目前正在抽时间读读vdsm，恩，争取2012第一季度可以读完。 Sync的工具目前处于基本停滞状态，2012年中只修复了几个小bug。 由于dotcloud的app如果一段时间没有访问量，就会被自动关掉， 所以目前计划9月份把它迁移到Openshift上去。可能再加一点新功能？ 不过目前没有需求呢，没有动力。 哦，最后，青蛙赶在年底公司培训经费作废之前报了一个CCIE培训班，争取明年上半年可以把CCIE认证考下来。 （为什么又回去学网络了，青蛙也不知道，姑且算作上一段工作经历的一个总结性考试吧， 毕竟做了三年网络，再系统的学习一遍当做知识储备。） 青蛙终于逼自己把CCIE的笔试考过了，使劲背题一周，发现越背不会的东西越多。 心惊胆战的去考试，竟然还过了。XD 目前点到了12月份的lab考试位置，希望能来得及准备。 2012展望 及 2012年中总结** 读完vdsm代码 通过 CCIE认证 增加跟autotest upstream的联系，多多在upstream冒泡 经常回顾python的基本知识，python核心编程之类，多读几遍 读一本关于linux内核的书，可以找尽量短点的，先学个皮毛 完成那个给kindle推文章的小工具 做/改一个irc bot，给内部irc，也可以自己在freenode上跑一个，方便自己。 vdsm代码依旧一知半解，青蛙现在怀疑上半年自己到底做了什么，为什么什么都没看。 CCIE认证大概完成10%，笔试过了，lab努力中。 2012年没少在upstream发patch，不过都是些不痛不痒的修改，真正想做点什么的时候才发现自己能力真的不足，于是一再推脱，以至于一事无成。 python核心编程只看了一点点，平时工作中倒是养成了经常翻阅python manual的习惯，但是临时抱佛脚比不上系统的学习储备，还是要继续看书。 kernel。。。 完全没进展。 kindle sync工具，每次都是看到kindle发现没法显示图片的时候就想去把自己的工具改掉，但是又实在没啥思路继续写，于是拖拖拉拉，一直放在那里。 IRC bot，曾经尝试过一点点，但是反映不太好，大概2012年不会继续折腾它了。 采购计划： 一个更加给力的读书工具，kindle dx？ kindle fire？ ipad？ 一部胶片口袋机， 奥记u2？ 给媳妇买台ps3/ps4？ 再加一台电视？ 一直怨念着是不是要买ipad，特别是看到了New pad超爽的效果之后，不过这东西真的很沉，很热。 U2在年前到手，可惜才拍了不到3卷，洗出一卷，但是没扫描。 每次跟媳妇说买电视都遭到强烈反对，于是本计划搁置。","tags":"Misc","url":"2012/08/2012-mid-year-summary/","loc":"2012/08/2012-mid-year-summary/"},{"title":"折叠党之奥园笔记20120825","text":"上午去笔试，然后折腾了半天，快下午2点了才到家。 好好的周末就这么浪费掉了，青蛙很不甘心，刷下奥园聊以慰藉吧。 开始半圈很不错，踏频/心率都没有太高， 但是奥体东路爬坡之后明显感觉到没劲儿，踏频刷刷就降下来了。 速度也只能维持在25-27的样子，为神马每次刷都是这结果， 到奥体东路上就萎靡呢？快到科荟路的红绿灯的时候右肺一阵疼痛， 估计是下午奥园空气污染严重导致的。 科荟南路上车很多人很多，太阳光又很刺眼，小心翼翼地慢慢爬。 转到奥体西路上发现有各种治安协管啥的开始拉条幅封路，不知道晚上又有啥活动了。 右肺继续疼，放弃继续刷的想法，果断撤退，白天实在不应该在帝都市内运动。 贴视频。 http://v.youku.com/v_show/id_XNDQzMTczOTY0.html","tags":"Cyclone","url":"2012/08/riding-olympic-park-0825/","loc":"2012/08/riding-olympic-park-0825/"},{"title":"打造山寨版gopro运动摄像机","text":"tags, bicycle, gopro, camera, openbox, helmet 话说 gopro hero2 真的是个相当棒的东西，但是价钱实在太高了， 对于青蛙这种穷屌丝来说，买一个比自行车还贵的摄像机相当有难度。 所以青蛙一直酝酿着用山寨版解决方案。 淘宝上那些行车记录仪或者微型摄像机倒是很便宜， 但是行车记录仪普遍很大而且电源不够持久（或者干脆需要车载电源）， 微型摄像机拍摄效果很差。 这些东西基本都不能拿来当作运动摄像机用。 最后，青蛙终于锁定了那个最近很火爆的 Kodak Playfull [1]， 支持1080P拍摄，最大32G SD卡，重量95g。 最关键的是这东东竟然带一个相机脚架螺孔，可以很方便的用自行车相机架架到车/头盔上。 秀下Playfull的大小，旁边是月亮湖小直。 然后就是相机架的问题，上网搜搜， 还真叫青蛙发现了个靠谱的，FOTOPRO Action Mount [2]， 立刻淘宝之，拿到手之后发现做工和重量都挺满意，放头盔上刚好。 这个架儿没有图，参考[2]里面的图片吧。 秀下组装完毕的效果： 正面： 另一张正面： 侧面： 开机看看（哎呦，没装卡，内置的128M内存只能拍7秒视频）： 架子细节： 至于戴上的样子，是这样的，请读者自己脑补吧。XD 戴上之后明显感觉到头盔沉了，但是还在可接受的范围内。 相机跟架子的价格加起来大概是300多块钱， 再加上存储卡，整体在400元左右。 这套方案还是很廉价的呢。 (视频正在上传中，优酷比较不给力呀。） Update: 2012-08-25 18:40 试机视频： http://v.youku.com/v_show/id_XNDQzMTcyODcy.html 下一步需要考虑的问题就是看看能不能淘到这家伙的防水罩了，这样下雨也不怕了。 参考资料： [1] Kodak 柯达 Playfull 1080p高清手持数码摄像机 269元包邮（赠4GB SD卡） http://www.smzdm.com/kodak-kodak-playfull-1080p-hd-handheld-digital-video-camera-269-yuan-gift-4gb-sd-card.html [2] 單車專用相機腳架 FOTOPRO Action Mount 開箱 http://www.mobile01.com/topicdetail.php?f=318&t=1640584","tags":"Cyclone","url":"2012/08/diy-shanzhai-gopro-sports-camera/","loc":"2012/08/diy-shanzhai-gopro-sports-camera/"},{"title":"本blog已经迁移到 Openshift","text":"本Blog今天已经正式迁移到Openshift平台上了，欢迎反馈问题报告及速度报告。 同时在linode的服务器已经关闭。 其实linode真的很好很不错，只是青蛙的blog根本用不到一个vps来支持， vps上的资源几乎每天都是浪费掉的，还不如用PaaS平台低碳一些。","tags":"Site","url":"2012/08/this-blog-has-transfered-to-openshift/","loc":"2012/08/this-blog-has-transfered-to-openshift/"},{"title":"使用pyPdf切割pdf文档","text":"青蛙拿到一份扫描版的pdf文档，每个pdf页包含了两页实际书籍页面， 这种文档放在6寸Kindle上基本就是杯具了。于是青蛙试图找工具把他们切割掉。 根据 铄日博客 的推荐试验了 paper4kindle 和 k2pdfopt ， 但是papaer4kindle切割出来的文档页面错乱了，而且也没有修正pdf歪斜的功能， 剪裁输出的文档很难看。 k2pdfopt就更没法看了，从image识别文档的技术先进， 但是对于每页pdf包含2页实际页面的文档，k2pdfopt基本无能为力。 青蛙本想探索一下paper4kindle输出之后页面错乱的问题， 结果这玩意竟然不开源，又看到作者说花了几小时就搞出来了， 那青蛙也看看pypdf包，试试能不能直接写代码自己搞定。 花了半下午时间看了下pypdf（ http://pybrary.net/pyPdf/ ）的API， 然后直接把例子代码复制下来改吧改吧， 咱也基本实现了paper4kindle的核心功能了，成功把那份文档处理掉了。 至于那些花哨的界面啥的，有空再玩吧。 代码先贴在这里，没有整理，暂时先不贴到github了， 准备下一步尝试添加旋转页面的功能。 编码的时候发现了两个问题， 设置mediaBox的位置之前需要先copy一份page对象， 否则设置right的mediaBox的时候竟然会影响left的值， 猜测是pypdf模块内部直接返回了page对象的引用，并没有复制一份返回。 这份文档无法用paper4kindle编辑的原因是实际上文档的四个角坐标是反的， 大概文档扫描之后被顺时针旋转了90度。 最后小小鄙视一下用python、用开源库写代码竟然不继续开源的某些软件作者。 #!/usr/bin/env python import copy from pyPdf import PdfFileWriter , PdfFileReader output = PdfFileWriter () input1 = PdfFileReader ( file ( \"/tmp/a.pdf\" , \"rb\" )) outputStream = file ( \"/tmp/output.pdf\" , \"wb\" ) # print the title of document1.pdf print \"title = %s \" % ( input1 . getDocumentInfo () . title ) pages = map ( input1 . getPage , range ( 0 , input1 . getNumPages ())) #pages = map(input1.getPage, range(0, 10)) try : for page in pages : left = copy . copy ( page ) right = copy . copy ( page ) orig_upperLeft = page . mediaBox . getUpperLeft () orig_upperRight = page . mediaBox . getUpperRight () orig_lowerLeft = page . mediaBox . getLowerLeft () orig_lowerRight = page . mediaBox . getLowerRight () left . mediaBox . setUpperLeft (( orig_upperLeft [ 0 ], orig_upperLeft [ 1 ])) left . mediaBox . setUpperRight (( orig_upperRight [ 0 ], orig_upperRight [ 1 ] / 2 )) left . mediaBox . setLowerLeft (( orig_lowerLeft [ 0 ], orig_lowerLeft [ 1 ])) left . mediaBox . setLowerRight (( orig_lowerRight [ 0 ], orig_lowerRight [ 1 ] / 2 )) output . addPage ( left ) right . mediaBox . setUpperLeft (( orig_upperLeft [ 0 ], orig_upperLeft [ 1 ])) right . mediaBox . setUpperRight (( orig_upperRight [ 0 ], orig_upperRight [ 1 ])) right . mediaBox . setLowerLeft (( orig_lowerLeft [ 0 ], orig_upperLeft [ 1 ] / 2 )) right . mediaBox . setLowerRight (( orig_lowerRight [ 0 ], orig_upperRight [ 1 ] / 2 )) output . addPage ( right ) finally : # finally, write \"output\" to document-output.pdf output . write ( outputStream ) outputStream . close () print \"new pdf has %s pages.\" % output . getNumPages () 参考文档： PYPDF: http://pybrary.net/pyPdf/ The PDF file format: http://www.prepressure.com/pdf/basics/fileformat Why my code not correctly split every page in a scanned pdf? http://stackoverflow.com/questions/7047656/why-my-code-not-correctly-split-every-page-in-a-scanned-pdf","tags":"Misc","url":"2012/07/split-pdf-doc-with-pypdf-module/","loc":"2012/07/split-pdf-doc-with-pypdf-module/"},{"title":"三张流：雨后的帝都","text":"帝都经历了61年以来最大的暴雨之后，空气质量真是好到爆。难得见到帝都的蓝天白云啊，赶快出去拍几张照片。 先从窗口看看，久违的蓝天。 出门在路边： 傍晚的云：","tags":"Pictures","url":"2012/07/3-pics-beijng-after-storm/","loc":"2012/07/3-pics-beijng-after-storm/"},{"title":"折叠党之奥园笔记20120508","text":"奥园四圈， 第一圈单刷，速度跟之前比毫无变化。 第二圈跟骑四分之三圈，基本可以稳定在30，不过看起来仍然达不到水木自行车版众的水平，需要人家放慢速度等。 第三圈单刷，继续维持自己原有的速度，但是明显感觉到体力有点跟不上，踏频难以为继。 第四圈单刷四分之三，剩下的1km多逮到一个机会跟住了一个公路qs，跟车的感觉真好，速度可以上到36还没太大压力。 有一个靠谱的队伍确实很重要。 轨迹两条 （Endomondo这玩意越发的不靠谱了，海拔就从来没算明白过。。。） 第一圈： http://www.endomondo.com/workouts/53933330 第二-四圈： http://www.endomondo.com/workouts/53933459","tags":"Cyclone","url":"2012/05/riding-olympic-park-0508/","loc":"2012/05/riding-olympic-park-0508/"},{"title":"折叠酱油党之奥园笔记20120427","text":"大风，既爽又不爽，半圈不用蹬车就嗖嗖跑，半圈玩命蹬也跑不快。 人很少，除了几个公路党，还看到一个孤单的妹纸在刷圈。 没盔没灯没人陪，本来以为她是路过的，结果刷完在那歇着的时候她从后边上来了。啧啧。 贴轨迹， 第一圈单独计算时间，用时13'49‘' http://www.endomondo.com/workouts/51184247 剩下三圈用时41‘31'‘，平均每圈也是13'50‘' http://www.endomondo.com/workouts/51186794","tags":"Cyclone","url":"2012/04/riding-olympic-park-0427/","loc":"2012/04/riding-olympic-park-0427/"},{"title":"折叠酱油党之奥园笔记20120425","text":"今天吃饭晚了点，出门晚了点，又跑了一趟某风给师兄捎链条油。 所以到奥园已经8：50了。 到A点没看到twingle，倒是先看到了他的车，红色就是抢眼啊，哈哈。 时间晚了，迅速刷了一圈然后闪人。 没细看时间，大概13分左右。 回程的时候twingle戴的口罩（防毒面具？）很有爱，带着说话更有爱。 以上，没总结，没数据，不过有轨迹一条： http://www.endomondo.com/workouts/50761369 琢磨着是不是搞个蓝牙心率带神马的。。","tags":"Cyclone","url":"2012/04/riding-olympic-park-0425/","loc":"2012/04/riding-olympic-park-0425/"},{"title":"见坡死党作业之解字石-20120422","text":"简短结说，今天，4月22日是世界地球日嘛， 所以青蛙原本打算一大早就去爬解字石纪念一下。 结果早上木有听到闹钟，自然醒之后已经10点多啦， 在床上挣扎许久，最终还是决定出门爬山。 11点30左右从家出发，携带2升水袋一枚，馅饼两只，士力架若干。 走G7辅路奔向解字石。 出门之后发现顺风，很开心，不过也担心回程是不是会压力很大。 G7到北清路转向G6，路过昌平西关环岛，差一点又迷路了， 这破环岛修的，专门迷糊人玩的。。。 过了西关环岛之后拐上京银路再拐昌赤路，感觉爬了好久好久才到神路啊， 中间在路上还时时传来一股屎味，尼玛是哪家果树院子上的有机肥？！ 彻底崩溃。 看到神路，知道自己走对了，于是继续向前， 上坡萎靡，下坡撒欢，整个一个病态。 爬到长陵村路口休息了一下，看到早上爬解字石的童鞋们都已经放坡回来了。 稍事休息开始爬坡，开始的路段有上有下，还满惬意， 路两边有一片片紫色的小花，叫不上名字。 慢慢爬到泰陵村，在小超市买了瓶可乐，准备开始爬坡。 出了超市按下秒表，开始计时。 超市门口遇到一个公路加一个山地，刚出泰陵不久就追上青蛙， 之后爬到离解字石坡顶还有1km左右的时候看到这俩人放坡下来。 之后就是各种苦逼的挠坡，青蛙刚刚换的飞轮，跳好之后其他档位都很不错， 唯独四档跳齿，尼玛这是爬坡最重要的一档啊，再高一档有点重， 再低又太轻，结果丫的跳齿，太郁闷了！ 于是青蛙一路基本都是3档磨上去的，踏频虽然够，但是踩的实在不爽。 出门晚了的坏处就是要顶着巨大的太阳爬山，一路上汗如雨下， 没多久青蛙就热的受不了了，跳下车摘掉头巾，挽起裤腿， 似乎稍稍凉快了一些，不过汗依旧没停，就在眼眶附近打转啊， 经常被汗水迷到眼睛。 爬的过程中几次想打退堂鼓，想着干脆就掉头下去算了，但是又不甘心， 想着离坡顶也没多远了，然后就继续爬啊爬。 终于看到路上的1500m标记，想着总算快见顶了，然后瞅了下码表， 擦，不到10km/h的速度，1500米还得爬10多分钟！继续挠吧。。。 爬到还有1km左右的时候青蛙开始胸闷，迷糊，大概是中暑的前兆， 赶紧停下找个树荫歇了一会。 看到放坡下来的童鞋还要装作在看花花的样子，囧。 看到路面上100m的标记的时候，青蛙感觉像获得了新生一样， 啊，终于爬完了。 看秒表，用时1小时12分。 到顶之后稍微歇息，套衣服准备放坡。 本来每次爬解字石都会放坡到村里打水的， 这次青蛙估计放坡下去就真的要推上来了， 看看水袋里大概还有500ml水，还是放坡往回走吧。 放坡的过程总是很畅快的，可惜很快就到底了。 放坡的时候腿开始发麻，从大腿一直麻到脚趾，放坡下来蹬车无力，只能慢慢蹭。。。 靠着一路缓下往回走。 回程的时候算了一下到泰陵村的距离，大概是11.5km， 爬上去用时72分钟，真的屎了算了。 回程果然是顶风，而且青蛙手脚发麻，踩车无力，无比的痛苦。。。 为神马会这样。。在G6辅路上一路骑基本处于无意识踩车的状态， 拐上北清路更加颓废，20km/h的速度都保持不住，一路17左右蹭回家。 苦逼的解字石爬坡行动结束。 贴几张花的图儿吧，都是偷懒休息的时候拍的。 总结： 起晚了的恶果就是太阳超毒，虽然气温才24度多，但是。。 仍然有中暑的可能 4档跳齿，而且现在后拨变档反应迟钝，总要蹬着牙盘空转半圈后拨才能挂上档，这是肿末了，难道后拨要挂掉？ 前叉，唉，踩车的时候明显感觉到泄力，真想换硬叉了。 一路鼻涕不断，自从去年感冒之后就一直流鼻涕。青蛙邪恶的怀疑是帝都的空气造成的。 依旧见坡死，爬坡的时候稍一用力心脏就砰砰的像要跳出来，看来萎靡一冬天的恶果就是心肺功能严重减弱。 腰疼了一路，被汗湿的衣服一贴疼的更加严重。 回程的时候就在琢磨为什么一冬天退化这么多，会不会跟加班有关。考虑从下周起按时上下班。 每次骑车手都被车把硌的特别疼，今年新买的手套手掌部位的海绵垫又被磨平了，难道要换把套？ （目前骑车竟然到处都疼，老了一岁竟然虚弱了这么多。。。） 数据： TRIP Dist： 104.21 TRIP time： 4：55：25 AVG Speed： 21.16 Max Speed： 48.62 AVG Cad： 71 爬坡时间： 1：12：33 （从泰陵村开始记。从去分水岭村的路口开始计时的话减去20分钟。）","tags":"Cyclone","url":"2012/04/riding-xiezishi-0422/","loc":"2012/04/riding-xiezishi-0422/"},{"title":"禅房看花花 20120415","text":"昨天去潭柘寺看花没有看爽。晚上到家跟师兄聊天， 师兄说妙峰山和禅房的花开的相当不错。 所以今天跟师兄又爬了一次禅房看花。 约好9点钟在担礼隧道集合， 青蛙一想到要自己先挠将近40KM，还有两段爬坡路就很头疼。 于是出门来一直在慢慢地爬，从上地用了50分钟才爬过温泉村穿过六环。。。 拐上军温路，那截上次把青蛙拉P的换上路上，更加的颓废了，一路在17、18的挠。 穿过军庄拐上G109，似乎稍稍活动开了， 过军庄之后的那段换上爬的还不错，中间还超了一辆拉砖的货车（砖车）， 之后竟然一路领先这破车，直到妙峰山牌坊之前的下坡路上它才追上来，真搞笑。 8点55分到达担礼隧道，34km用了90分钟。。 9点钟等来师兄，爬到下苇店补水之后正式开爬。 爬进了山才知道今天这趟禅房真的来对了，山上的花真是太美了，满山遍野，都是花。 走在路上，路两边都是花，抬头看山，山坡上也是花海，往下看山沟，一样满眼也都是花。 一阵小风吹过，花瓣随风飘散，美的无法形容了，各种形容花的词放在今天的禅房都不为过。 虽然认不出来这些花都是啥种类（似乎杏花比较多，不知道有没有桃花。。）， 不过所有的花都一样美。 开始的时候青蛙遇到比较漂亮的树还会停下来拍照片， 后来拍也拍不完了，干脆不拍了，直接饱眼福。 看花的新鲜劲过了之后就是无比痛苦的爬坡，今年的见坡死状态依旧没改变。 爬坡的时候完全没法保证踏频，换小飞踩又没有力量，要不了多久腿就酸的不行， 只好借着看花的名义停下来休息一下，惭愧。 不过经常停下休息倒是发现了靠近禅房村里的树上还有很多花苞， 所以未来几天到禅房村附近还是有一波花可以看的。 11：30左右爬进了禅房村，在村口的台阶上坐了好半天，狂吃了一顿士力架+香蕉。 起来刚开始继续爬就萎靡了，出禅房那段有名的变态坡更是毫无廉耻的下车推过去。 推过了陡坡，继续骑车挠缓坡，马上感觉腿酸无力。 真心搞不清楚腿部肌肉到底是什么情况，稍稍使劲就酸，大概是歇了一冬天肌肉又退化了？ 之后的路基本无话，山路上风很大，放坡稍冷，还是需要件长袖衣服。 从妙峰山路上放坡下来放到手抽筋。 桥头的小饭店解决午饭，偶遇风云爬妙的大部队，浩浩荡荡，吃饭都摆了2桌。 回程探索了一下从陈家村方向拐上G109，这样可以躲开109上那段爬坡路。 即便是这样，军庄之前的缓上也足够把青蛙拉P了，不到20的速度一路蹭蹭， 还要路上再没遇到车友，要不然非被鄙视不可。 今天在禅房的路上几乎没遇到骑车的。 到上苇甸之前有两个骑公路的兄弟追上来，一辆BMC，一辆Cervelo。 后来放坡快放到妙峰山那边的路口的时候迎面看到一个车友，还好心得提醒我们小心路上的落石。 之后在禅房的路上就再没遇到其他车友路过，看来大家都更偏好妙峰山一些。 总结： 每年的花真的就那么几天，禅房山脚下的花已经开始落了。看花要抓紧时机 继续见坡死，看来是肌肉力量退化，这个怎么锻炼回来呢？ 经常刷奥园？ 放坡手掌压力极大，从妙放坡下来之后，手指没问题，但是手掌和手腕又麻又疼 骑稍微长一点距离之后腿就开始发麻，需要换骑行裤了？ 数据： Trip dist：117.96 Trip time： 6:30:04 Avg speed： 18:14 Max speed： 47.27 Avg cad： 69","tags":"Cyclone","url":"2012/04/riding-chanfang-0415/","loc":"2012/04/riding-chanfang-0415/"},{"title":"骑行潭柘寺 20120414","text":"本来想去潭柘寺看花，结果山里花都落了。 回来的路上在昆玉河边上倒是看到很多刚开的桃花。 车子码表距离突破4000KM，突破3000KM的时候还是去年夏天， 这1000KM中间拖的时间够久。争取今年能再骑出一个3000-4000KM。 总结： 长途依旧屁股很麻 9速指拨配8速飞轮完全就是坑爹，必须要破财换飞轮了。 爬坡的时候保持均匀的功率输出很重要，也就是踏频要稳定，一旦节奏打乱了，就很难恢复了。 今年骑车的妹纸真多，路上看到了好多个 潭柘寺的香火真旺，山门前汽车狂堵车。不过看过山门真身之后，是不想再去了，真没意思。 潭柘寺脚底下的饭店真心坑爹 数据： Trip dist：114.14 Trip time：6:00:23 Avg speed： 19.00 Max speed：45.18 avg cad： 58 （踏频好低……）","tags":"Cyclone","url":"2012/04/riding-tanzhe-temple-0414/","loc":"2012/04/riding-tanzhe-temple-0414/"},{"title":"十三陵水库绕圈 20120324","text":"（不想写流水帐式的日记了，简短结说算了。） 早上趴窗看天气似乎不错，于是收拾打扮出发去十三陵水库。 8点半清华西门接到众人，稍事休息，出发上路。 第一次带队，无比的累，需要看路看车小心逆行不要跑的太快， 这时候才体会到去年每次出去都有人领骑的日子是多么舒心。 去程一切状况良好，按步就班， 沙河大桥休息一次，昌平城里放水一次补水一次，没有吃饭就开始水库绕圈。 继续见坡死，不过在绕圈到水库西边的水坝上坐着休息了一会望风景， 蓝蓝的天蓝蓝的水，虽然没有绿草，但是遍地金黄色的草也还满耐看。 总之一个字： 舒心 。 坐着看够了，后边的人也追上来，爬起来继续爬水库北路， 似乎之前休息的那一会挺起作用的，这段路爬的很顺， 第一个坡挠上去之后，借助下坡的速度相当轻松的冲过了剩下的坡， 感觉水库北路的爬坡路比南路简单的多。。。 爬到坡顶等人，结果发现把Casper给丢了，后来才知道他绕了一个大圈， 还在其他人之前回到了水库大坝。 其实大家路都不熟，青蛙自己傻乎乎的一个人在前面狂爬太不应该了， 应该留下来给大家指路才对。 放坡下来回到水库大坝接到Casper，已经12点半了，大家都饿的不行， 于是赶紧杀奔昌平城里开饭，在政法大学边上的小路里找到家四川馆子， 7个人一桌子菜，吃的很爽。 Kaka给大家买了水果，Adam给大家买了湿巾，真是体贴啊。 吃饱喝足放水补水完毕，大家开拔回城，上了G6辅路之后众人都跟打了鸡血一样， 加上顺风，蹭蹭的往回飙。 青蛙怕有人掉队，于是停下来收尾捡人，慢慢走到沙河，看到了正在路边休息的各位鸡血男。 稍事休息，穿过沙河继续上路。moli依旧是无比禽兽，一马当先飞驰而去， 青蛙在后边一路狂追，这样一前一后跑到辛庄桥遇到堵车，青蛙跟moli下到路边的土路上跑了一段XC路。 结果刚回到大路上，远远的看见其余众人的头盔消失在视线里。 青蛙喊moli赶紧追，结果追了半天，影子也没看见， 又怕后边的同学们离的太远，只好慢慢磨蹭到西三旗桥。 青蛙在西三旗桥上打电话给各位鸡血男，才知道他们早已经跑到五环上清桥了， 原来看到消失的头盔真的是他们！！ 又给后边的Casper和Adam打电话，得到更雷人的消息， Adam竟然跑错路了，竟然上了北清路。。。 在西三旗桥等到Casper和Adam， 大家编队一路到上清桥跟已经在那等了好久的鸡血男们会合。 Kaka又给大家分香蕉吃，真是美好。 聊天完毕，众人各回各家，活动结束。 青蛙沿学院路跑到荷清路上刷了一圈，然后回家。 到荷清路上之后明显感觉到双腿无力，踏频保持不住， 看看码表，又是90KM左右，难道现在的体力仅仅够坚持90KM嘛。。。 总结： 活动组织工作很辛苦，去年光跟团走捡便宜了。今年要尝试多组织几次活动，学习组队经验。 春天真的来了，青蛙今天的一身冬季装备热的要命，下次再出门骑车已经可以直接穿骑行服了。 依旧见坡死，水库南路的坡爬的很辛苦。 后拨继续不给力，不过青蛙已经决定把这套指拨后拨飞轮拆下来装到折叠车上去了。再搞一套微转的后拨给山地车。 众位同事的体力很不错，看来以后可以组织稍稍长线的活动。 数据： Trip Dist: 96.35 Trip Time: 4:50:28 Avg Speed: 19.90 (在上清桥的时候看还是20+，到了荷清路上迅速被拉低) Max Speed: 42.48 Avg Cad: 67 （踏频比上周活动降了不少，感觉强度也不是一个等级上的，跟公路党爬坡太有压力了）","tags":"Cyclone","url":"2012/03/riding-shisanling-reservoir-0324/","loc":"2012/03/riding-shisanling-reservoir-0324/"},{"title":"东方红朝圣20120317","text":"（终于正爬完了一次东方红隧道，值得庆祝。） 原本预计今天去通州跟橘子陈面基，但是有按不住心中的躁动， 在昨晚最后的时刻决定继续跟随公路党活动，去爬东方红隧道。 8点半在百望山森林公园门口等到了今天的大队伍， 心里彻底凉了半截，又全是公路啊，有全是禽兽啊。 （登场人物介绍： 枪兵oddguy、新一代禽兽Dr. glideBy、 周博士RraptorR、熊mm RockPillars， 还有山地转战公路不久的begaleagle，外加一只弱青蛙me） 熊mm RockPillars竟然也是一辆Trek公路啊有没有！ 心想完蛋了，今天回程肯定又是吃灰的命儿了。没办法，既然出来了，那就玩命跟队吧。 去程开始阶段路上车比较多，所以大家速度也不快， 青蛙在后头跟着还满悠闲，还有时间瞅瞅码表，换下档调整踏频。 爬过温泉，到军温路的起伏路段，青蛙瞬间就不给力了，这就是传说中的见坡死嘛？ 之间公路党们嗖嗖的爬上去了，只剩青蛙一个人在后面慢慢蹭。 还好之前爬过几次禅房，认识这边的路线，既然追不上了，那就在后边按自己的频率倒腾好了。 倒腾了一会在一个正在修路的坡上远远的看到枪兵掉头回来寻觅我这个掉队的来了， 羞愧，枪兵过来提醒回程的时候路过这个坡的时候要小心， 因为半个路面都被占了，而且路上有沙子还有水。真是细心的领队啊。 转向G109不久大家就被一波结婚的堵在了路上，鞭炮竟然从村头放到了村尾， 在路上每隔5米横着摆了一挂鞭，真是无语了，有钱又无知的典范。 不过因为队伍被堵住了一小会儿，青蛙总算赶上了队伍， 于是跟begaleagle一同发车，不过爬过两个坡之后他也在前面没影了。。。。 青蛙只好继续一个人磨109上的坡， 去年这段爬坡路感觉很轻松啊，为什么今年像磨不过去一样，太难爬了。 好不容易熬过妙峰山牌坊，看到大家都在路边休息等我，拖累大家的速度了，真是抱歉。 转过担礼隧道，长廊那里停了好几十人的大队伍，好壮观， 外加零零散散的小队伍，帝都自行车运动的人真多啊。 众人继续向东方红前进。 老样子，青蛙5分钟之内就被甩的没了影子，继续一个人磨吧。 跑到下苇店禅房路口的时候又遇到了北大车协的大车队， 不光人多，衣服还是统一的，哇赛，壮观的不得了。 继续磨，慢慢的追上了似乎掉队的RockPillars，似乎也有点爬不动的样子， 跟车跟了一会，想想一个大老爷们被个妞领骑，也有点不厚道， 于是想慢慢超过去领骑的，结果RockPillars还不服输，竟然加速跑掉了， 好吧，青蛙专心做最后一人好了。 爬了不知道多久，到了小桥那里，看到大家都在桥边休息， 枪兵则是在路边等着我们这俩后来者，看到我们过来了，招呼我们先爬， 于是青蛙跟RockPillars也没休息，直接开爬。 开始阶段枪兵给我俩打气，说争取15分钟爬到隧道口。 青蛙心想似乎爬坡路是3.5km，15分钟爬上去还是有希望的呀， 于是一阵变档狂踩，超过RockPillars，试图跟住枪兵的节奏， 可是没跑10米就完蛋了，踏频嗖嗖的往下掉，呼吸也乱了， 结果就是眼看着枪兵跑出了视线外。 最后青蛙一路小盘+大飞，慢慢往上蹭，踏频倒是能保持在70-80的样子。 一路蹭下来发现小盘带大飞竟然刮前拨，不知道这一路链子被磨掉了多少，囧。 眼看着前边就要到隧道口了，青蛙还是被后出发的周博士RraptorR给追上了， 估计离隧道口只剩下100m左右的距离。 到达终点，青蛙用时22分钟，看来15分爬上来还是很有难度的，必须勤加练习才成。 枪兵早早就爬上来蹲在路边等着给大家拍照，赞一个。 在隧道口稍事休整，拍照留念，大家穿好衣服开始放坡。 爬上去的时候累的热汗淋漓，一放下来当即感觉手脚冰凉， 也难怪，空气湿度太大，而且又是阴天。 放到坡低的时候遇到了一队据说是地质考察的学生， 众公路禽兽从他们身边加速飞过的时候惊起了一片呼声， 不知道又有多少小mm又要仰慕死这几只公路禽兽啦，哈哈。 一路放坡到下苇店，大家在超市停下来放水补给， 枪兵给每个人发了香蕉，周博士给每个人发了湿巾，都是相当nice的gg啊。 青蛙自己找了一瓶维他命水喝（为神马说它，因为青蛙怀疑回程路上不停抽筋可能和这饮料有关）。 吃饱喝足大家上路回家，结果还没出下苇店村青蛙就被他们甩下了，好吧，继续自己磨。 磨过担礼隧道，青蛙接到一个骚扰电话，迅速挂掉之后上车立马感觉左大腿似乎不太对劲， 爬坡的时候一用力，好吧，原来是要抽筋，于是不敢太使力，慢慢蹭。 蹭过妙儿的牌坊，蹭过G109上的一段缓上，蹭过上午被结婚的队伍堵住的小村子， 拐上军温路，这个时候右小腿也开始抽抽，真是流年不利，去年骑车从来没抽筋过， 结果今天俩腿全抽抽了。。。 这个时候速度也降到了20左右，踏频神马的更别提了，只能找踩的动的档位踩了。 近乎绝望的时候看到枪兵再一次回来捡掉队的老弱病残（同一个人）， 于是鼓足勇气爬上一个坡，看大家都在坡顶等着我呢，看我到了飞身上车继续开拔， 然后，我又是一个人了... 那就继续蹭好啦。 蹭到温泉路的时候被一辆汽车拦住问6环怎么走， 囧，我骑自行车的怎么会知道6环入口在哪，那顶上是高速好伐，自行车不让上去的... 继续蹭，终于给我蹭到了温泉村，大队伍在这放水等我呢， 于是停下来稍稍休息了下，继续出发。 当然，青蛙还是一个人慢慢蹭了，两腿已经完全不敢发力了， 稍一发力就抽筋， 而且两腿的大腿关节开始疼，难道是因为天潮的关系？ 枪兵也让队伍先走，自己一个人陪我在后边蹭。 唉，真不好意思，让枪兵为了我一个老弱病残耽误行程。 好不容易蹭上了黑龙潭路，这条路窄，前面的队伍也跑不开， 青蛙慢慢追上了begaleagle同学，跟他编队蹭到了百望山森林公园门口， 青蛙在这里过桥向东，剩下的人直行回清华。 过桥之后青蛙已经彻底颓废了，看了下码表，几乎40km没下车，手脚都已经没有知觉了， 在马连洼北路上还被一个山寨折叠车给办了，当时码表时速18（恨）。 16-18的速度蹭到家里，发现浑身上下已经都湿透了，天气湿度太大。 总结： 再也不要跟公路党一起混了，如果说上次十三陵只是被震惊到，这次是彻底伤到了。 山马党跟公路党真的玩不到一块去的，路上至少三分之二的时间都是一个人在战斗，这种体验太痛苦了。 骑公路真的很拉风，上次十三陵有2个小mm回头注目两只公路禽兽良久， 这次遇到大批学生有惊起一片惊叫声。公路拉风，真是太拉风了。 青蛙有点喜欢上那种飞驰在风中的速度了（虽然只能放坡到底之后体验那么一小会）， 看来什么时间真的要换公路了，不过今年是没机会了，明年看情况吧。 继续体验那个败家后拨，青蛙甚至在怀疑是不是飞轮不是8速的了， 下次换个9速指拨看看手感？ 似乎开始乱投医了。囧 最近天气变化无常，所以千万要带足衣服。 看周博士 RraptorR 把护膝塞到衣服里保暖还被冻的直哆嗦，青蛙都替他担心。 数据： Trip dist： 90.59 Trip time： 4：13：12 Avg speed： 21.46 Max speed： 42.48 Avg cad： 72 （青蛙注意了一下踏频，换飞轮之后平均踏频确实有提升，但是可能也是因为一个冬天没有运动，力量减弱导致的。）","tags":"Cyclone","url":"2012/03/riding-dongfanghong-tunnel-0317/","loc":"2012/03/riding-dongfanghong-tunnel-0317/"},{"title":"2012新春第一骑：十三陵水库/长陵","text":"话说本来计划上周就出去骑一圈的， 但是看了下天气预报，4-5度的天气出去骑车压力仍然相当大。 所以改在今天出洞。 又本来打算今天一个人单飞十三陵水库绕圈的， 不过刚好水木自行车版枪兵oddguy把他组织十三陵的活动改到了今天， 于是青蛙正好跟团出行。 周五的时候在版面上询问得知今天的活动其实只有三个人， 俩公路（oddguy && glideBy）外加一个苦逼的山马党（这个自然就是青蛙我）。 虽然感觉压力山大，但是还是硬着头皮上了（剧透：最后毫无悬念的被虐）。 早上9点50在上地南口等到了两位公路QS，简单休息然后出发。 刚开始骑就已经隐隐约约的感觉到顶头风了，到了京包路上更加明显，北京的春天啊，真难熬。 oddguy和glideBy在前面交换领骑，我就在后边捡便宜躲风头。 因为顶风，大家走的都不是太快，25-30的样子刷到北清路。 在北清路向右拐上八高，glideBy新车的兴奋劲上来了，顶风在前面呼呼的狂飙。 路过六环的时候追上了一票骑友，呼呼拉拉好多人，队伍中间竟然很多mm（oddguy：下次出来要把手机号印到后背上）。 之后又陆陆续续的遇到了骑车的小队伍，看来真是到骑车季节了，大家都出洞了。 在昌平城外那个立交桥的坡上，青蛙明显感觉到自己今天要杯具，爬坡无力，还好坡不长，勉强跟上两QS进了昌平城。 从昌平城里穿城而过，赶奔十三陵水库。 中间oddguy接到电话，得知另一队爬解字石的QS在长陵村里， 所以我们改变绕水库然后回昌平吃饭的计划，沿水库南路奔向长陵。 在十三陵水库坝顶看到了好大一队骑友聚集在那里休息， 沿水库南路爬坡的时候也陆续遇到了或骑或推的骑友，又有很多mm（oddguy：喂，那个mm你头盔戴的太靠后了，往前戴）， 估计他们是一队人，据两位QS分析可能是某校车协之类的组织。 水库南路的爬坡路上青蛙继续颓废，被俩QS远远落下。 青蛙的骑车技术基本已经完全退化了，放坡拐弯的时候没掌握好，只顾着看码表，差点冲到路对面沟里，还好当时对面没车。。。 拐过水库南路，一路顶风爬坡，glideBy依旧领骑， 青蛙在后边玩命的跟，终于在爬长陵前边那个坡的时候把膝盖抻到了，疼。 于是在后面慢慢磨蹭，还好爬坡上来就是长陵，大家下车休息，等爬解字石的QS们放坡下来。 在解字石的路口又遇到很多骑友，基本都是奔向解字石方向，看来今天顶风爬坡的大有人在。 在路口等到某车店（唉，没记住）老板李伟，大家在路边晒太阳越晒越冷，于是决定去长陵村里找家饭店等其他人。 从搓板路放坡下来，在村头那家X随意饭店（李伟：枪兵你选哪家？ oddguy：随意。），四个人点菜开吃外加侃大山。 等其余五位爬解字石的QS过来之后，大家拼桌吃饭外加继续侃大山。 吃饱喝足放水完毕，大家装备利落，返程。 吃饭的时候李伟说这么大的风回程的时候匀速50不是梦啊。 结果一出来就真应验了，一路没怎么蹬车，40+的速度放到G6上，甚至中间遇到爬坡都是35+的速度通过的，这也太爽了吧。 当然青蛙没爽多久就杯具了，刚刚进6环就已经保持不住踏频， 眼瞅着公路QS们嗖嗖的飞走，没人领骑，踏频降的更厉害，于是接着被山地超（神哪，他骑齿胎竟然能跟上公路QS们）， 后来只剩青蛙跟另外一个骑光头山地的哥们，速度也降到28左右。 接着青蛙被一辆大货车堵住，又眼瞅着这光头山地哥们飞走... 好吧，那就慢慢蹭吧，25-26的样子小心谨慎的在路上爬。 爬过各种堵车的沙河，爬过路庄桥，心里想着总算离北清路的辛庄桥不远了，继续爬。 爬到辛庄桥，前面飞走的众QS果然在那里等着，看青蛙到了，大家问好各自的路线继续上路， 大队QS继续八高，青蛙跟glideBy右转上北清路转道京包路。 跟glideBy在北清路上慢慢往回爬，被glideBy各种忽悠上公路（纠结，其实我也很想公路啊。但是，还是攒钱搞四轮比较紧要）。 另外glideBy讲解了一下怎么选择车架尺寸和他买现在这辆公路的过程，啧啧，遇到一辆适合自己的公路不容易呀。 爬到上地南口，glideBy继续向南回清华，青蛙转头闪人回家，2012年第一骑结束。 总结： 蛰伏了一冬天，青蛙体能是彻底完蛋了，爬坡无力，于是现在很担心清明是不是能去威海了。 新换的公路飞轮相当舒适，体力足够的情况下能在高速的时候保证踏频。 之前青蛙用山地飞轮，在公路上骑车，踏频波动很厉害，要么70左右，踩起来很费劲，要么就100多，踩的累死。 换成公路飞之后在25-30左右的样子都能保证90-100的踏频。 后拨的问题依旧没解决，有些档位变不上去，只能一次变2档再退回来一档。 郁闷，难道为了这飞轮再换一次Shimano的后拨？ 路上的汽车实在太疯狂了，去的时候有几次差一点被突然从路口里冲出来的汽车撞到。 回来的时候青蛙在G6上差一点撞上了一辆突然停在路边的汽车，最气人的是车上的人还有说有笑不当回事，真无语啊。 G7上看到一辆货车突然一个急刹车，后胎都烧冒烟了，眼看着车都要翻倒的样子，很吓人。 回来之后嗓子疼的更加厉害了，看来明天要老实在家趴着养病了。","tags":"Cyclone","url":"2012/03/2012-first-riding-shisanling-reservoir-changling/","loc":"2012/03/2012-first-riding-shisanling-reservoir-changling/"},{"title":"菜鸟换飞轮记","text":"很早之前青蛙就在妄想着把俺的rr5.2上换个公路飞， 想了许久，那天在 水木自行车版 灌水，说起了飞轮的问题。 glideBy 老兄忽然说他那里有一个12-21T的HG50-8飞轮， 齿数排列12-13-14-15-16-17-19-21，售价50羊。 这么神奇的飞轮青蛙自然当场拿下。 青蛙兴冲冲的拿着飞轮回家， 准备把原来车上的SRAM山地飞轮卸下来，装到去年青蛙收的那套轮组上，然后换上新飞轮。 可是到楼下小修车铺一问，竟然没有卸卡飞的工具（当然可能不是真的没有，只是人家不想借青蛙用罢了）。 没办法，拿着轮子去车店又太远了，于是青蛙也没了出去骑车的兴致，宅在家里郁郁了2天。 自己taobao工具远水解不了近渴，工作日又没有时间带轮子去车店，青蛙只好再次求助水木自行车版。 在hai版上迅速借到了工具（多谢 COMMENCAL 顶着北风给我送工具。） 马上回家开拆。 这是原来的山地飞，第一个目标就是把它卸下来。 卸下来了，跟公路飞比比大小，lol 顺路把山地飞卸下来擦擦干净，各个齿片来排排座比大小 换上新飞轮： 之后就是装车，调刹车，调变速，青蛙没有拍照片。 因为调变速的时候遇到了大问题。 这个公路飞上对应山地飞的齿（就是公路飞和山地飞都有的）数，变速就很顺畅，遇到了只有公路飞上有的齿，变速的时候链条不会动。 比方说14-15-16， 14和16山地飞上有，所以没问题。 但是在15上的时候，不论是变向15->14还是15->16，链条都不会动，再按一次指拨，链条会一次跳两个飞，越过14/16，直接变到13/17去了。 不清楚是链条长了还是后拨没调整对。 青蛙报着有病乱投医想法，试着截短链条，结果问题依旧，链条还因为自己的土鳖行为，把销子完全打出来，装不回去了。 搞了半夜，也没弄明白，最后青蛙一狠心一跺脚，决定第二天去收一枚新链条。 这就是被青蛙搞杯具了的两截链条（不知道还有没有方法接上）： 去车店没有买到8速链条，只好买了一条HG53，80羊，真假未知，这是截短后剩下的两截： 新链条换上，问题依旧，于是麻烦车店的师傅帮忙细细调整， 据说问题处在后拨导轮和飞轮的间距上， 之前用山地飞间距比较大（换成公路飞之后要调整一下？不确定，但是这么调确实有效）， 目前后拨表现基本正常，只是有些档位稍有拖沓，不过总算可以用了。","tags":"Cyclone","url":"2012/03/diy-change-cassette/","loc":"2012/03/diy-change-cassette/"},{"title":"入手P18轮组","text":"在各大论坛上蹲坑很久，终于蹲到了一个不是那么贵的P18轮组， 花鼓超润， 但是轮圈看起来磨损比较严重。 前圈稍稍有那么一点隆，不过在可以忍受的范围内。 上图： 前轮花鼓： 前轮轮圈： 后轮花鼓： 后轮轮圈： 仔细看一眼轮圈，磨损还是挺严重的： 不过这套轮组拿回家之后青蛙发现了一个大杯具， 青蛙手上的这个HT060车架不是130开档，而是125-126左右的开档（没有靠谱的尺子，用卷尺量的，有误差）。 结果后轮组大了5mm，虽然用力掰着能塞进去，但是换轮胎的时候太麻烦了。 目前青蛙也没想好该怎么做。。。 研究了一下久裕花鼓的构造[1]，似乎也没法参照某些牛人的做法[2]种做什么手脚了。 下狠心把后轮开档掰开？ 需要掰大5mm，左右各2.5mm，似乎对于钢架来说掰这点尺寸不算太大[3]。 这两天还要再泡论坛学习一下。 Update: 果然大力出奇迹，最后掰开了后叉了事。 参考： [1] 久裕花鼓的静力顶入更换培林安装方法 http://www.chinabike.net/newbbs/dispbbs.asp?boardID=10&ID=25895 [2] 修改130开档的花鼓，变成127的了 http://www.77bike.com/bbs/read.php?tid=41762 [3] 改装HT060使用多长的花鼓？后开档的是123mm http://www.zdche.com/forum/viewthread.php?tid=25502","tags":"Cyclone","url":"2012/03/bought-p18-wheels/","loc":"2012/03/bought-p18-wheels/"},{"title":"刹车+变速线管更换完毕","text":"L3+特氟龙的效果果然不是盖的，换完线管之后刹车和变速果然轻巧利索了很多。 虽然升级刹车系统对骑行速度提升毫无影响，但是这个升级无疑是值得的， 毕竟刹车是关键时刻保命的东东，哈哈。 （红色线管的效果似乎没那么好，青蛙总感觉本来是闷骚型的车，怎么有点向第三种青年方向发展了呢。。）","tags":"Cyclone","url":"2012/03/my-rr52-after-updating-brake-suite/","loc":"2012/03/my-rr52-after-updating-brake-suite/"},{"title":"遇到了山寨959V刹车皮","text":"淘宝上的山寨货真是防不胜防，一个不小心，就遇到了山寨货。 真的Baradine网站是： http://www.baradine.com.tw/nproduct.php ， 山寨货打着Baradine下属品牌的旗号，结果完全货不对版。 现在青蛙也搞不清楚淘宝上那种959v刹车皮是真货。难道只能硬着头皮去收koolstop嘛。。。 山寨货的图片：","tags":"Cyclone","url":"2012/03/shanzhai-959v-brake-shoes/","loc":"2012/03/shanzhai-959v-brake-shoes/"},{"title":"崇文门地铁站里的传送带","text":"上次路过崇文门的时候人挤爆了，这次不在高峰期路过下，拍拍这个有趣的传送带。","tags":"Pictures","url":"2012/03/pics-conveyor-in-subway-chongwenmen-station/","loc":"2012/03/pics-conveyor-in-subway-chongwenmen-station/"},{"title":"订购的刹车套件到货了","text":"FR5+SD7+Jagwire，另外还有一套变速线管。终于可以把现在车子上那套破刹车换掉了。 放图放真相。 Jagwire： FR5+SD7：","tags":"Cyclone","url":"2012/02/brake-suite-received/","loc":"2012/02/brake-suite-received/"},{"title":"自行车升级计划","text":"前两天青蛙的HT060折叠车后轮辐条竟然莫名奇妙断了一根，让青蛙不得不把升级自行车的计划重新捡起来。 虽然折叠的后轮可以换菜辐条然后平平圈凑合用，但是青蛙已经对HT060的滚珠花鼓加上6速旋飞不爽很久了，正好借此机会整体换掉。 但是如果升级后轮，飞轮一定要换成卡飞了。 这样的话，飞轮、后拨、链条、指拨全部都要换，还真是牵一发而动全身。 青蛙琢磨了几天，想出了2个升级方案，现在二选一的困扰中： 首先想到的就是给HT060全部换新装备，8/9速飞轮，x5/x7后拨和指拨。 这样造价不菲，性能提升应该是最多的，不过就违背了HT060当作通勤/代步车的初衷。 可不是嘛，青蛙的山地车还使着X4套件，8速飞轮呢。 既然山地车上有一套X4套件，那就可以把它拆下来放到HT060上，然后山地车升级9/10速系统。 问题呢，就是这辆RR5.2是不是值得升级9速，甚至10速系统。 好处，就是俩车都升级了；坏处呢，谁知道升级了性能会不会有提高。 目前青蛙比较倾向于方案2，反正都要买一套新变速套件，那就买一套不错的放山地车上，毕竟山地车才是锻炼用车。 代步车嘛，只要用起来比较顺滑就成了，性能要求倒不高。 对于方案2，初步的计划型号是： PG950 + X7后拨 + X7指拨，链条还在选型中。。 本来是一个换轮组的问题，结果还扯出来了变速套件的选择，真是很麻烦呀。","tags":"Cyclone","url":"2012/01/plan-for-upgrade-bicycle/","loc":"2012/01/plan-for-upgrade-bicycle/"},{"title":"Happy new year","text":"Happy new year and best wishes for everyone","tags":"Misc","url":"2012/01/happy-new-year/","loc":"2012/01/happy-new-year/"},{"title":"2011年终总结及展望","text":"又到了年终岁末的总结时间了，青蛙已经发表过一篇关于今年骑行生活的总结，所以其他方面的总结就很简单了， 几句话就可以说完。 写完才发现又唠叨了一大堆。 首先，婚礼办完了，五月某日。唯一的印象就是折腾，青蛙对中国式婚礼这种不折腾死人不算完的事情表示很无奈。 其次，工作上似乎有条例了一些，但是自己仍然处于迷失状态。 自己到底做点什么，以后怎么发展，仍然迷茫。 虽然这是一件很不应该的事情，工作四年，仍然不知道自己的方向在哪里，真是loser。 以至于年终曾经转去做kernel方向，但是担心自己的能力，又不了了之。 不过在现在的职位上已经有一些心得了，对于python，对于虚拟化，已经不像去年像一个文盲的状态了。 如果再在这个方向上做下去，也是有许多有趣的事情可以做。 不过一年中学到的技术知识似乎不多？现在想想，似乎编程技能并没有太多的提高，这是一个急需提升的地方。 十月份青蛙收了一部kindle4，之后的三个月里阅读量比之前的九个月加起来都多。 kindle真的是值得拥有的好东西，赞美亚马逊。 另外青蛙自己写了一个小工具抓取小说并推送到kindle（好吧，kindle上看的小说也不少）， 写这个小东东的过程中会思考一下如何构建一个方便扩展又方便编码的结构， 不过写完之后却发现跟工作上使用的 kvm-autotest 结构真的很像。 由此，青蛙决定多读读其他的代码，目前正在抽时间读读vdsm，恩，争取2012第一季度可以读完。 哦，最后，青蛙赶在年底公司培训经费作废之前报了一个CCIE培训班，争取明年上半年可以把CCIE认证考下来。 （为什么又回去学网络了，青蛙也不知道，姑且算作上一段工作经历的一个总结性考试吧，毕竟做了三年网络，再系统的学习一遍当做知识储备。） 2012展望 恩，前面说了两个了： 读完vdsm代码 通过 CCIE认证 剩下的还有（就不考虑SMART原则了，哈）： 增加跟autotest upstream的联系，多多在upstream冒泡 经常回顾python的基本知识，python核心编程之类，多读几遍 读一本关于linux内核的书，可以找尽量短点的，先学个皮毛 完成那个给python推文章的小工具 做/改一个irc bot，给内部irc，也可以自己在freenode上跑一个，方便自己。 采购计划： 一个更加给力的读书工具，kindle dx？ kindle fire？ ipad？ 一部胶片口袋机， 奥记u2？ 给媳妇买台ps3/ps4？ 再加一台电视？","tags":"Misc","url":"2011/12/2011-summary-and-2012-outlook/","loc":"2011/12/2011-summary-and-2012-outlook/"},{"title":"吐槽：关于用户口令","text":"CSDN的密码泄漏事件被爆出之后，在Twitter和Weibo上引起了广泛的反响，很多人质疑国内网站的安全管理工作，竟然敢直接用明文保存密码。有一点常识的Web应用开发人员都应该知道直接在数据库里明文形式的密码是相当不安全的。但是为什么还有那么多人仍然这样做呢？他们出于什么目的呢？引人深思呀。 一个网站到底应该怎么保存用户的密码才安全呢？又怎么应该设计登录流程呢？ 酷壳上有两篇文章介绍的不错： 你会做Web上的用户登录功能吗？ 和 Web开发中需要了解的东西 。 青蛙除了大学的时候搞的那个神马选课系统，基本就没有做过Web应用，就从一个Web用户的角度唠叨几句算了。 首先，是我们到底需要多少个密码？ 只有一个显然不行，如果使用这个密码的网站有一个不靠谱，把用户密码给泄漏了（被黑了也好，被无良网站卖了也好，当然在天朝还有另外一种可能：被政府收缴），所有的网站都必须重设密码。那每个网站都设置一个密码呢，现在是个网站都要登录，谁能记得住那么多密码呀。 为了防止密码忘掉，大体上有两种思路： 密码管理器 这种方法比较简单，实际就是保存一个密码。本因为浏览器就内置了记住密码的功能，把用户从繁重的记忆密码的任务中解脱出来。但是浏览器的密码记忆方式功能单一，而且跟浏览器绑定，换一个浏览器就完蛋了。还有系统自带的密码管理工具，例如KDE的KWallet之类的都会有这种问题，跟某个环境绑定，移动性不高。青蛙目前也没有好的实践经验，可以想到的方法就是加密KWallet之后放在Dropbox上，这样多台电脑之间的密码同步可以解决，但是仍然没有解决跨平台的问题。可能这个问题需要借助移动设备来完成，例如Android上的密码管理应用。 基础密码+网站特征的组合规则 密码管理器的实际上是有安全隐患的，因为密码都保存在电脑上，攻击者可以获取这些密码文件然后尝试暴力破解（密码管理器仍然需要主密码的）。 所以另外一种被广泛推崇的方法就是一个基础密码加上针对特定网站的特征字串组合。这样可以方便大脑直接记忆。 酷壳也有一篇文章介绍这种方法： 如何管理并设计你的口令 ，但是青蛙有一些其他的想法。 这篇文章里提供的针对每个网站做变化的方法看似简单实用，实际上有大问题： 很容易被人看出基础密码和变化规则，因为攻击者拿到密码的时候一般都会知道这是个什么网站，网址是神马，然后跟密码一对照， 原来只是加上了前后缀，照此规则，其他网站的密码就完全可以推测出来了。 所以这个变化规则应该有三个要求：容易计算（考虑下人类大脑的计算速度）、不太明显（不容易被看穿把戏）、但是还要足够复杂（增加被猜出来的难度）。 有了这三项要求，寻找一个规则就不太简单了。青蛙在这举个例子： 首先根据顶级域名分类，获得数字A，例如com是1，net是2，cn是3，其他的就是4，分类随你 数出站点字母个数，获得数字B，例如gfrog.net，域名主题有5个字母 取站点的首位字母，获得第三位、第四位密码，例如gfrog.net，首尾字母是g和g 这步可选，为了不让获得密码明文的攻击者一眼看出破绽，把第三步取到的字母做个变换，这个变换可以固定的，例如直接前移后移几个字母，或者直接转换成ASCII码， 然后把上一步取到的两位密码插入到基础密码里的第A个位置和第B个位置上，获得的密码就是这个网站的密码了。 这个方法只是青蛙随便想到的一个例子，不要拿去直接用哦，这种依赖算法的加密规则说出算法就不好玩了。找一种容易使用，算出结果又不太明显的算法来组合你的密码吧。 另外在酷壳的 如何管理并设计你的口令 这篇文章里也提到了密码分级的问题，看来大家都意识到一套基础密码仍旧不安全，XD 密码分级，青蛙觉得至少要分成5套，重要性依次递减： * 与钱有关：涉及真金白银啊，一定要强密码 * 重要个人信息网站：gmail、SNS网站，MSN等等，这些网站往往都保存着重要的个人信息资料，所以保障帐号安全很重要。 * 国产邮件服务提供商、SNS等等，虽然个人信息同样重要，但是国内网站往往都会屈服于某种无形的压力，你懂得，所以单独列出。当然，在国内网站上提供个人信息同样要注意，完全没有安全性可言。 * 一般网站，一个普通密码足矣 * 怀疑没有完善密码保存流程的网站，对于这种网站最好的处理方法就是不用丫的，如果没法避免，最低安全级的密码处理就好，因为密码难免会暴露在别人眼前。 哦，说了半天基础密码，生成基础密码的方式也有很多的，青蛙推荐一下apg这个包，各大发行版都提供，它可以生成指定长度的一组密码，例如： > $ apg Please enter some random data ( only first 8 are significant ) ( eg. your old password ) :> IflicCydrum3 ( I-flic-Cy-drum-THREE ) ChagNeg4 ( Chag-Neg-FOUR ) geHebreil2 ( ge-Hebr-eil-TWO ) luj2TanRysp ( luj-TWO-Tan-Rysp ) Ash3Twoij ( Ash-THREE-Twoij ) JaHyxlyetag4 ( Ja-Hyx-lyet-ag-FOUR ) 最后，如果你下载了csdn那一大坨密码文件，这个脚本可以帮你分析各种弱密码的使用频率，结果很欢乐的哦。 （此脚本引用自 waterye@Twitter ）： $ awk -F# '{a[$2]++}END{for(i in a){print a[i] \":\" i }}' www.csdn.net.sql | sort -rn > a.log 好了，吐槽完成，青蛙也该去整理下密码去了。","tags":"Misc","url":"2011/12/some-idea-about-user-password/","loc":"2011/12/some-idea-about-user-password/"},{"title":"2011骑行总结","text":"这个总结分三部分， 上半年 下半年 明年上半年展望 上半年： 搬家到了上地，坐公交/地铁去公司都非常不方便，于是一狠心一跺脚，去DKN 699收了一辆RR5.0回来通勤。 这算是青蛙到正式开始骑车之旅了。 住的地方离公司有8公里左右的距离，骑车其实刚好不太远，开始的阶段一直需要40分钟左右。 除了每天骑车，回家之后还要把车子扛上楼，是个额外的锻炼，XD 正式开始骑车是跟Center叔一起爬十三陵水库，具体的体会已经不记得了， 记得的只剩下在十三陵水库边上望着蓝蓝的水蓝蓝的天感觉一路踩车骑过来还是很值得的， 另外还有回来的时候的龟速（我俩已经累到不行，15-16一路爬回城里）。 这次之后青蛙就彻底爱上了骑车，几乎周周出去，经历过戒台寺的挑战失败 （爬到离戒台寺还有1km的时候爆胎，泪目） 之后，转向线联系平地路线，跟团爬过怀柔水库、腐败游温榆河、二游、三游十三陵水库、黄花城等等。 当然装备也慢慢收着，头盔、手套、头巾、水壶架、副把，当然还有那只蝴蝶把。 换过蝴蝶把之后青蛙跟团疯狂过一次白河峡谷，那时刚好S2线开放， 大家赶新鲜S2出台到延庆然后爬白河峡谷到汤河口，放坡放的好爽， 在白河峡谷里看山水看的很爽，这条路线真的值得多走几次的，风景真的太爽了。 这次本来计划1天的行程因为大家贪玩改成了2天，晚上大家在汤河口找地方住宿， 然后第二天沿G111骑到怀柔北站出台火车回城。 最后这辆RR5.0杯具的被人偷走了，青蛙一直认为是那个蝴蝶把招了贼， 因为一个50块的车把，把700块的车丢了，唉，亏惨了。 然后进入下半年， 没车的日子很痛苦，挤地铁挤公交，青蛙成功的被13号线的空调吹出了重感冒，养了大半个月才好。 于是青蛙再一次忍不住诱惑，在一个桑拿天去DKN（为神马又是DKN，便宜呀。） 收了一辆RR5.2，继续开始骑车。 本来收到车的当天青蛙就计划去一次十三陵水库，结果被桑拿天彻底打败， 走半小时就要往身上浇水降温的天气里骑车很可怕。 虽然有了RR5.2，但是青蛙不敢再骑大车通勤了，于是又收了一辆大行ht060， 专门用作通勤和城里闲逛，这辆小折让青蛙对折叠车的看法彻底改观了， 小巧轻便、速度不差，虽然稳定性不好，但是在公路上足够了。 病愈收车复出之后第二次出行（第一次，收车当天去十三陵，失败。）， 是跟师兄挑战解字石、大科庄、永宁、四海、黄花城绕圈的两日行程因为青蛙的体力不支彻底失败， 两日行程压缩到了一日，青蛙推了解字石、推了大科庄，挨到延庆，S2出台回家。 回来之后对体力深表不满的青蛙开始在水木车版灌水，找队伍刷奥园。 夏天的晚上刷奥园真的是种享受，凉凉的风夹着一股草香，每次去刷都很舒坦。 外加认识了一批喜欢骑车的少年们，在奥园骑车聊天吹水，好不惬意。 然后青蛙继续挑战帝都附近的线路，驼岭隧道绕圈、二爬解字石（这次成功的爬上去了，lol）、 黑山寨吃驴肉、禅房、这段时间是青蛙骑车骑的最开心的一段时间，因为上山可以摘到枣子吃，哈哈。 接着青蛙计划在天气转冷之前跑完几条经典路线，例如没爬上去的戒台寺、潭柘寺、潭王路、东大高、妙峰山。 妙峰山的计划一直被打断，有2次水木党爬妙青蛙也没有赶上，给今年的骑行留下深深的遗憾哪。 戒台寺、潭柘寺、潭王路一条线在叶子落的差不多的时候挑战完毕， 在这条路上围观到了结满柿子的柿子树，很奇怪为啥没人去收，都留在树上。 这趟线加爬了一次东方红，虽然体力压力不大，但是已经明显感觉到骑车久了开始发冷，放坡不敢放的太快。 冬天要来了。 接着青蛙跟师兄一起跑了一次S2-八达岭-火烧营-横岭城-镇边城-高-大-雁翅-门头沟， 这条路线青蛙第一次突破的单日170km，结果就是骑在四环上已经开始打瞌睡了。 不过这次完成高大之后，青蛙的年度高大东计划算是完成了（算上之前的东），XD 之后的骑行路线彻底被缩短了，因为冬天的大风和体力迅速消耗。 夏天的时候骑车几小时没事，天冷了2小时就被饿惨了。 青蛙又爬了一次大觉寺防火道-凤凰岭，外加一次十三陵水库。 2012展望 明年天气转暖之后计划 再把帝都周围的路线重新遍历一次 争取一次完成三字 争取爬一次长途，海南环岛？ 上海？杭州？山东半岛+辽东半岛？ 嗯，在策划中。 以上，流水一般，大概还会附加一个菜鸟装备总结？ 有时间整理吧。","tags":"Cyclone","url":"2011/12/2011-riding-summary-route/","loc":"2011/12/2011-riding-summary-route/"},{"title":"在Twip中转换t.co链接","text":"自从Twitter强制把所有链接都转换为t.co之后，在手机上访问这些地址就成了大问题，开VPN慢，绕了一圈发现是国内地址，不开干脆访问不能。于是青蛙一直酝酿在Twip那里把短链接扩展。 今天有时间，研究了一下，本来打算自己写的，但是本着不重复造轮子的态度，写之前google了一下，这不，这位同学已经写好了： http://hjin.me/code/727/ , 全部修改的代码贴到了这里： http://pastebin.com/f4Gw0DND 青蛙拿过来直接扔进twip，问题解决。 青蛙在这放出一个基于twip r204版本的patch吧，另外还有一个小修改的补丁，修复一些情况下的警告信息。 0001-twip-enable-expand-tco-link.patch 0002-twip-fix-some-warning-msg-in-expand-tco-link-patch.patch 这个修改只能解决t.co的问题，没办法解决其他被关照到的短网址服务， 所以青蛙仍然酝酿着什么时候搞一个把所有短网址都展开的补丁。 不过青蛙看php代码实在是头疼，只好下次有时间再硬着头皮读代码改吧。","tags":"Programming","url":"2011/12/expand-tco-link-in-twip/","loc":"2011/12/expand-tco-link-in-twip/"},{"title":"procmail + kdialog 构建邮件提醒脚本","text":"Mutt真的是神器，越用越觉得爽。 可惜命令行模式的工具都有个弊端：跟X交互能力比较弱， 例如Mutt就木有邮件提醒功能。 之前在Gnome2的年代里还有 mail-notification 可以对付用（这玩意占用系统资源狂多，似乎是通过监视文件更改来提醒的）， 在Gnome3之后这个工具就完全不工作了，而且又没有后续版本。 青蛙抛弃Gnome，换成KDE之后，也没有找到KDE下的邮件提醒工具，于是一直酝酿着自己写一个。 实现邮件提醒功能，无非就是监控邮箱变更，可以在几个点检查： 直接使用POP/IMAP协议检查服务器端 监视MTA动作 监视MDA动作 监视MUA动作 监视邮箱文件/目录更改 直接访问服务器是最直接的办法，但是既然MTA都把邮件收下来了， 再去监视服务器就有点绕腾了，这种方法监视gmail/hotmail之类的邮箱还是很不错的。 监视MUA的动作， adam8157 同学 就是这么做的 ， 监视Mutt startusbar的特殊字符串，通过Mutt的filter发送notify消息。 监视邮箱文件/目录变化就是 mail-notification 的做法了，但是如果不想轮询的话，大概需要内核开启inotify支持。 监视MTA动作，青蛙没有仔细研究，似乎还是需要MDA的某些行为处理， 所以青蛙直接用了在MDA里加入提醒脚本的方法。 监视MDA动作，就是青蛙的做法，利用procmail的nested block， 把邮件pipe到一个脚本中处理，提取邮件发送者、标题和内容，然后发notify。 消息提醒的脚本已经有人做好了： http://blargasm.com/post/7980037487/evolution-new-mail-notifier 青蛙拿过来修改了一下，去掉pynotify，直接调用kdialog命令发送消息。 修改后的脚本在这里： http://code.google.com/p/gfrog/source/browse/mail/mail-notifier.py 脚本有了，然后修改~/.procmailrc，在需要监视的过滤规则里面加入 > : 0 # Some filter rule { : 0 c | ~/ . mail - notifier . py : 0 # Here is your inbox Inbox } 这样就可以监视指定邮箱的新邮件啦： Update: 2012-06-11 由于这个提醒脚本最终是通过cron运行的，并且经过几次fork之后， 它没法找到当前的dbus session了， 于是导致kdialog 使用旧式的KPassivePopup现实消息， 但是这玩意是hardcode了消息显示在屏幕中心，相当不爽。 青蛙google了很久，终于还是捏着鼻子看了下kdialog的代码才发现问题。 更新： https://code.google.com/p/gfrog/source/detail?r=fe8e9b57574529453fdb8655e0392260d39dcbfb Update: 2012-06-11 原始的mail notify脚本对于一些中文邮件subject和mail body的处理有问题， 导致无法提醒中文邮件。 目前青蛙的做法是把mail body当作utf-8字符串处理。 当然这不能从根本上解决问题，只算是个workaround吧，还好青蛙的中文邮件不多。 如果哪位读者遇到中文邮件还有问题，欢迎反馈bug。 同样，更新的代码在google code上： https://code.google.com/p/gfrog/source/detail?r=3de26a63648944313893d74b94f54f28770bed30 Update: 2011-10-14 青蛙今天忽然发现这个脚本处理某些邮件的时候发件人那部分是空的， 调查一下发现时因为\"email.Utils.parseaddr()\"实际上是把发件人处理成名称和邮箱名的一个list， 如果发件人没有名字，只有一个邮箱名的话， 最后显示的发件人部分就是空白了。 青蛙修改了一下脚本，仍然放在了google code上： https://code.google.com/p/gfrog/source/detail?r=0c64c067cf047ad4390bc2e57875cacf328999f1","tags":"Linux","url":"2011/10/procmail-kdialog-mail-notifyer/","loc":"2011/10/procmail-kdialog-mail-notifyer/"},{"title":"十三陵水库笔记20110903","text":"首先鼓掌庆祝青蛙同学完成3.5小时十三陵水库行程，这条路青蛙纠结了很久，终于在今天完成了，看来可以作为每周常规锻炼路线跑一下。出发之前预计的是6点钟出发，12点之前回来，实际测试效果看来每周可以保证7点出发，12点回来，4小时之内来回就可以。 恩，其实早上起床的时候还在纠结到底要不要去，结果一纠结就起晚了，出门的时候已经快七点半了，小区门口补水，买了4张饼，吃掉两张，装包里两张，预防没有实现目标，只好在路上解决午饭的最坏结果。然后又在小区门口那家修车店用气泵给车打饱气，气泵就是给力，刷的一下就打满了，换打气筒要吭哧吭哧打半天。其实打气的时候青蛙还在纠结要不要掉头向西去大觉寺算了，后来狠狠心，还是十三陵。 7点30多分青蛙正式出发，木有直接杀上八达岭高速，而是从上地东路向北，跟着感觉走，结果越走越没信心，担心这一头扎下去是个死胡同咋办。后来在某根立交桥的地方发现了北清路右转的路牌，这下总算放心了，至少在北清路上可以转到八高。上地东路向北会走上正在修的京包高速辅路，大概是因为这条路还没修好，很少有大车经过，都是一些小车和公交。但是因为路窄，骑起来也挺惊险的，而且路上的灰尘更大，有些地方干脆满地是土、坑坑洼洼，走起来远没有八高舒服。不过这条路最大的好处就是不堵车啦，可以避开万年堵车的回龙观段，这是最大的优势。 在近乎破土路的路上跑了半小时，终于走上了北清路，路宽了，但是并不好走，坑坑洼洼继续。这时候青蛙的腰又有些疼，感觉大概是因为护臂的原因导致的？ 停车摘掉护臂，腰部一上午确实再没疼过（这问题很怪，大概青蛙需要去医院检查下了。。）。 北清路向东不远就是辛庄桥，青蛙看到辛庄桥的时候终于松了口气，跟着感觉走还是走对了，哈哈。 辛庄桥左转，上八高辅路，看到路口有两个骑友貌似在等人，一早骑八高的人还挺多的，木有停留继续向北，八高路好了很多，挂2-7档开刷，路上需要注意靠站/离站的公交车，用不了多久就到沙河了（北清路里沙河本来就没多远了），减速过镇子当作休息，发现路边似乎多了家麦当当，新开的还是之前木有发现过？ 出沙河之后继续2-7开刷，速度在28左右，但是踏频已经过100了，纠结了下这踏频是不是有点高，突然想到了青蛙的车是有3档牙盘的（囧，骑折叠骑惯了），于是换上3-7开刷，速度轻松保持在35左右，踏频80左右，刚过沙河大桥就追上一队车友，公路山地有男有女，不知道是去哪里的，lol。没有打招呼，慢慢超过后继续开奔。刷到6环的时候3-7的档位就维持不住了，速度迅速下降，只好换成2-7继续刷。 到水屯桥之后右转进白浮泉路，进入昌平城，青蛙立刻感觉到自己走错了路，这条路的自行车道上每隔一段就有一条沟，根本没法快速通过，只能慢慢蹭过去，不过正好，减速喝水当作休息，慢悠悠的在城里七拐八拐拐上水库路，看路口已经有回程的骑友了，来的真早啊。继续2-7档刷到十三陵水库坡下，2-4/5档爬坡。这段几十米的小坡爬上去，青蛙立刻感觉到浑身无力，勉强蹭到大坝上，扔车，喝水，喘气。没等喘匀气赶快看了下表，8：55分。 刚喘匀气，就看一队公路嗖嗖的从身边飞过，惊起一片路人的惊呼声。青蛙心里赞叹，脚下发软，继续喘气。不到2分钟，又一队公路飘过，但是这队的速度明显要比刚才那队慢得多，青蛙立刻起身上车，决定跟大队人马一起环湖，看了下码表，9点整。结果追起来就杯具了，人家在山地上一样嗖嗖的飞，青蛙只好不停的换档上坡，换档加速下坡，结果反倒越追落的越远。一直追到水库西边下坡，青蛙借着下坡狂蹬一阵，终于追上了这队QS。 跟骑了几百米，在骑上水库西边那条路上被QS队伍发现了，似乎不太喜欢我跟的太近，那好，俺保持安全距离，离着10米距离跟随。转上水库北路，开始爬坡路段，青蛙菜鸟本色显现，只能换大飞爬坡，看QS们直接摇车两下就冲上小坡了，这里开始被QS们越落越远，只能远远的看到前边队伍的影子。在水库北路的平路路段，青蛙又2-7冲刺了一次，勉强追住QS们，但是明显浑身无力，控车能力下降。 转向下坡路段，这时从后边插上来两辆汽车，被QS队伍堵住，结果形成了\"QS-汽车-青蛙-汽车\"这种杯具型的队形，青蛙完全不敢放坡，生怕撞上前面的骑车，不过QS队伍速度也很慢，没有拉开太多距离。放到坡底，这队QS似乎没有走水库北路，而是转向右堤路-朝凤北路，然后走水库路爬十三陵水库，爬水库大坝的坡青蛙继续杯具，好不容易蹭上去，但是再也跟不上QS队伍了，扔车，喘气，喝水，看表，9：30。半小时刷完水库，估计青蛙自己走的话用时可能要翻倍。 休息几分钟之后青蛙开始撤退，沿水库路回昌平，路遇一逆行的老外，刚想骂之，看老外身后还有一逆行的中国人，心想算了，国人都不给老外做好榜样。。。 回昌平之后再一次选错了路，沿府学路一直向西，一路堵车、红灯，马上到达八高的时候又鬼使神差的转上了西环路，继续红灯。在城里磨蹭了半小时之后，总算回到八高辅路，开始回程。看表，10：02 回程的时候完全没了来时候的体力，3-7保持不住，而且右腿膝盖开始有反应，换到2-7开始慢慢蹬，一路保持在26-28左右晃荡，减速喝水的次数明显变多。跑到沙河的时候开始频繁的脚麻，只能减速活动腿，然后强烈期盼着赶快跑完八高段。在回龙观桥右转进西二旗北路，速度完全维持不住了，只能20多点点的速度往回慢慢蹭。这时看表，还有不到20分钟11点整，青蛙给自己定下目标，一定要在11点之间到家，于是又拼命踩车，终于在11点的时候到家门口。 到家之后又累又饿，青蛙掏出早上的饼吃掉，发现早上带的4瓶水，共计2.2升，回到家之后只剩一口。看来预算的还满准，XD 秀数据： trip dist: 78 trip time: 3：08：42 Avg speed： 24.80 Max speed：51.05 Avg cad： 73","tags":"Cyclone","url":"2011/09/riding-ming-tomb-reservior-0903/","loc":"2011/09/riding-ming-tomb-reservior-0903/"},{"title":"折叠酱油党之奥园笔记20110831","text":"青蛙既然决定了每周一三五刷奥园，那就一定要坚持！即使今天天气预报有雨，青蛙仍然带齐了装备，准备晚上奥园。 白天的时候在水木自行车版问了一下，似乎没有人一起（eyefashion大叔本来要来，但是因为其他事情耽误了），看来大家对下雨的预期都很高。 依旧是下班之后迅速吃饭闪人，有了上次五道口堵车的教训，今天青蛙老老实实的走四环，结果依旧杯具，平时基本畅通的四环辅路今天堵成了一锅粥。在学院桥之前的一段路上几辆公交车霸占了自行车道，咱老实下车推人行道吧，看你丫能爬上马路牙子来占道不！？ 过学院桥向北，一直到清华东路上车竟然都不多，为神马周一的时候堵成屎样，就是堵给我看得嘛？！ 7点20多到达奥园，A点竟然没人，青蛙坐在路边休息的时候过来一个骑公路的大叔，第一次来奥园，问青蛙奥园的路线，于是青蛙话痨发作，一顿指点，似乎给大叔讲的很不耐烦，说了句\"我先刷一圈看看\"，转身就跑。青蛙想有个公路领骑拉拉速度肯定很爽啊，于是赶紧跳上车开追。到五环上桥之前追上大叔，然后保持30左右的速度一路跟住大叔，但是到了奥体东路爬过小坡之后，青蛙瞬间感觉蹬车无力，摇车无力，瞬间就没力气了，这种感觉真不好，又像是上周爬解字石的状态。公路大叔也跟不上了，眼看他慢慢飘走。骑了一会感觉体力又恢复了一些，可以保持住28+的速度，看大叔在前面的红绿灯那里减速等过路口（大叔一定是经常开车的，骑车跟开车一样稳当），慢慢加速追上，之后大叔在每个红绿灯都要减速等灯，真是好习惯，这样俺也能稳稳的跟住了，哈哈。转过奥体西路的路口，大叔开始加速摇车，结果刚蹬一下就出事情了，大叔的耳机线缠到了刹车和后轮上，后轮直接抱死，大叔没有及时解锁，0速摔车。青蛙赶快下车查看了一下，车没事情，但是大叔的左腿蹭破了，唉，上锁有危险哪。当然，最主要的原因还是骑车的时候不应该带耳机听歌，这个习惯非常不好，除了听不见车声，耳机线还容易夹到轮子里。。。 大叔休息了一下，慢慢骑回A点，这时候已经聚集了几个单刷的同学，几个人天南海北的唠了几句，互相参观了一下车子，公路大叔起身告辞，剩下的3个出发刷圈。一个骑平把公路的哥们，一启动就迅速飞走了，青蛙只能自己慢慢刷，单发果然要费力的多，一路上只能保持在25左右的速度。这一圈刷完闹得汗流夹背，连鞋里都感觉湿漉漉的。回到A点问了下平把公路同学，成绩大概是11分左右！真是强悍，难怪追不上。 又休息一会，平把公路同学起身告辞，过来两个770D同学（额，这怎么区分呢，A和B好啦）继续唠嗑，这时过来一对菜车夫妇，询问刷奥园的路线，看到青蛙的小折来了一句：\"这车一定慢吧\"，青蛙回答：\"不比山地慢\"（话真的不能乱说，青蛙马上就被山地车虐了）。然后青蛙和两位770D同学发车绕圈，青蛙跟在A同学身后刷到五环上桥，似乎A同学是想通过上坡甩开青蛙，但是没有成功，下坡之后青蛙继续尾随，依旧是过奥体东路的小缓坡之后青蛙就颓废了，有点跟不住A同学，但是似乎A同学体能也有下降（或者是没人追没压力了？哈哈），速度也降下来了。这时B同学追上，开始领骑，A同学尾随，青蛙最后。一直保持到科荟南路，这俩770D一路30+的速度飞奔，青蛙只感觉腿软脚软，慢慢被落下，考虑奥体西路那里还要有冲刺，也不敢提前发力开追，这种状态保持到奥体西路上，青蛙拼命加速追了一下，终于超过A同学并且在过A点路口之前追上了已经减速的B同学。唉，被山地齿胎拉成这样，真是丢人。 这时A点又有一位迪卡侬平把公路同学和一位P8大叔在休息，大家接着继续神侃，试车。 B同学竟然拿出了带来的西瓜给大家分享，真是太感谢了！ 虽然不知道怎么联系怎么称呼，下次碰到了一定请他喝可乐。西瓜吃完，神侃完毕，P8大叔说要继续刷圈，于是大家纷纷发车，青蛙带头巾带头盔晚了一步，发车的时候只能远远的看着他们的尾灯，尝试追上未遂，只能慢慢的25的速度刷了。走到奥体东路路口的时候速度已经降到了20左右，果断左转过五环回家，一路上也只能保持20左右的速度。真是颓废的结尾。 本日共刷圈3.5圈，大约22公里左右，连聊天共耗时1.5小时。 真是酱油党本色。","tags":"Cyclone","url":"2011/08/riding-olympic-park-20110831/","loc":"2011/08/riding-olympic-park-20110831/"},{"title":"折叠酱油党之奥园笔记20110829","text":"自从上周六爬解字石彻底颓废之后， 俺就酝酿每周加大奥园刷圈的力度，争取迅速恢复体力。 正巧今天小猴子（id=vc12345679）同学在版上呼唤晚上奥园，于是俺果断报名。 虽然没带头盔和手套，但是俺今天还是要做酱油党。 因为要7点到清华东门附近的路口集合，俺6点下班匆忙出去吃了口饭， 回来收拾了一下，18：42分出公司，18：50分骑车出发（折叠展开时间真慢啊！急的我手都抖了。。）， 一路想着第一次参加活动就迟到，这太不好了，于是发力狂蹬。 到了五道口路口以后彻底杯具，路上堵的水泻不通，果断下车推上人行道，推了几步以后就遇到公交车站， 又得跳下来继续堵着，蹭了一段又跳上人行道，如此反复，终于俺崩溃了，找了个机会， 不顾行人的鄙视，冲上了对面的自行车道逆行。 还别说，逆行的速度果然快多了。19：10分不到的时候跑到了双清路和荷清路路口 （天神哪，世界上竟然会有这么堵的路口！！），心里忐忑，俺连小猴的电话都没有， 这要是他们先走了我去哪找他们去啊。。。 不过谢天谢地，等了几分钟，看着一队亮着车灯的自行车队飞过来了，正是小猴他们。 俺心里这块石头可算落了地（石头落地，杯具发生）。 由于俺在双清路的逆行方向，只有推过路口之后才能和他们会合， 结果在双清路和清华东路的路口上由于过度兴奋，跑错路了， 俺一边追一边纳闷，就过了一个红灯的时间，怎么会追不上呢。。。 于是拼命狂蹬，蹬到下一个红绿灯，终于发现是自己杯具的跑错路了。 只能绕回来找清华东路路口，路上逆行的时候还差点被一骑摩托车的大叔刮到 （又是逆行，俺要有驾照今天能扣满12分！！） 从双清路跑回来之后悲催的发现自己过的那个三岔路口就是清华东路的路口，黑天果然俺就是路痴了。 拐上清华东路在机动车道上一阵猛骑，梦想着可以追上大部队）没头盔没手套，不按道行驶，再扣2分）， 杯具的事情继续发生，有个神马深圳的猎头给俺打电话，擦，态度还挺强横，爷最不怕这样的猎头， 丫上门找我还这个狗屎态度，再说现在是俺下班时间，恕不接待，果断挂电话。 电话打完，追上大部队的可能性几乎为0了，但是俺还是继续在机动车到上晃荡（头顶上-2、-2不断飘过）， 跟出租抢道，尾随公交车，抢公交车道。。。。 平时不敢干的事今天都干了，深度鄙视自己！ 最终还是没有追上大部队，估计他们速度一定不慢。 在奥体西路上遇到benying和kollee同学，打过招呼之后赶快到清华党那里报到，深刻检讨自己的路痴行为。 随后glideBy同学到达，竟然就是俺跟了一路试图尾随的黑衣男， 他路感比俺好多了，俺还在跟汽车较劲的时候他已经飘出去好远了。 然后发现begaleagle同学的码表竟然是歪的，太赞叹begaleagle同学了，这不得歪脖儿看啊。 摸摸下边的底座，有螺丝可以换方向，begaleagle记得把它转过来哦，XD 休息、扯皮之后开始刷圈，因为俺木有带头盔， 所以决定20左右的速度慢慢蹭算了， 但是没跑多远就被benying带着kollee以25的速度超越， 俺也不能拖后腿是不，加速跟上，自己多小心一些吧。 俺一路酱油，蹭benying领骑，有人领骑就是好啊， 俺自己速度控制不住，前半段玩命骑，后半段就没体力了只能慢慢爬， 跟队伍骑可以控制着自己的速度，最后还有点体力冲刺。 到达终点的时候，MurMur同学已经到了，据说路上摔了一下， 把车把摔歪了，各位帅哥迅速拿出工具，搞定车把。（ 后来据说把横摔歪了，所以咋调都歪。。。 想想美利达的把横不至于这么不给力吧。。。） 随后的2圈是跟同样折叠的begaleagle同学刷， 仍然是他领骑，我跟随， 每次begaleagle同学在科荟南路拐弯到奥体西路之前冲刺我就崩溃了， 完全追不上，码表显示踩到34-35，依然眼看着begaleagle同学迅速飞走。。。 （而且本来打算酱油的，结果每次冲刺都能跑过30，俺自己定的规则可是不带头盔严禁过30的，今天破戒了无数次，罪过罪过！） 3圈刷完，继续回来聊天扯淡，twingle又拿出几个风火轮赠送， 赞叹啊，是不是以后水木党会人手一对风火轮呢？ 哈哈。大家互相换车试骑，最受瞩目的依然是benying同学的FCR， 据说很轻很好骑，深得大家喜爱，不知道有没有人回来会冲动入一个公路，lol 21：40多的时候大家开始撤退，俺跟随清华党一路向西， 在G6辅路上拐向北，没走多远，twingle追上来，一问才知道他住回龙观， 正好顺路啊，于是俺又被领骑，一路很爽的飘回上地。 感谢twingle的手电，看来我也必须收手电了。 另外，刷奥园和在公路上骑车一定要有头盔， 俺今天在科荟南路向北拐弯的时候差点侧滑摔倒， 虽然控制住了，但是还是很惊险，不带头盔就是玩命啊。 另另外，俺发现俺跟骑不太老实，总爱往队伍外边骑， 跟前边的车并排，这个习惯也非常不好，容易出事，下次必须彻底改掉！","tags":"Cyclone","url":"2011/08/riding-olympic-park-0829/","loc":"2011/08/riding-olympic-park-0829/"},{"title":"折叠酱油党奥园笔记","text":"从头开始说，今天俺去北航收脚踏，所以顺路奥园酱油了一次。 到达奥园时间是7点40分，看到大批大批的公路车已经开始集合了。 扫了一圈，木有发现疑似水木党的踪迹，所以自己先酱油一圈。 7点40出发，跑到奥体东路上的时候感觉喉咙又开始疼了， 不敢大口喘气，不敢发力，彻底酱油，跑到科荟南路那里犹豫了下， 结果跑错了路口，又绕回来上科荟南路，最后一圈下来15分钟，压力山大。 刚刷完一圈到达集合A点，回头看到一美女骑5.2，一帅哥骑牛角把公路车， 猜测是奥园党，果断上去打招呼（这次打招呼给我后面的杯具埋下了伏笔）， 果然是美女栗子(id=kollee)携帅哥笨鹰（id=benying）和大猫（id=boycat）三位。 找到组织的感觉真好！ 于是开始聊天扯皮拍照片，俺继续当酱油党，拍照时掩面而过， 蹲在地上仔细围观各路大神的自行车。 大猫同学十分好奇俺的小折叠，特别还是红色的折叠。 嘿嘿，俺是卖骚党嘛，lol。 期间还有一位rr5.3的同学抵达（ 原谅我木有记住你的id吧！ id=twingle）， 十分慷慨的分发风火轮，俺呢。。 继续蹲地上围观车子。。。 然后的时间，俺四个聊天。。。扯皮。。。拍照片，直到7点半， 那位rr5.3的同学 twingle说看到默默同学在后边，一个人， 于是benying和栗子赶快过去寻找，这时不知谁又说了句care他们来了（好吧，我快杯具了）， 于是我也向后面移动，看见benying和栗子围着一位美女（杯具开始）， 然后我直接问：这是care同学？！说完俺就意识到俺问错了。 因为看到了车子，维多利亚啊，这分明是默默同学，接着俺就看到了众人鄙视的眼神。 羞愧，没脸摘面罩了！俺赶快转移话题，\"默默同学不要刷圈嘛？\" 然后迎来的继续是鄙视，原来默默同学已经自己刷了3圈了。我继续羞愧。。。 这时候清华的大部队也到了，人好多，大家互问ID， 俺一眼就瞅见了小猴子(id=vc12345679)，看了他胳膊上的伤，确实摔的很严重啊， 一定注意休息啊，猴子同学。 大家寒暄结束，开始刷圈，benying同学领骑，一骑绝尘，迅速消失在夜色中， 俺拼命跟着那位没有码表的童鞋（ 原谅我又没记住ID id=begaleagle）。 爬上五环的坡之后就再也跟不住了，破折叠已经换到最小飞了，仍然追不上。 无奈放弃。 （不过，在坡顶俺看了下码表， 40+ (这个速度非常不靠谱，码表调的不准， 大概需要-5的样子)，那位童鞋，你的速度比这还快） 五环下坡之后俺就重回酱油本色，慢慢磨蹭，准备在奥体东路转弯回家， 快到转弯的时候，大猫同学追上来，热情的say goodbye，瞬间感到温暖。 然后俺在奥体东路左转，过五环向西，一路爬回家。 路上发现变速线又松了，唉，饿得没力气了，也木有仔细调，拣不松的档踩回家。","tags":"Cyclone","url":"2011/08/riding-aoyuan-0823/","loc":"2011/08/riding-aoyuan-0823/"},{"title":"今天石景山的腐败游","text":"首先交数据： Distance：56.9 MAX：43.9 AVG：21.9 话说俺昨天收了一部小折，HT060。 昨天晚上换上大车的副把和码表，今天就迫不及待 出去卖骚了（留大车在家哭吧，laf）。 刚好公司组织在石景山活动，俺一激动，干脆不跟公司的大巴去了，俺骑车过去。 从上地出门，小折竟然轻松就飙上了25+，我一度认为我的表没调好， 后来跑到中关村四环桥上看了下表，距离倒是对的，于是惊讶于小折的速度，这也太好骑了。 在中关村四环桥上目击微型车祸一场。 一辆拉货的电动车撞到一辆闯红灯的自行车， 好在没人出事，在心里默骂闯红灯的100遍以后转向向西。 过海淀桥、万泉河桥、六郎庄桥， 毫无意外的在火器营桥迷路，完全找不到转向蓝靛厂北路的地方， 在绕桥参观一圈之后 终于从迷宫中走出来。 上蓝靛厂路一路向南，车少，几乎无灯，很适合骑车。 一路骑到复兴路右转，话说复兴路 其实满适合骑车，树荫很给力， 可惜骑车占用自行车道情况严重，早上在这还差点撞到逆行的行人， 走在自行车道上突然转向，这样的人实在伤不起啊。。。 跑到公司活动的地点，擦，无聊透顶，竟然就是个澡堂子， 顿时失去兴趣，进去冲澡一圈， 使劲吃了一顿自助餐，然后偷偷开溜。 出来之后杀奔鸟哥的车店，给俺可怜的大车再配一个副把和码表。 在店里遇到车友一枚 明天出发去爬川藏线。 羡慕妒忌恨，为啥我就没有这么多假期！ 在店里聊天扯皮几小时，比 泡澡堂子有意思多了。 晚上6点从车店出门，一问才知道，这个车友竟然是住六郎庄桥， 顺路，还是早上的路线，复兴路到万寿路左转进蓝靛厂南路， 有人一起骑车就是舒服，俩人唠着嗑，完全感觉不到累， 保持25-30的速度杀到六郎庄桥。 剩下的路俺自己走，刚觉得无聊，突然从后边冲上来电动车大叔一枚， 俺发力，追之，哈哈 追上了总能挡点风吧， 于是四环辅路上出现了一个骑小折叠的傻子狂追一辆电动车的情景。 最高速度大概就是那时候跑出来的。 一直追到中关村桥，大叔遇红灯减速，我在车流中穿出 向北杀奔上地。 今天对小折的印象完全改观，好轻好快啊，偶喜欢！","tags":"Cyclone","url":"2011/08/riding-shijingshan-0819/","loc":"2011/08/riding-shijingshan-0819/"},{"title":"今年wed的徽章","text":"每年的6月5是世界环境日（world environment day）。 今年的主题是\"森林：大自然为您效劳\"。 准备好为森林做点什么了嘛？","tags":"Pictures","url":"2011/06/wed-badge-of-2011/","loc":"2011/06/wed-badge-of-2011/"},{"title":"盆栽草莓","text":"很久很久没有见过活草莓啦，今天在超市发见到这个真的让我眼前一亮。 不禁想起小时候在自家后院摘草莓的日子。 似乎当年的那片草莓早就不见了，只剩怀念。","tags":"Pictures","url":"2011/03/potted-strawberry/","loc":"2011/03/potted-strawberry/"},{"title":"雷人的座位号","text":"我已经吐槽无力了。","tags":"Pictures","url":"2011/01/shocked-seat-number/","loc":"2011/01/shocked-seat-number/"},{"title":"傲娇的ATM","text":"ATM你肿么了。。","tags":"Pictures","url":"2011/01/buggy-atm-machine/","loc":"2011/01/buggy-atm-machine/"},{"title":"修复twitter digest插件的无法正确显示in-reply-to-id的bug","text":"青蛙一直在用twitter digest插件来把tweets同步到wordpress上。 今天检查同步过来的tweets的时候，青蛙发现所有回复其他人的推中， in reply to的链接都失效了，tweet id变成了科学计数法的形式。 这个问题是由于twitter digest没有正确处理这么大的tweet id造成的， 青蛙在网上搜了一下处理php大整数的方法[1]，发现只需要把这个整数sprintf成一个string就好了。 具体的修改方法： --- twitter-digest-old.php 2011-01-07 17:35:01.000000000 +0000 +++ twitter-digest.php 2011-01-07 17:16:34.000000000 +0000 @@ -281,7 +281,7 @@ $output .= ws_make_clickable(wp_specialchars($tweet->text)); if (!empty($tweet->in_reply_to_screen_name) && (!empty($tweet->in_reply_to_status_id))) { - $output .= ' <a href=\"'.ws_status_url($tweet->in_reply_to_screen_name, $tweet->in_reply_to_status_id).'\">'.sprintf(__('in reply to %s', 'twitter-digest'), $tweet->in_reply_to_screen_name).'</a>'; + $output .= ' <a href=\"'.ws_status_url($tweet->in_reply_to_screen_name, sprintf('%1.0f', $tweet->in_reply_to_status_id)).'\">'.sprintf(__('in reply to %s', 'twitter-digest'), $tweet->in_reply_to_screen_name).'</a>'; } // Show the date/time if the options are selected 参考资料： [1] PHP 大数自动转换为科学计数法的无耻问题 http://mifunny.info/big-number-convert-to-scientific-notation-of-php-341.html","tags":"Site","url":"2011/01/in-reply-to-id-bug-of-twitter-digest-plugin/","loc":"2011/01/in-reply-to-id-bug-of-twitter-digest-plugin/"},{"title":"青蛙的Dreamhost账户正式关闭","text":"青蛙本来想让DH欠费自动停止服务的， 但是想了一下，还是自己清理一下痕迹然后手动关闭比较好。 手工删掉了所有的域名和数据库 （这步操作十分蛋疼，后来发现关闭账户的时候会自动删除），然后取消账户。 转眼之间，青蛙的网站在DH上也开了3年了，但是仍旧是没人看的状态， 不过也无所谓，其实就是想有一块可以自由支配的地方。 3年中给很多朋友们提供了免费的空间服务，青蛙觉得很开心， 流量闲着也是闲着，拿来给朋友们练手也是很好的。 在此感谢朋友们对青蛙的支持，谢谢大家。 今年年中青蛙的DH帐号终于切换成无限流量和空间的了， 于是青蛙启动了一个免费空间共享计划，但是申请者寥寥，难道是青蛙的要求太严格？ 青蛙在linode上的新服务器已经基本稳定了，虽然还有些细小的问题。 先使用一个月看一下资源的耗费情况，如果有可能，青蛙还是想尽量给大家多提供一些免费资源来用。","tags":"Site","url":"2010/12/shutdown-account-on-dreamhost/","loc":"2010/12/shutdown-account-on-dreamhost/"},{"title":"竹子","text":"写字楼里的竹子，这是青蛙第一次见到的活竹子，真高大。","tags":"Pictures","url":"2010/12/bamboo-in-office-building/","loc":"2010/12/bamboo-in-office-building/"},{"title":"圣诞快乐","text":"as $subject. XD","tags":"Misc","url":"2010/12/merry-christmas/","loc":"2010/12/merry-christmas/"},{"title":"推荐插件： wp-super-cache","text":"在wowubuntu！[1]上看到的wp-super-cache这个插件，青蛙立即拿来试验了一下，功效很显著。 没有优化前，青蛙用pingdom[2]测试主页面载入速度，需要将近4秒的时间。 优化过后是这样： 接下来需要考虑的就是怎样减小那几个js文件的载入时间了，还没找到头绪，希望能得到大牛的指点 ：） 另外需要注意一下的是，如果是nginx环境安装wp-super-cache插件， 需要的rewrite规则在[1]中有提供，但是那个版本是有问题的，这里[3]的版本才是正确的。 参考资料： [1] 小内存 VPS 优化建议 (LNMP+WordPress 环境) http://wowubuntu.com/vps-optimize.html [2] Pingdom tools http://tools.pingdom.com [3] Code Exchange: nginx rewrite rules for Wordpress + WP Super Cache http://forum.slicehost.com/comments.php?DiscussionID=2087","tags":"Site","url":"2010/12/recommend-plugin-wp-super-cache/","loc":"2010/12/recommend-plugin-wp-super-cache/"},{"title":"花瓶里的小花","text":"不知道叫什么花，很喜欢这种花瓣，让青蛙想起了小时候在野地里摘野花的情景，lol","tags":"Pictures","url":"2010/12/flowers-in-vas/","loc":"2010/12/flowers-in-vas/"},{"title":"配置wordpress的邮件发送功能","text":"青蛙继续倒腾vps，今天的主题是调教wordpress发送邮件。 之前在Dreamhost上面，邮件系统已经配置好了，wordpress不需要任何设置就可以直接发送邮件。 到了vps上之后，青蛙为了节省资源，没有安装邮件服务器，所以想要发送邮件，还需要自己折腾。 青蛙首先是想到了配置一个轻量级的MTA，例如msmtp之类的， 然后修改php.ini的sendmail_path参数，使它指向msmtp。 这样php程序就具有邮件发送能力了，但是这样产生的问题就是邮件的发送服务器是固定的， 而且需要配置一个帐号来做登录服务器，如果某个用户希望使用自己的服务器发送某些邮件， 这样配置就无法实现了。 为了实现完美的解决方案，青蛙又搜了一圈，发现了wordpress已经集成了一个PHPMailer[1]类， 并且提供了一个wp_mail函数[2]来发送邮件， 有很多设置SMTP的插件[3]方便我们配置SMTP服务器和外发邮件帐号信息。 青蛙选择了WP Mail SMTP插件，非常简单，把所有参数填好，wordpress就可以发送邮件了。 参考资料： [1] PHPMailer http://phpmailer.worxware.com/ [2] Function Reference/wp_mail http://codex.wordpress.org/Function_Reference/wp_mail [3] 让 WordPress 通过 SMTP 发送邮件 http://goto8848.net/2008/04/wordpress-mail-via-smtp/","tags":"Site","url":"2010/12/enable-smtp-send-mail-in-wordpress/","loc":"2010/12/enable-smtp-send-mail-in-wordpress/"},{"title":"Install Xmind in Fedora with deb package","text":"原始文件地址： http://www.xmind.net/share/gfrog1/install-xmind-in-fedora-with-deb-package/","tags":"Linux","url":"2010/12/install-xmind-in-fedora-with-deb-package/","loc":"2010/12/install-xmind-in-fedora-with-deb-package/"},{"title":"为https服务申请SSL证书","text":"书接上文，上回书说到青蛙成功给nginx配置上了https服务， 但是当时青蛙使用的是自签名证书，没有验证网站身份的功能； 而且有些工具会对证书的有效性进行校验，对于这种工具，自签名证书就毫无用处了。 这个时候，就需要申请一个经过CA认证的有效证书。 据青蛙所知，目前提供免费SSL证书的只有StartSSL[1]一家， 青蛙按照这两个网站的介绍[2][3]，成功申请了SSL证书。 依照青蛙的经验，要成功申请证书，最好是有一个以要申请域名结尾的邮箱， 这样可以很容易的确认域名所有权。至于邮箱服务，可以申请google app，方便，免费。 有了邮箱系统之后，可以设置一个webmaster或者hostmaster账户，以便注册过程中验证域名地址。 在StartSSL申请证书的时候有几点需要注意： 首先，建议使用firefox申请证书，青蛙用Chromium试了一下， 点击进入Sign-up界面的时候会出现一个错误提示，明确说明Chrome类浏览器无法申请。 有网友说IE也没法成功申请[1]。 其次，申请的时候尽量填写靠谱的个人信息， 如果信息看起来不靠谱，很容易被拒掉。 个人信息填写完之后会向你填写的邮箱里发送一封认证邮件，邮件中包含继续注册所需的验证码。 输入验证码之后提示等待人工审核，青蛙遇到的审核过程很快，大概几分钟就有结果了。 接下来还有一封邮件，里面有一个链接和一个认证码，访问那个连接，填上认证码， 如果一切正确StartSSL会自动在Firefox里面添加一个个人证书，这个证书就是用来登录StartSSL的控制台的。 青蛙建议最好把它导出，找个安全的地方保存 （毕竟StartSSL的免费证书1年就过期了，明年还得做一遍同样的流程再申请）。 以上是StartSSL的注册过程，下面是验证域名的过程。 进入StartSSL的控制台之后点击Validations Wizard，选择Domain Name Validation， 然后填入要验证的域名，接下来需要选择一个邮箱， 可以是postmaster/hostmaster/webmaster三个中的一个，或者是域名whois信息中的邮箱。 选择一个，StartSSL会向这个邮箱发送一封确认邮件，填上邮件里的验证码，验证完成。 注意这个验证有30天有效期，超过期限就需要重新认证域名。 接下来才是最重要的部分，点击Certificates Wizard开始申请证书。 这里有几钟证书可以选择：S/MIME、Web Server SSL/TLS、XMPP（jabber） SSL/TLS等，对于网站就是Web Server SSL/TLS证书了。 下一步是生成私钥的过程，青蛙没有网站提供的功能，而是选择了在本地生成私钥和证书请求文件csr的方式，所以这步选择跳过，然后在本地执行： # 生成私钥： $ openssl genrsa - aes256 - out private . key 2048 # 这里需要输入一个密码，制作 SSL证书密钥的时候会用到 。 # 生成证书请求文件： $ openssl req - new - key private . key - out cert . csr # 这里会询问一大堆信息，基本是证书的基本信息，例如域名、网站名称、所有者、地址等等。 然后打开cert.csr文件，复制所有内容贴到文本框中； 点击下一步继续，如果一切正常会提示证书请求已经正确提交了； 继续点击下一步，选择要为哪个域名申请证书； 再下一步，需要给这个证书添加一个子域名，青蛙选择了www，因为还要在www上提供https服务； 再继续，会有一个汇总，报告下要为哪些域名制作证书； 再点击继续开始正式制作证书。 等待证书制作完成，点击Tool Box，选择Retrieve Certficate，这里就是我们想要的网站证书啦； 把它复制到一个文件里，放在服务器上就可以用了。 然后是密钥，选择Decrypt Private Key，把之前生成的private.key文件打开，复制所有内容到文本框里， 填入密码，点击Decrypt，接下来显示的文本框的内容就是网站证书的key啦，也复制出来保存到一个文件里，传到服务器上。 证书申请大功告成，接下来改一下nginx的配置。 加入新申请的证书路径，用浏览器访问https站点试试，正确的话应该没有那个讨厌的https证书无效提示了。 Update: 2012-01-12: StartSSL的登录证书的有效期竟然也是1年，所以如果需要更新SSL证书，还要重新Sign-up一次。 参考文档： [1] www.startssl.com http://www.startssl.com/ [2] Nginx + https + 免费SSL证书配置指南 http://www.21andy.com/blog/20100224/1714.html [3] 免费SSL证书 STARTSSL 介绍与申请攻略 http://dev.meettea.com/show-52-1.html","tags":"Misc","url":"2010/12/setup-ssl-certificate-for-https/","loc":"2010/12/setup-ssl-certificate-for-https/"},{"title":"在NGINX上开启https","text":"青蛙的新VPS是基于nginx的，仅仅是因为传言nginx在小内存，大压力的时候表现好一些。 当然，为了获得这点好处，还是要付出一些代价的。 例如nginx没有apache的htaccess，对每个目录的控制都需要写到nginx的配置文件中， 这样对普通用户来说十分的不方便。 哦，有点跑题，继续说https的问题，其实给nginx配置https也不复杂， 按照网上现成的模板，改一下自己的域名和目录位置就好了。 下面是一个完整的示例[1][2]：（来自 这里 ） upstream test . com { server 192 . 168 . 1 . 2 : 80 ; } server { server_name test . com ; include port . conf ; ssl on ; ssl_certificate server . crt ; # ${nginx_install_dir}/conf/server.crt ssl_certificate_key server . key ; # ${nginx_install_dir}/conf/server.key error_page 497 \" https://$host$uri?$args \" ; location / { proxy_pass http : // test . com ; include proxy . conf ;# auth_basic \" status \" ; auth_basic_user_file trac . passwd ; } } PS . 按照 delphij大神的说法 [3]，nginx可以在一个IP上对使用不同证书的站点提供https支持。 ubuntu上的nginx正好打开了这个支持。 PS2 . 有了https支持，青蛙就可以使用https方式打开wordpress后台了， 也很简单，在wp-config.php里面加一句[4]： define('FORCE_SSL_ADMIN', true); 参考资料： [1] nginx ssl加密代理配置指南 [2] Nginx 配置 SSL 证书 + HTTPS 站点小记 [3] nginx中的TLS/SSL配置 [4] How to: Force using SSL on wp-admin directory","tags":"Linux","url":"2010/12/setup-https-in-nginx/","loc":"2010/12/setup-https-in-nginx/"},{"title":"摄影三俗","text":"自己拍照的时候，一定要记得避开这些俗物，XD。 本来青蛙计划去扫一下后海和老北京的胡同的，看来要pass掉重新选题了。 帝都冬天还有什么值得拍的呢？哪里有庙会？哈 中国摄影有三俗 人像三俗：芦苇，后海，798 夜景三俗：浦东，建外，太平山 建筑三俗：鸟巢，巨蛋，明珠塔 纪实三俗：老太，胡同，石库门 旅行三俗：马代，瑞士，梅里山 静物三俗：酒杯，水果，紫砂壶 小品三俗：荷花，水珠，自行车 自然风光三俗：坝上，亚丁，喀纳斯 人文风光三俗：丽江，水乡，和土楼 名胜古迹三俗：长城，外滩，嘉峪关 民俗风情三俗：苗疆，西藏，泸沽湖 摄影三俗：德味！大湿！毒毒毒！","tags":"Misc","url":"2010/12/photography-sansu-in-china/","loc":"2010/12/photography-sansu-in-china/"},{"title":"无处安放的图片","text":"青蛙的blog经过无数次迁移，图片已经挂的挂，丢的丢，能保存到今天的所剩无几。 为blog选择图床是一个让人头大的问题。 现在有几个选择，青蛙还没有最终确定，如果您有什么好的方法，记得告诉青蛙。 跟blog放在一起。这个方法最简单，折腾最少，wordpress完全不用修改，可以用内置的上传方法。 但是这样会增大备份网站的负担，如果有盗链，主机的流量恐怕顶不住。 flickr、picasa。几乎完美的解法，用几乎就是因为有大墙的存在。 国内图床。这种方法也不错，青蛙曾经在yupoo上放过一阵图片，现在仍然可用。 但是，国内的图床免费流量很少，限制超多，而且还有被删图的危险。 GAE。青蛙不知道现在是否有可用的相册程序，大概需要大量折腾。 而且也有大墙的存在，比较危险。 Amazon S3/EC2。这是一个很好的解决方法，而且Amazon的服务不像GAE那么吸引大墙的注意力， 可以保证稳定。不过流量仍然是一个让人担心的问题。 Dropbox、SugarSync。Dropbox被墙的很彻底，SugarSync有没有外链的能力还有待考察， 如果可以外链，这应该是最靠谱的一个方案，除了空间比较小，但是可以通过注册多个帐号解决。","tags":"Site","url":"2010/12/nowhere-to-place-the-pictures/","loc":"2010/12/nowhere-to-place-the-pictures/"},{"title":"注册Amazon EC2账户一枚","text":"青蛙今天在水木社区LinuxApp版看到有人推荐Amazon EC2，没有忍住诱惑，去注册了一个帐号。 每个EC2帐号可以免费使用1年，试用的配置(每月) 750 hours of EC2 running Linux/Unix Micro instance usage 750 hours of Elastic Load Balancing plus 15GB data processing 10GB EBS存储空间、100万次IO操作 1GB 快照存储、10,000 snapshot Get Requests and 1,000 snapshot Put Requests 全部服务合计15GB流入和15GB流出带宽. 今天晚上帐号Active了，上去看了一下，实际上EC2就是一个特别一点的VPS。 再加上Amazon的工具套件，可以很方便的启动/关闭虚拟机实例， 这样网站就完全不用考虑硬件的问题，负载不够马上再开一个实例就是了。 另外，AWS上提供的虚拟化方案是基于XEN的，传言EC2的IO性能不够好，这可能跟XEN的实现也有关。 青蛙还发现AWS界面上的大堆bug，虚拟机启动信息里的大堆oops信息， 看来领先的虚拟化提供商提供的服务也不是完美的，虚拟化的发展之路还很漫长。 附记，申请EC2的攻略（似乎图片不太稳定，大家凑合看吧 ：P）： http://www.imtnt.net/amazon-ec2-micro-instance-and-tunnel-guide/","tags":"Virt","url":"2010/12/setup-an-amazon-ec2-account/","loc":"2010/12/setup-an-amazon-ec2-account/"},{"title":"通告：目前本博客正在进行调整","text":"青蛙纠结了很久，终于决定把dreamhost换成vps。 但是麻烦就随之而来，dremahost上自己什么都不需要管， wordpress传上去，简单配置一下就可以用。 vps上就需要自己搞定web服务器，数据库，等等一大堆。 希望dreamhost到期之前青蛙可以搞定vps的问题。 Posted from WordPress for Android Update 2010-12-14 from web : 青蛙已经基本上恢复了wordpress，中间遇到很多小问题，都是迁移之前没有想到的。 青蛙会专门写一篇日志记录这次迁移经验。","tags":"Site","url":"2010/12/notice-site-is-unstable/","loc":"2010/12/notice-site-is-unstable/"},{"title":"树影2","text":"秋天的树是怎么看都看不厌的呀。","tags":"Pictures","url":"2010/11/shadow-of-trees-2/","loc":"2010/11/shadow-of-trees-2/"},{"title":"年度环保车型","text":"0油耗，0排放，全景天窗。 绿色出行，我选单车。","tags":"Pictures","url":"2010/11/environmental-type-of-year/","loc":"2010/11/environmental-type-of-year/"},{"title":"树影","text":"中午的阳光照在草坪上，是无论用神马相机都没法表现的动人色彩。","tags":"Pictures","url":"2010/11/shadow-of-trees/","loc":"2010/11/shadow-of-trees/"},{"title":"在Milestone上安装openvpn","text":"青蛙注：恨死ScribeFire，青蛙这篇日志写了一上午， 结果马上要写完了，浏览器崩溃。杯具就是这么产生的。 重写的话，就不啰嗦了，直接写主要的。 青蛙目前使用的是机锋 fancies 大大制作的PLUS9 FINAL系统，可能其他的系统会有所区别，安装的时候需要注意。 假设milestone已经获得了root，已经安装好了busybox，并且系统里已经带有tun.ko。 首先，要 下载一个openvpn ，解压并上传到手机上， 青蛙偏好使用adb push，这样不需要来回切换存储卡，插上usb就可以用。 sudo adb push openvpn-static-2.1.1 /sdcard/openvpn 使用 sudo adb shell 命令连到手机的shell，注意以下命令都需要root权限。 因为/system 是只读的，需要先挂载成可写的模式： # mount -o remount,rw -t yaffs2 /dev/block/mtdblock6 /system 把openvpn复制到/system/bin里面： # cp -f /sdcard/openvpn /system/bin 然后把/system重新挂载为只读模式： # mount -o remount,ro -t yaffs2 /dev/block/mtdblock6 /system 打开Market，搜索openvpn，安装openvpn settings， 然后打开openvpn settings，按菜单键选择Advanced： 选中Load tun kernel module， Path to configuations设置为/sdcard/openvpn， Path to openvpn binary设置为/system/bin/openvpn。 然后点击TUN module settings， Load module using选择insmod，path to tun module填入/system/lib/modules/tun.ko 为了防止DNS欺骗，还需要Fix DNS，点击Fix DNS，会把dns服务器设置为8.8.8.8。 完成以上设置之后，把openvpn的配置文件、证书等复制到/sdcard/openvpn目录下，再打开Openvpn Settings，就可以连接vpn了。 PS1 . 青蛙开始的时候是用Market里面的Openvpn Installer安装openvpn的， 但是装完之后可以建立vpn连接，但是无法设置tun设备，log里会出现这样的错误日志： Options Error : Unrecognized option or mising parameter ( s ) in [ PUSH - OPTIONS ]: 1 : route ( 2 . 1 . 1 ) Options Error : Unrecognized option or mising parameter ( s ) in [ PUSH - OPTIONS ]: 1 : ifconfig ( 2 . 1 . 1 ) 解决方法也很简单，按照上面描述的方法，下载一个openvpn程序装上就行了[1]。 PS2 . 网上有些教程[2]使用的是TunnelDroid， 青蛙感觉这个东东跟Openvpn Settings基本功能都一样， 只不过TunnelDroid可以更方便的查看Log， 这两个程序按照自己的喜好安装就是了。 参考文档： Issue 26: Unrecognized Command or missing parameter http://code.google.com/p/android-openvpn-settings/issues/detail?id=26 android手机moto Milestone 配置OpenVPN方法 http://www.yisiyisi.net/archives/137.html","tags":"Mobile","url":"2010/08/install-openvpn-on-moto-milestone/","loc":"2010/08/install-openvpn-on-moto-milestone/"},{"title":"一堆小Tips （4）","text":"今天的Tip是关于虚拟化的。 问题的起因是青蛙当时使用的VirtualBox的网络配置很不方便， guset系统启动之后不能改网络连接类型不说（后来的版本做了改进，但是用着还是不够舒服）， NAT模式下还不能直接跟Host系统通信。 于是青蛙痛下决心，学习了一下Linux tap和br设备的用法， 写了一个小脚本来搞定虚拟机的网络问题。 这个脚本同样也可以用于KVM的虚拟机。 这个脚本会根据配置文件建立一系列的tap设备， 然后桥街到几个br设备上去，然后在br上设置好IP， 如果需要NAT功能则配置iptables规则。 脚本文件在这里： http://gfrog.googlecode.com/hg/script/vnet.sh 配置文件如下： USER = gfrog #指定建立tap设备时所用的用户名 VNET_NUM = 2 #需要建立的虚拟网络数 EXITIF = eth0 #SNAT的出口接口 #以下是每个虚拟网络的配置 [ vnet1 ] VETH_NUM = 4 #虚拟网络中包含的tap设备数 VNET_IP = 11.11.1.1 / 24 #虚拟网络br设备上配置的ip地址 DONAT = no #是否需要做nat [ vnet2 ] VETH_NUM = 4 VNET_IP = 11.11.2.1 / 24 DONAT = yes EXITIF = wlan0 #针对这个虚拟网络指定专门的SNAT出口 此配置脚本需要一个名为confget的程序解析配置文件， 这个程序在debian/ubuntu源上有，fedora系需要自己找一下。 还要注意一点，因为每次建立tap设备的MAC地址都会变化， 所以使用KVM虚拟机的时候需要在启动虚拟机时给网卡指定MAC地址， 防止guest系统里的网卡名称变化。","tags":"Linux","url":"2010/08/gfrog-tips-4/","loc":"2010/08/gfrog-tips-4/"},{"title":"一堆小Tips （3）","text":"今天继续关于ssh的话题。 青蛙本来想把今天这个主题放在昨天一起讲的，但是这两个Tip的关联不大，最后决定还是分开说。 在平时上网过程中，有可能遇到某个服务器（我们叫他S）无法访问的问题。 但是如果另外一台主机（叫做P）可以访问到S，并且我们还有P上面的ssh权限，那就可以把P当作跳板，直接访问到S。 假设要访问S上面的http（80）服务，那就执行如下命令： ssh user @P的地址 - L 8080 : S的地址 : 80 这个命令会在本地打开8080端口，将连接转发到S的80端口上，这样就达到了从本地直接访问S的目的。 事实上ssh的-L参数主要是用来建立一条客户端到服务器之间的安全隧道，以便安全的传输数据。","tags":"Linux","url":"2010/08/gfrog-tips-3/","loc":"2010/08/gfrog-tips-3/"},{"title":"一堆小Tips （2）","text":"今天的Tip主题是ssh。 经常有人问，为什么Linux里面的ssh那么难用呢， 就不能有个像secureCRT那样有地址簿的东西么。 答案是， 有 ，而且不需要其他的软件，ssh自己就能搞定。 要实现这个功能，首先要在~/.ssh里面建立一个config文件，并设置600权限。 ` touch ~/ . ssh / config chmod 600 ~/ . ssh / config ` 然后在这个文件中加入以下内容（以10.1.1.1为例） Host 1 # 指定主机名，这个名称可以任意，取对自己方便的就可以 HostName 10 . 1 . 1 . 1 # 指定主机的 IP ，这里是 10 . 1 . 1 . 1 User aaa # 默认登录的用户名 Port 22 # 主机上 sshd的端口号 以后，访问10.1.1.1就直接执行#ssh 1就可以了，非常方便。 再继续探索一下~/.ssh/config，我们会发现更多有趣的配置。 Host * ControlMaster auto ControlPath ~/ . ssh / master -% r @% h : % p 这段配置会打开所有主机的ControlMaster的功能， 也就是在一条ssh connection上开启多个session。 更多的配置选项，可以参考ssh_config(5)。","tags":"Linux","url":"2010/08/gfrog-tips-2/","loc":"2010/08/gfrog-tips-2/"},{"title":"一堆小Tips （1）","text":"青蛙离职在即，在东软混了三年，在工作中积累的一些小技巧。 估计这些技巧到了其他公司基本上用不到了。 记录一下，方便后来人。 青蛙准备分几天写完，每天一个小Tips。 今天要说的是IPsec VPN的密码问题。 搞安全的部门自然有安全部门的特色，所有的服务器都需要拨VPN才能访问。 用Windows的童鞋们都很幸福，第一次连接的时候输入帐号密码，然后选保存密码，下次就可以直接登录了。 但是Linux的童鞋就比较麻烦了，按照部门攻略上的办法，每次都要输入密码。 青蛙在ipsec.conf(5)里面找到了这个问题的解决办法。 首先要编辑一下/etc/ipsec.conf conn work left = 10. x . x . xxx leftnexthop = 10. x . x .1 leftid = \"C=cn,ST=liaoning,O=neusoft,OU=nsd,CN=xxx_l/emailAddress=xxx_l@neusoft.com\" leftcert = cert . pem leftxauthclient = yes leftmodecfgclient = yes leftxauthusername = xxx_linux modecfgpull = no right = 10. x . x .254 rightsubnet = 10. xxx . x .0 / 24 rightxauthserver = yes rightmodecfgserver = yes rightid = \"C=cn,ST=liaoning,O=neusoft,OU=nsd,CN=vpnser,E=vpnser@neusoft.com\" auto = add 注意leftxauthusername=xxx_linux这行，关键就在这里了，这句话就指定了这个vpn 连接所用的用户名。 然后再编辑一下/etc/ipsec.secrets : RSA / etc / ipsec . d / private / key . pem @xxx_linux : XAUTH \"password\" @xxx_linux : XAUTH \"password\" 这行指定了用户名对应的密码。 修改完这两个文件以后，下次再连接VPN的时候就会自动连接了。 PS . /etc/ipsec.conf 还有一句auto=add，加上这句话之后， 就可以使用 # ipsec auto --up connname 这种命令格式连接vpn了，命令格式简单些。 PS2 . 为了更进一步达到偷懒的目的，继续包装一下连接vpn的流程，建立一个alias： alias vpn='/etc/init.d/ipsec restart && ipsec auto --up work' 然后每次sudo vpn就成了，偷懒目的达到。","tags":"Linux","url":"2010/08/gfrog-tips-1/","loc":"2010/08/gfrog-tips-1/"},{"title":"Dreamhost主机共享计划","text":"最近青蛙的DH帐号迁移到了一台没有磁盘和流量限制的主机上。 所以，为了避免DH资源的浪费，青蛙准备开放主机共享计划。 首批准备开放10个共享名额。 过一段时间，如果发现开放的空间没有被使用，青蛙将酌情收回并再次开放申请。 这个计划是免费的，只提供搭建个人博客所需要的必要资源。 目前青蛙的帐号已经续费到2010年底，如果不出意外的话，还会继续续费。 详细计划如下： 免费； 提供5G硬盘空间，流量不限； 似乎在无限空间的主机上已经没有设置账户空间的地方了，那么用户空间跟流量一样也是无限的。 只限一个站点使用，只绑定一个域名； ftp和mysql帐号各一个，没有shell和email提供 提供gmail/google app； 可以提供python支持（青蛙对于配置python有点陌生，对于python的支持需要青蛙探索一下）。 对于参与者有如下要求： 只能做个人主页/个人博客用途； 禁止做下载站、放置盗版内容，禁止做采集； 在不违反以上几条的前提下，可以放置广告； 对于博客搭建、站点备份的问题请自己解决。 有意者请在twitter上联系 @gfrog ，介绍一下你的情况和计划，并自备域名一个。 Update: 目前参与本计划的成员： 爱自在 http://www.izizai.tk/","tags":"Site","url":"2010/04/dreamhost-host-sharing-plan-free/","loc":"2010/04/dreamhost-host-sharing-plan-free/"},{"title":"春节快乐","text":"大家好， 在虎年到来之际，青蛙在这里祝大家虎年新春快乐！吉祥如意！幸福康健！ 在除夕和初一短信过青蛙的童鞋们，俺就不一一回复了，在这里一并送去青蛙最美好的祝福！","tags":"Misc","url":"2010/02/chun-jie-kuai-le/","loc":"2010/02/chun-jie-kuai-le/"},{"title":"年关将至","text":"又到年关，年终奖发到手以后才发现辛苦干了一年，这点钱还不够过年的。 这是多么令人纠结的一幕。 明年，该走向哪里？","tags":"Misc","url":"2010/02/the-end-of-year-is-approaching/","loc":"2010/02/the-end-of-year-is-approaching/"},{"title":"公司园子里的肥猫","text":"这只肥猫真的是太有喜感了，每次看到它我都有冲上去折磨一番的冲动。 但是这是只野猫，对人有极强的戒心，所以，我是没有办法凑到它身边去了。 今天终于给它拍了几张\"玉照\"，可惜是用卡片拍的，稍微有点跑焦。 不得不说小卡片的镜头，对焦准确的话，还真的很锐，但是焦外，烂得一塌糊涂。 这个角度看，是不是很有王霸之气？ XD 猛猫下山","tags":"Pictures","url":"2009/12/cat-living-in-neusoft-park/","loc":"2009/12/cat-living-in-neusoft-park/"},{"title":"测试ScribeFire","text":"选来选去，Linux下最靠谱的blog客户端还是ScribeFire， 其他的不是没有所见即所得的编辑方式，就是经常crash， 或者就是很久很久不更新。 青蛙以前试用过ScribeFire，这次再装上， 发现这个小东东的可用性明显增强了，很好很强大啊。 除了没有windows live writer那么多的插件，其他都很完美。 借着这样顺手的工具，青蛙正在慢慢恢复blog的状态。：P update: 发表这篇日志的时候，青蛙发现ScribeFire竟然可以直接编辑slug，那么青蛙在 上一篇日志 里说到的在标题栏里些slug的问题也不存在了，ScribeFire真好。","tags":"Site","url":"2009/11/test-from-scribefire/","loc":"2009/11/test-from-scribefire/"},{"title":"测试黑莓手机发博","text":"虽然青蛙的黑莓上早就安装了wordpress客户端，但是它对中文的支持真是一塌糊涂，所以青蛙一直也没用。 再后来，这个客户端的官方网站被封，没办法升级，青蛙就把这个客户端扔到一边去了。 今天无意中找到一个国内提供OTA安装的网站。 赶快升级试用。这不，这个可爱的客户端已经完美支持中文了。 update: 2009-11-24 青蛙试用完黑莓版本的wordpress客户端以后， 又试验了一下Android上的WP客户端，用起来也不错，速度很快。 但是没有BB上的功能全面，只能编辑blog，没有处理评论和page的能力。 看来BB用户还是很有福的。 update: 2009-11-25 在live writer里面，直接在标题后面加入@@固定链接， WP就可以将我发布的blog设置为我指定的固定链接了。 但是BB客户端么有这么做。具体原因，需要调查一下。 发现问题在哪里了，前几天青蛙给WP的插件做了一次大规模升级， 其中就包括了从标题读取slug的插件wp-slug， 这个东东的1.5版会一直试图用google翻译我的标题， 导致我自己设置的slug无法生效。解决方法很简单，给它降级到1.4. ：P","tags":"Site","url":"2009/11/test-blogging-from-blackberry/","loc":"2009/11/test-blogging-from-blackberry/"},{"title":"闪电","text":"2009年9月11日，雷雨。 在阳台上蹲守了半小时，浪费快门无数，终于蹲到了2张闪电。 因为没有快门线，没用B门。 直接用30秒曝光，30秒以后再按一次快门，如此反复。 第一次拍，傻傻的没有经验，拍到闪电以后还在傻傻的曝光，没有用遮光板把镜头挡住，所以闪电没有那么壮丽。","tags":"Pictures","url":"2009/09/lightning/","loc":"2009/09/lightning/"},{"title":"成功升级wordpress","text":"这wordpress的自动升级功能是越来越好用了。 想想看，几个月前在wp的后台里点升级还会直接跑去 www.wordpress.org ，必须手工下载安装包。 现在只要点一下自动升级，不到1分钟，wordpress就已经up to date了。很好，很强大。","tags":"Site","url":"2009/08/successfully-upgrade-wordpress/","loc":"2009/08/successfully-upgrade-wordpress/"},{"title":"UltraVPN - A Free VPN","text":"最近功夫网发飙，所以各种翻墙术也层出不穷， 在twitter上看到有人推荐UltraVPN，很好很强大，在这里也推荐一下。 UltraVPN基于Openvpn，简单易用， 除了在windows上可以使用，在linnux和macox同样都用客户端。 通过UltraVPN，你可以： 从企业网中访问被过滤的web网站 在MSN被过滤的情况下访问MSN 在被过滤的情况下使用VoIP软件（例如Skype） 保护你的邮件和浏览隐私 避免在internet中被记录 当然，对国人最重要的一条，就是可以穿墙。 UltraVPN使用也很简单。 首先，在 这里 注册帐号，下载客户端后就可以直接使用了。 客户端下载： Windows ， MacOS ， Linux （只包含配置文件，openvpn客户端在 这里 ）。","tags":"Networking","url":"2009/06/ultravpn-a-free-vpn/","loc":"2009/06/ultravpn-a-free-vpn/"},{"title":"测试linux系统的启动速度","text":"今天看到blog一则，话说 ubuntu9.04竟然可以在14秒内启动 。 于是青蛙拿 bootchart 测了一下自己的debian。 青蛙自己的系统用了33秒，其中有启动vmware和virtualbox的服务的时间， 还有启动ntfs-3g、lighttpd、transmission、wicd的，比较起来，成绩还不算太差。 不过wicd是用python写的，加载确实比较耗时， 但是network-manager的可定制性实在不高，不知道还有没有同类的软件可以替换。 另外，bootchart加载之前的一段时间应该是内核加载的时间，看来青蛙还要继续精简内核才行。 顺便记录一下bootchart的使用方法。说起来也很简单，统共分3步。 装好bootchart之后，配置自己的bootloader，例如grub，在内核选项里面加上一句： init=/sbin/bootchartd。 重启，bootchart自己就会在后台记录启动信息，默认保存在/var/log/bootchart.tgz中。 完成启动后，运行bootchart命令，它就会把启动信息转化为下面这张图啦。","tags":"Linux","url":"2009/04/test-debian-boot-time-with-bootchart/","loc":"2009/04/test-debian-boot-time-with-bootchart/"},{"title":"没有了更新blog的激情","text":"自从工作以后，这个blog就很少更新了。 一方面是工作以后时间没有像在学校时那么充裕， 另一方面，青蛙的惰性真的越来越大了，经常是想在blog上说些什么， 但是真的坐下来要打字的时候，又不知道从何说起，然后也懒得去想，最后只得作罢。 而且，自从部门对上网进行限制以后，青蛙的这个域名竟然直接就被封了，真是倒霉到家了， 一点机会也没有给。所以，更新的更加少了。 有的时候真的想写了，在live writer里刷刷写了半天，也没办法更新， 也只好扔在那放着了，放的久了，也就忘了更新。 青蛙曾经有过关闭这个blog的想法，更新的这么可怜，又没有实际内容，开着实在浪费。 不过这里毕竟还是记录了青蛙几年的历程，所以一次次的让它自生自灭。 这个blog到底应该走向哪里？ 真是个难题。看来只能让它继续自生自灭了？","tags":"Site","url":"2009/04/lost-passion-on-weblog-update/","loc":"2009/04/lost-passion-on-weblog-update/"},{"title":"回首2008","text":"2009就这么不经意的就来了。虽然2008走的不甘心， 多在这个世界上停留了一秒 ，也没有阻挡的住2009的到来。 套用那句经典名嗑，看过去，想今朝，我此起彼伏。于是乎，就多了这篇日志。 话说2008年注定就是不平凡的一年，从2008年那场雪比每年都要大一些开始， 暴动，抵制法国货，地震，奥运，经济危机，再加上饭岛爱同志的逝世，这些都是今年（哦，是去年）的标志性的名词了。 国家大事自然有大人去管，还是说说青蛙自己。 2008年，青蛙终于把自己交给了一个人，这个人应该值得青蛙托付一辈子吧 ：）； 2008年，青蛙终于完成了自己的第一个第1000行代码，不过最后也没派上用场，就当练手吧； 2008年，青蛙从一个测试人员转型为编码人员，从一个抓虫子的变成了制造虫子的，反差还是满大的； 2008年，青蛙接到了工作以来最大最复杂的一项任务：动态路由的设计制作，第一次了解了OSPF和BGP的特性，这是一场与风车的搏斗； 2008年，青蛙终于完成了从小到大最大的一次败家，换来白纸若干； 2008年，青蛙终于有了自己的第一台小黑，虽然小黑现在已经变味了； 2008年，青蛙终于向代码库里提交了第一行代码，虽然还是脚本，但是，我们的产品中终于有了青蛙的贡献。 2008，平淡，也饱含激情。","tags":"Misc","url":"2009/01/looking-back-2008/","loc":"2009/01/looking-back-2008/"},{"title":"2009新年快乐","text":"新年快乐！","tags":"Misc","url":"2009/01/happy-new-year-2009/","loc":"2009/01/happy-new-year-2009/"},{"title":"关于FreeBSD系统安装和升级的几个技巧","text":"青蛙今天又开始在VMWare上继续倒腾FreeBSD。 话说上次给FreeBSD划分的虚拟硬盘太小了， csup了一下系统和ports就把分区吃光光了。 所以今天青蛙从头又装了一遍FreeBSD，在安装和升级的过程中遇到了不少问题，在这里统一做一个记录。 首先，是青蛙又把root密码搞丢了。这已经是第N次刚刚装上系统就要恢复密码了。 不过今天的原因是这样的，青蛙在安装的时候不小心修改了系统的keymap设置， 结果按照正常键盘顺序输入的字符，变成了不知道是什么符号。 当青蛙发现这个问题并改过来keymap之后，root密码就一直错误了。 没办法，上网google一下。流程如下[1]： 第一步，启动到freebsd的single user模式， 也就是出现freebsd的启动菜单的时候按4； 等着系统启动，最后会提示指定shell的位置或者按回车继续， 这里直接按回车就ok。 第二步，在shell里执行如下命令： # fsck - p # mount - u / # mount - t ufs - a 第三步，用passwd修改root密码。 青蛙在这啰嗦一句：现在想想当时的错误操作就是在设置终端那步， 青蛙打开keymap的设置对话框看了一眼， 估计那个时候就直接选择了第一个键盘类型，然后就那么错了。 对比各种Linux的安装过程， keymap的设置有一个默认不做任何改变的选项， 青蛙在FreeBSD里面就没有找到， 看来FreeBSD在这种细节上还需要继续努力。 由于FreeBSD的默认shell是csh，所以青蛙用起来十分的不顺手， 上网google到几个贴心小设置，让csh用起来更加方便[2]： alias ls ls - w # 让 csh可以正常显示汉字 alias ls ls - G # 按照文件类型高亮显示 set autolist # 按 tab键时自动补全 ，如果有多个符合就显示列表。 set nobeep # 关闭终端响铃 set prompt = \"`/bin/hostname -s`:%~# \" # 在命令提示符中显示当前目录。 青蛙上次搞FreeBSD已经是很久以前的事了。 记得那时候好像FreeBSD 5-CURRENT刚刚出来，再后来青蛙就一头扎进Debian的世界去了。 所以FreeBSD的新东西青蛙几乎都没有见过，例如，更新ports。 记得当年的做法应该是 先从sysinstall里面装一个ports， 在这个ports中装一个cvsup-without-gui（似乎是叫这个名字吧）， 接着编辑port-supfile文件， 再然后才是用cvsup重新更新ports。 现在看起来，这套程序简直麻烦到家，对于新人来说十分的不友好。 不过，这些东东都是历史了，从FreeBSD的handbook看，更新ports已经简单了很多了。 说一个青蛙认为最简单的吧，portsnap方式[3]。 说这种方式简单，到底有多简单？ 总共分三步： 先下载一个 ports包 ： # portsnap fetch 然后解压到 / usr / ports里面 ： # portsnap extract 以后需要更新的时候，直接执行： # portsnap update 就这么简单，比cvsup还有稍后引入的csup方式简单的多。 ：） 当然portsnap自身也还有几个参数，青蛙觉得最常用的应该就是-s参数了， 这个参数用来指定更新时使用的更新服务器， 默认是 portsnap.FreeBSD.org 。 国内有一系列portsnap的镜像可用，速度还是很快的，例如hssh.org的镜像： portsnap.hshh.org portsnap2.hshh.org portsnap3.hshh.org (网通) portsnap4.hshh.org 今天先写到这里，未完待续... 参考资料： [1]：FreeBSD恢复root密码 http://www.zhaocs.info/linux-technic-26.html [2]：csh一些简单舒服的设置 http://www.linuxsir.org/bbs/showthread.php?s=&threadid=112343 [3]：4.5.1 获得Ports Collect http://www.freebsd.org/doc/zh_CN.GB2312/books/handbook/ports-using.html","tags":"Misc","url":"2008/12/tips-about-freebsd-installation-and-upgrade/","loc":"2008/12/tips-about-freebsd-installation-and-upgrade/"},{"title":"公告：此空间续费完毕","text":"思想斗争了很久，今天终于把这个空间明年的费用交了。 虽然不怎么更新了，但是也是个没事瞎扯淡的地方。 还有几件事情， 第一件，声明一点，gfrog.cn这个域名， 由于我的疏忽，已经被别人抢注了， 所以，这个域名已经跟我毫无关系。 好像是个什么下载站，看来又是骗点击、骗流量的了。 第二件，算是广告，由于本空间资源十分充足， 所以开放空间共享服务，如果有需要的，可以留言，留下邮箱。 至于费用，我想象征性的一点就可以了， 毕竟taobao上dreamhost的空间已经超便宜了。 第三件，开放一个折扣号，\"GUAGUA\"，$50的折扣，有需要的尽管拿去吧。：P 好了，就这么多。另外给自己定个目标，以后争取每天更新。","tags":"Site","url":"2008/12/announce-this-blog-has-paid-for-next-year/","loc":"2008/12/announce-this-blog-has-paid-for-next-year/"},{"title":"跟耗子接近的生物钟","text":"哦，对不起，这篇日志标题党了。 青蛙最近经常熬灯写文档，搞得作息时间毫无规律。 经常是凌晨上床，然后早上还要爬起来上班， 于是整天都没有精神，哈气连天， 然后晚上的时候倒是神采奕奕，很晚都不想睡觉。 一个接近于昼伏夜出的动物产生了！ PS.貌似最近到了青蛙冬眠的时节了，难道青蛙成天犯困也跟没去冬眠有关？ ：P （文中图片来自Google，请大家猛击 http://hi.baidu.com/aeon_studio/blog/item/3bef7036fc6d9c340a55a9b0.html 观看更多超盟的老鼠，图片版权为原作者所有。）","tags":"Misc","url":"2008/11/biological-clock-like-a-mouse/","loc":"2008/11/biological-clock-like-a-mouse/"},{"title":"无聊时的消遣：JavaScript性能测试","text":"闲着无聊，在某邮件列表上发现一个测试js脚本性能的网页。 用Chrome进去一试，85ms。Google浏览器的js性能还真是彪悍。 多余的不说，上图。 Google Chrome的测试结果。 IE6的测试结果，中间还弹出了脚本执行时间过长的警告。 差距，就是这么明显。","tags":"Misc","url":"2008/11/javascript-performance-test/","loc":"2008/11/javascript-performance-test/"},{"title":"像Linux一样的Windows","text":"谁说Windows的易用性好！？ 用惯了Linux，换到Windows上真的是超级不适应。 别的不说，就说复制粘贴都需要&#94;C、&#94;V的按个不停， 就是一种很影响效率的方式。 还有那个傻呼呼的cmd窗口，怎么能比的上bash简洁？ 这次换到windows平台，装好系统干的第一件事就是把 Cygwin 装上，有了熟悉的命令行，熟悉的VIM，才有工作的动力。：P 然后再把explorer换成 bbLean ，恩，这次跟linux比较像了！ 但是还是没找到怎么样把窗口置顶的方法， 没法像在Linux里那样方便的把一个窗口钉在顶端。 （bbLean的更多图片可以参考 青蛙以前的日志 ） 实际上，被Windows惯坏的人太多了！","tags":"Misc","url":"2008/11/make-windows-like-linux/","loc":"2008/11/make-windows-like-linux/"},{"title":"好吧，该说点什么了","text":"已经将近半年没有更新了。 因为这半年，青蛙所在的某软公司封掉了外网的连接， 青蛙在公司对外唯一的联络方式就是公司的办公邮箱。 虽然这段时间有很多想说的，但是，由于这个网络，只好放弃了。 话说，青蛙在2008年夏天的某一天里，终于下定决心，转去了开发组。 本来以为从测试序列转到开发队伍比较费劲呢， 结果，领导一句话，\"过来吧！\"然后青蛙就这么过来了。 现在，青蛙也是写代码的人了。虽说还向代码库提交过一行代码呢：P 从7月末开始，青蛙就开始研究动态路由相关的几个协议：RIP、OSPF、BGP。 书是啃了很多的，也学到了很多，不过打突击的结果就是：知识掌握不扎实！ 其实也是，还没有会走呢，就逼我去跑，当然有磕磕绊绊了。 但是打突击也有好处，就是经过这几个月的突击， 回过头来再看CCNP的路由部分真是超级简单啊。：P 自大一回。 现在，青蛙彻底的沦为了文员，已经写了2个月左右的需求文档了！ 虽然快看到终点了，但是任务还是很艰巨的。 每天跟Word打交道，其他的没学到，Word里面那点表格操作倒是都搞通了。：P 意外所得！ 工作汇报完毕，然后是生活。 十月，青蛙终于入手了PSP。 这个东东果然很赞嘛，除了没有键盘，其他的青蛙都很满意—— 速度足够，听歌看片都很爽；屏幕很大，趴被窝里看小说很合适； 集成wifi，这回青蛙败的Linksys WRT54G终于派上用场了。：P 花钱买乐子玩。 哦，对了，说起这个WRT54G，青蛙买回来的时候就曾经配置过很久无线连接，但是跟本子就是连不上。 因为本子的系统是Debian，所以青蛙一直认为本子的配置哪里出了问题。 这次PSP到手以后，拿来一试，还是连不上无线路由，现象是无线路由只有收包，没有发包。 最后青蛙一怒之下干掉了 DD-WRT ，装上了可爱的大柿子 Tomato ，然后这个WRT54G竟然就好用了。 晕死，竟然是DD-WRT的原因。：P 也算是个意外。 恩，另外一个意外就是，陪伴了青蛙三年的主板，在上周， 准确的说是2008年10月30日，挂掉了！ 在它正好过保修期一个月的时候！ 看来，青蛙入手T400的日程需要考虑提前一下了。：P 好吧，就说到这里，感谢观看青蛙唠叨，大家晚安。：）","tags":"Misc","url":"2008/11/say-something-in-beginning-of-nov/","loc":"2008/11/say-something-in-beginning-of-nov/"},{"title":"关于Google App Engine的一点点东西","text":"Google App Engine （以下简称GAE）服务推出来有段时间了， 最近google刚刚完全开放了GAE的注册，并且公布了GAE未来的价格（原文在 这里 ，被盾，需要带套访问）。 GAE是google提供的一个在线应用平台，提供从数据库到应用服务器的一整套东西， 每个GAE应用可以免费使用500M存储空间和满足5百万pv/月的CPU跟资源。 Google出的东西都很赞，GAE也是这样。 它提供了一个成型的python应用框架，外加GFS强大的存储支持， 在上面可很方便的建立自己的web应用。 但是，青蛙注册账号以后，一直没有在上面做什么。 原因？很简单， Ｇ。Ｆ。Ｗ！ 在Ｇ。Ｆ。Ｗ的阴影下，GAE服务很有可能就被干掉了。 特别是存在 这种 服务的情况下。 不过，鉴于现在有稳定的免费vpn支持，青蛙决定重新启动blog DIY计划，就在GAE平台上！ 各位，bless me吧。","tags":"Misc","url":"2008/06/something-about-google-app-engine/","loc":"2008/06/something-about-google-app-engine/"},{"title":"G to g, google for kids?","text":"不经意之间，google的全球网站全部都悄悄的更换了favicon， 从一个大大的G换成了一个cute g。 今天早上青蛙发现这个变化的时候，第一反应就是： google一定是为儿童节更换的图标。 但是过了几分钟，才想起来，\"六一\"只是中国宝宝的节日啊， 难不成全球的google站点都在为中国宝宝们庆祝节日？ update 2008-06-01 ：原来\"六一\"是全世界宝宝的节日啊。 我承认，我没有小学毕业证，大家鄙视我吧。 -____-","tags":"Misc","url":"2008/05/google-change-favicon/","loc":"2008/05/google-change-favicon/"},{"title":"Mozilla的add-on站点更新","text":"话说Mozilla的Add-on站点最近更新了, 这次更新最显著的特色就是有了完整的中文版页面, 这对广大中国用户来说真是一个好消息。 其他的方面还有可以在线检测扩展对应的firefox版本了, 如果正在使用的浏览器跟扩展不兼任, 那么这个扩展的安装按钮会变成灰色, 也就是说连下载的机会也不会给。 这个修改对青蛙来说实在是太痛苦了, 很多插件在firefox3上没法安装, 看来只能望扩展兴叹了。","tags":"Misc","url":"2008/04/add-on-dot-mozilla-dot-com-updated/","loc":"2008/04/add-on-dot-mozilla-dot-com-updated/"},{"title":"在debian sid上面安装eva","text":"自从青蛙人品爆发，在pidgin上面死活登录不上QQ以后，青蛙都是在wine上面跑QQ。 在wine上面速度慢不说，QQ时不时的来一下非法操作就把青蛙折磨的死去活来。 据说最近eva又升级了，于是青蛙决定换用eva。 Debian的apt里面是没有eva的。 青蛙上网搜了一圈，也没有发现eva的升级包，连 它的主页 上也都还是很久很久以前的版本（大概eva已经转入地下了）。 青蛙最后在ubuntu的源里面终于翻倒了eva的deb包了。 eva在ubuntu源的universe里面，随便找一个ubuntu的镜像（青蛙用的是 中科大的源 ），在/pool/universe/e/eva目录里找到 eva_0.4.9+svn20080215-0ubuntu1_i386.deb ，下载回来备用。 在正式安装eva之前，青蛙还要搞定它的依赖性问题。 ubuntu里面的eva是依赖于kdelibs4c2a这个包的。 但是debian里面的kdelibs4c2a存在一个依赖性的bug： 它依赖于包libopenexr2ldbl，但是这个包在debian的i386源里面竟然没有。 于是青蛙再从ubuntu源里把 libopenexr2ldbl 给抓回来， dpkg -i 安装之，然后执行 # aptitude install kdelibs4c2a ，安装一系列的依赖包。 顺便说一句，debian跟ubuntu这两个兄弟有时候还真不错，互相谁也不挑谁的，deb包拿过来一般都能直接用。 最后，执行 # dpkg -i eva_0.4.9+svn20080215-0ubuntu1_i386.deb ，eva安装成功。 聊天去也~","tags":"Linux","url":"2008/03/install-eva-in-debian/","loc":"2008/03/install-eva-in-debian/"},{"title":"世界上最小的linux","text":"上面的图片就是号称世界上最小的linux： picotux 100 （右侧为picotux 112）。 这个小东西只有35mm×19mm×19mm大小，只比一个RJ45接口大了那么一点点。 它使用32-bit ARM 7 Netsilicon NS7520处理器，主频55MHz， 搭载2M~4M Flash和8M SDRAM，带有一个10/100M网卡， 一个可以达到230.400 bps的串口，还有5个I/O针脚。 使用3.3V电压供电。 软件方面，它使用uClinux 2.4.27系统，系统大小最少720KB。 Shell可以使用Busybox，使用CRAMFS、JFFS2文件系统, 还可以使用NFS，有Webserver、Telnet等等程序。 开发工具使用GUN Toolchain，使用GCC3.4.4以上版本和ulibc0.9.26以上版本。 这东东售价最低99欧元。","tags":"Linux","url":"2008/03/picotux-tiny-linux-device/","loc":"2008/03/picotux-tiny-linux-device/"},{"title":"在Dreamhost主机上安装bugzilla","text":"bugzilla 是 mozilla 一个很好的开源bug管理软件。 青蛙准备在glinux的开发过程中用它来管理发现的bug。 但是dreamhost上没有bugzilla的自动安装功能，青蛙按照 dreamhost的wiki上面介绍的方法 安装时，又有很多perl模块没有，而且在dreamhost的主机上也没有权限安装这些perl模块。 所以，青蛙决定先在主机上自己搞一个perl。 perl的安装方法很简单， dreamhost的wiki也有介绍 。青蛙选择的是perl5.8.8，因为wiki上头说有一个针对dreamhost环境的补丁要打 （补丁文件在 这里 下载）。 打上补丁以后，执行： sh Configure - Dusethreads - Duselargefiles - Dccflags =- DDEBIAN - Dcccdlflags =- fPIC - Darchname = i386 - linux - Dprefix =~/ apps - Dpager =/ usr / bin / sensible - pager - Uafs - Ud_csh - Uusesfio - Uusenm - Duseshrplib - Dvendorlib =/ usr / share / perl5 - Dvendorarch =/ usr / lib / perl5 - Dvendorprefix =/ usr - Uinstallusrbinperl - des 其中Dprefix参数要设置为要安装perl的目录。 config完毕就可以 make && make install 了。 下面正式开始安装bugzilla， （青蛙的perl在~/apps/bin目录下，这个目录要换成你自己实际的目录哦） 首先进入bugzilla的目录，执行： ~/ apps / bin / perl chechsetup . pl 这个脚本会检查当前的perl环境，如果有缺少的模块，它会给出安装命令。 例如，在青蛙的主机上， Email::Send 、 Email::MIME::Modifier 就被提示安装。 按照这个脚本给出的命令把必须的模块安装上，然后再次执行上面的命令， 会在bugzilla目录下生成一个localconfig文件。 修改这个localconfig文件： $webservergroup = \"apache\" 中的apache改为自己真实的组名称 ， 这个组名字可以用groups命令查到 。 $db_host = \"localhost\" 修改为真实的mysql服务器地址 。 $db_name = \"bugs\" 修改为真实的数据库名 。 $db_user = \"bugs\" 修改为真实的用户名 。 $db_pass = '' 修改为真实的密码 。 上面几项都改完后，重新执行checksetup.pl脚本。 这时脚本会询问管理员邮箱地址，设置管理员密码等等动作。 因为dreamhost使用suexec方式运行的cgi脚本， 所以每次执行完checksetup.pl以后，都要执行以下命令： for i in docs graphs images js skins ; do find $i -type d -exec chmod o+rx {} ; ; done for i in jpg gif css js png html rdf xul ; do find . -name *.$i -exec chmod o+r {} ; ; done find . - name . htaccess - exec chmod o + r {} ; chmod o + x . data data / webdot 完成这些后，bugzilla就算是安装成功啦。 可以先用浏览器访问下bugzilla的地址看看效果。 接下来说一下汉化的问题，汉化包可以在 这里 下载到，下载、解压以后，把cn文件夹复制到bugzilla目录里的template/目录就行啦。","tags":"Site","url":"2008/03/install-bugzilla-in-dreamhost/","loc":"2008/03/install-bugzilla-in-dreamhost/"},{"title":"Markdown语法摘要","text":"下面是Markdown语法的简要列表，便于以后查阅。 以下内容主要从 牧码志 整理，感谢leninlee的辛勤劳动。 链接的添加，共有三种形式，Markdown支持相对链接。 <链接> ：这种形式只是简单的标出链接； [文字](链接 \"标题\") ：给文字添加链接，其中标题是可选的； [文字][标记] ：给文字添加链接，链接在下面的一个以 [标记] 开头的新行（一般是文章末尾）给出。 或者直接以 [文字][] 这种形式编写，在下面的新行中使用 [文字] :链接的形式声明链接。 图片的添加：跟链接比起来，图片只是多了在前面多了一个叹号 ! 。 标题格式：Markdown提供了2种方式。 第一种是在标题前面加上1~6个 # 表示 <h1> ~ <h6> 。 第二种是在标题下面另起一行，输入四个以上的等号 = 来表示 <h1> ， 输入四个以上的减号 - 来表示 <h2> 。 粗体和斜体：用星号\"*\"或者下划线\"_\" 一个表示斜体； 两个表示粗体； 三个表示粗斜体。 引用内容：就是html标记的 <blockquote> ，只要在行首用右尖括号 > 就行了。如果要嵌套引用，那就多打几个 > 。 原文输出：如果不想Markdown解释某些内容，有两种方式： 第一个是转义为html的 <pre> 标签：要在要原样输出的内容前面加入至少4个空格或者1个tab的宽度； 第二个是转义为 <code> 标签：给要输出的内容加上```号（就是esc下头那个键）。 无序列表：在文字前面使用星号 * 、加号 + 、减号 - 中的任意一个，注意在这些符号后面要留一个空格。 有序列表：在第一条前添加一个数字，后跟一个英文句点 . 。无论第一个条目前加的数字是什么，列表都会从1开始计数。 转义符： \"\" 。只要给不希望被转义的字符前面加上就可以了。 HTML实体：如果要在内容中输出 < 或者 & 符号，那么必须用 [HTML实体][] 代替。 Markdown会把HTML的特殊符号直接翻译为HTML实体。 换行符：Markdown中在一行的末尾使用两个以上的空格标示HTML中的一个换行符 <br /> 。 段落：只要两行之间有一个空行，Markdown就会把它识别为一个段落。 （青蛙在写这篇文章的时候发现，在列表之前一定要加入一个空行，要不然Markdown是不会把 * 识别为列表的。） 水平线：使用三个以上的 * 或 - 来表示。这些星号跟减号之间可以用空格，如果减号没有空格， 那它必须在单独的一个段落里，要不它会被识别为标题的。 直接使用HTML标记：有些Markdown不支持的标签可以直接写HTML标记，例如表格。 update,2008-03-20: 青蛙发现直接向wordpress写Markdown格式效果真的很差，而且不方便编辑， 所以青蛙决定还是在本地把Markdown文档转化为HTML格式再发布到blog上好了。","tags":"Programming","url":"2008/03/markdown-syntax-basic/","loc":"2008/03/markdown-syntax-basic/"},{"title":"在VIM中打开Markdown文件高亮","text":"Markdown 是John Gruber设计的一个文本标记系统，相比html，它很简单， 便于手工编写，而且它还支持 Wordpress ， 有一个用于wordpress的插件 。青蛙决定用vim+Markdown来编写blog，看起来他们是一对强大的组合 :) 首先要去 Vim 的官方网站 下载Markdown的语法高亮插件 ，并把它复制到\"~/.vim/syntax/\"目录下面。 然后，新建一个\"~/.vim/ftdetect/mkd.vim\"文件，在其中加入下面的内容： \" markdown filetype file if exists ( \" did_load_filetypes \" ) finish endif augroup markdown au ! BufRead , BufNewFile * . mkd setfiletype mkd augroup END 并在\"~/.vimrc\"文件中添加如下内容： \" Markdown language syntax settings augroup mkd autocmd BufRead * . mkd set ai formatoptions = tcroqn2 comments = n : > augroup END 然后，后缀名为\".mkd\"的文件就能被自动启用Markdown的语法高亮了。","tags":"VIM","url":"2008/03/enable-markdown-highlight-in-vim/","loc":"2008/03/enable-markdown-highlight-in-vim/"},{"title":"glinux开发摘要(2)-构建目录结构","text":"下面的操作步骤青蛙基本上是从 lfs6.3 学来的，所以会有$LFS这个变量，如果你对lfs也有兴趣，可以 去它的官方网站 看看。 青蛙编译完成了toolchain以后，就可以开始建造glinux的目录体系了。 首先，构造虚拟内核文件系统(Virtual Kernel File Systems)，这个东东是跟内核通信的一个途径。 执行下面的命令，来建立文件系统的挂载点： mkdir - pv $ LFS / { dev , proc , sys } 然后，建立几个必要的设备文件， mknod - m 600 $ LFS / dev / console c 5 1 mknod - m 666 $ LFS / dev / null c 1 3 青蛙准备用udev来管理设备文件，所以只建立这两个文件就够了， 其他文件udev会在系统启动的时候自动创建。 现在udev模块在glinux上还没有安装， 所以暂时用 mount --bind 命令将宿主系统的/dev目录镜像到glinux的目录结构里来： mount - v --bind /dev $LFS/dev 把几个重要的虚拟文件系统都挂在到glinux的目录上去： mount - vt devpts devpts $ LFS / dev / pts mount - vt tmpfs shm $ LFS / dev / shm mount - vt proc proc $ LFS / proc mount - vt sysfs sysfs $ LFS / sys 以上几个步骤在每次重新chroot以后都要执行一遍。 上面的步骤都完成，历史性的时刻就要来了：chroot进入glinux。 chroot \"$LFS\" / tools / bin / env - i HOME =/ root TERM = \"$TERM\" PS1 = 'u:w$ ' \\ PATH =/ bin : / usr / bin : / sbin : / usr / sbin : / tools / bin / tools / bin / bash --login +h 看到命令提示符在喊\"I have no name!\"了么？ 如果看到它喊了，就说明chroot成功了 :) 进入新系统的第一件事就是要建立glinux的目录结构了，关于linux的目录结构， linuxfans 上面有 一篇文章介绍的非常详细 ，青蛙执行以下命令来建立一个完整的目录结构： mkdir - pv / { bin , boot , etc / opt , home , lib , mnt , opt } mkdir - pv / { media / { floppy , cdrom }, sbin , srv , var } install - dv - m 0750 / root install - dv - m 1777 / tmp / var / tmp mkdir - pv / usr / {, local / }{ bin , include , lib , sbin , src } mkdir - pv / usr / {, local / } share / { doc , info , locale , man } mkdir - v / usr / {, local / } share / { misc , terminfo , zoneinfo } mkdir - pv / usr / {, local / } share / man / man { 1 .. 8 } for dir in / usr / usr / local ; do ln - sv share / { man , doc , info } $d ir done mkdir - v / var / { lock , log , mail , run , spool } mkdir - pv / var / { opt , cache , lib / { misc , locate }, local } 然后，把/tools/目录下的一些文件链接到chroot环境对应的目录下： ln - sv / tools / bin / { bash , cat , echo , grep , pwd , stty } / bin ln - sv / tools / bin / perl / usr / bin ln - sv / tools / lib / libgcc_s . so { ,. 1 } / usr / lib ln - sv / tools / lib / libstdc ++ . so { ,. 6 } / usr / lib ln - sv bash / bin / sh 建立一个/etc/mtab文件： touch / etc / mtab 建立/etc/passwd文件和/etc/group文件： # cat > / etc / passwd << \"EOF\" root : x : 0 : 0 : root : / root : / bin / bash nobody : x : 99 : 99 : Unprivileged User : / dev / null : / bin / false EOF # cat > / etc / group << \"EOF\" root : x : 0 : bin : x : 1 : sys : x : 2 : kmem : x : 3 : tty : x : 4 : tape : x : 5 : daemon : x : 6 : floppy : x : 7 : disk : x : 8 : lp : x : 9 : dialout : x : 10 : audio : x : 11 : video : x : 12 : utmp : x : 13 : usb : x : 14 : cdrom : x : 15 : mail : x : 34 : nogroup : x : 99 : EOF 然后重新运行一次bash，让bash不再喊\"I have no name!\" exec / tools / bin / bash -- login + h 接下来再建立一些要用到的log文件： touch / var / run / utmp / var / log / { btmp , lastlog , wtmp } chgrp - v utmp / var / run / utmp / var / log / lastlog chmod - v 664 / var / run / utmp / var / log / lastlog 到这里，glinux的目录结构基本上搞定了，下面我们就可以制作内核跟busybox了。","tags":"Linux","url":"2008/03/glinux-setup-build-directory/","loc":"2008/03/glinux-setup-build-directory/"},{"title":"glinux开发摘要(1)--编译环境制作","text":"在uty同学的积极鼓励下，青蛙开始了glinux下一个版本的制作 （关于glinux的历史，欢迎回顾青蛙从前的日志）。 一开始，青蛙准备利用debian现成的编译环境， 但是后来突然想自己构建一个工具链比较好。 工具稳定下来，做出来的东西才比较有保障。 于是，青蛙从新拾起lfs，开始第二轮lfs征程， 不过这次lfs只做三分之一，青蛙的目标就是：lfs6.3的Toolschain。 具体操作过程没啥好说的，简单的step by step就好， 但是在制作过程中，遇到了几个bug （可能也算不上bug，可能是青蛙系统的原因）。 这第一个，就是在glibc-2.5.1这步，会遇到下面这个错误： mawk : scripts / gen - sorted . awk : line 19 : regular expression compile failed ( bad class -- [], [&#94;] or [) /[&#94; mawk : scripts / gen - sorted . awk : line 19 : syntax error at or near ] mawk : scripts /gen-sorted.awk: line 19: runaway regular expression / , \"\" , subd ... 再往上翻还有这么一句： > mawk : scripts / gen - sorted . awk : line 19 : syntax error at or near ] 拿google一划拉，发现这个错误是因为青蛙系统上用了mawk的问题，据说换用gawk可以解决。 在babble.com上面 有人给出了一个patch ，很简单，给三个地方加个\"\"就ok了。 但是这个patch是给glibc2.7用的，在lfs6.3里带的glibc2.5.1里面没法直接用。 青蛙按图索骥，改了这个gen-sorted.awk，就没有上头那些错误了。 虽说一个补丁可以解决这个问题，但是 有前辈告诉我们 ，lfs里面的用的都是awk的脚本，如果用mawk很有可能不会有正确的结果，所以建议大家还是安装gawk的好。 gawk源码 在这里下载 ，debian系的系统只需要 aptitude install gawk 就好了。 其他发行版要注意检查 /etc/alternatives/awk 是不是正确指向了gawk。 （顺路说一句，cpu在卖力的cc的时候正好可以过来写blog，真是很不错，可以随时把过程记录下来 :p） 第二个错误是在glibc2.5.1的make check过程中： / tools / bin / ld : cannot find - lstdc ++ collect2 : ld returned 1 exit status make [ 2 ]: *** [ / mnt / lfs / sources / glibc - build / nptl / tst - cancel24 ] Error 1 make [ 2 ]: Target ` tests ' not remade because of errors. make [ 1 ]: *** [ nptl / tests ] Error 2 make [ 1 ]: Target ` check ' not remade because of errors. make : *** [ check ] Error 2 青蛙没有找到这个错误的原因，大概就像lfs文档里说的， 第一次编译lfs跟宿主系统依赖关系太大的原因造成的。 第三个错误发生在bash3.2的make过程中， 它会提示没有找到yacc这个程序，解决方法很简单，通过apt装上就好了。 到这里，工具链的制作就完成了，下一步就可以制作系统的目录结构并编译内核了。","tags":"Linux","url":"2008/03/glinux-setup-compile-environment/","loc":"2008/03/glinux-setup-compile-environment/"},{"title":"网络协议学习笔记（1） -- DNS基础知识","text":"---下列 RFC 包含用来设计和实施 DNS 服务器和客户端服务的规范： RFC 标题 1034 域名 - 概念和工具 1035 域名 - 实现和规范 1123 Internet 主机 - 应用和支持的要求 1886 支持 IP 版本 6 的 DNS 扩展名 1995 DNS 中的增量区域传输 1996 提示通知区域更改的机制 (DNS NOTIFY) 2136 域名系统中的动态更新 (DNS UPDATE) 2181 对 DNS 规范的说明 2308 DNS 查询的负缓存 (DNS NCACHE) 2535 域名系统安全扩展 (DNSSEC) 2671 DNS 的扩展机制 (EDNS0) 2782 指定服务位置的 DNS RR (DNS SRV) 2930 DNS 的密钥建立 (TKEY RR) 3645 DNS (GSS-TSIG) 密钥事务身分验证的通用安全服务算法 3646 IPv6 (DHCPv6) 动态主机配置协议的 DNS 配置选项","tags":"Networking","url":"2008/03/network-protocol-learning-notes-1-basic-knowledge-of-dns/","loc":"2008/03/network-protocol-learning-notes-1-basic-knowledge-of-dns/"},{"title":"历经坎坷，安装VMWARE6","text":"青蛙被vmware郁闷了整整一晚上，遇到问题无数， google了一大把关键字，看了一大叠邮件列表， 终于把它在2.6.24内核上给装上了。 赶紧写下来，免得以后遇到类似的问题再抓瞎。 （请注意青蛙给出命令的提示符，$表示不要求root权限，#表示必须用root权限执行） 到 http://www.vmware.com/download/ws/ 这里vmware6的安装包下载回来，总共有200多M。 下载安装包的同时，还需要准备一些包： # aptitude install linux-source gcc-4.1 g++-4.1 libncurses5-dev 这些是linux源码包，还有gcc跟g++，待会编译模块会用到。 解压vmware6的安装文件 $ tar zxvf VMware-workstation-6.0.2-59824.i386.tar.gz 。 # cd vmware-distrib && ./vmware-install.pl 。一路回车，到提示是否执行 /usr/bin/vmware-config.pl 这步时选择no。 # cd /usr/src && tar jxvf linux-source-2.6.24.tar.bz2 && ln -s linux-source-2.6.24 linux 。 # cd linux && make menuconfig ，在 General setup -> Local version - append to kernel release 选项中填入正在运行内核的子版本号（例如， 青蛙的内核版本为2.6.24-1-686，那么就在这里填入-1-686， 在这里青蛙困扰了好久，这回终于知道怎么写这个版本号了）, 然后保存退出，执行 # make prepare 。 在 这里 （ 这里 和 这里 也分别有下载）下载vmware-any-any-update-116.tgz这个补丁。 并解压： $ tar zxvf vmware-any-any-update-116.tgz ，然后 # cd vmware-any-any-update116 &&./runme.pl ，当询问是否运行vmware-config.pl的时候，选择yes。 （如果以上步骤执行正确，到这里应该能正确的编译vmware需要的各种模块了， 如果出错，请google错误信息，一般都有结果的。） update:2008-03-18. 今天青蛙再次在2.6.24内核上面安装vmware，编译模块时又出现了下面的错误信息： / bin / sh : scripts / genksyms / genksyms : 没有那个文件或目录 make [ 2 ]: *** [ / tmp / vmware - config2 / vmmon - only / linux / driver . o ] 错误 1 make [ 1 ]: *** [ _module_ / tmp / vmware - config2 / vmmon - only ] 错误 2 make [ 1 ]: Leaving directory `/ usr / src / linux - source - 2 . 6 . 24 ' make: *** [vmmon.ko] 错误 2 make: Leaving directory `/tmp/vmware-config2/vmmon-only' Unable to build the vmmon module . 青蛙在源码目录执行了一下#make all，把genksyms这个模块编译一下就好了，真是一个很诡异的问题。 接下来就是配置虚拟网卡，按照自己的爱好配置就可以了。 这一切都完成以后，会有一长串的许可协议冒出来，到最后输入yes就行了。 到这里，vmware就算完全安装完毕了，在gnome的菜单里找到vmware workstation运行之，然后输入序列号，就可以安装虚拟系统了。 至于序列号，google上是，一抓一大把，青蛙就不提供了。 祝大家玩的愉快。 :smile: 文中提到的vmware-any-any-update-116.tgz补丁的下载： vmware-any-any-update-116.tgz (vmware-any-any-update-116.tgz) 参考文档： http://blog.creonfx.com/linux/how-to-install-vmware-player-workstation-on-2624-kernel http://linuxtoy.org/archives/vmware-and-kernel-2624.html http://linux.bloghome.cn/posts/159172.html","tags":"Linux","url":"2008/03/vmware6-installation-in-2-6-24-kernel/","loc":"2008/03/vmware6-installation-in-2-6-24-kernel/"},{"title":"修改系统时间引起sudo罢工的解决办法","text":"青蛙今天使用sudo之后，把系统时间往回调了几小时， 然后sudo就罢工了，提示下面的信息： sudo: timestamp too far in the future 改时间竟然还能改出毛病，这个sudo真是太fz了。 青蛙拿着这个出错信息一google，发现了俩解决方法。 第一个，不黄很暴力，用root权限删除/var/run/sudo目录。 第二个，执行sudo -k，这个命令是用来清除sudo的时间戳， 下次执行sudo的时候它会跟你重新要密码。","tags":"Linux","url":"2008/03/solution-of-system-time-changes-cause-sudo-error/","loc":"2008/03/solution-of-system-time-changes-cause-sudo-error/"},{"title":"pidgin中群名称变为NULL的解决办法","text":"前阵子pidgin从2.x版本升级到了2.3.1以后， 青蛙的QQ的群名称就全部变成了NULL， 然后所有群的消息都跑到了一起，看的我眼花缭乱。 于是青蛙就眼巴巴的等着pidgin的升级。 这不，它终于升级到了2.4.0了，结果这个问题还是没改！ 看来老外是靠不住的，只能靠自己了。 青蛙拿起google一划拉，还真找到点东西。 这不， Linuxsir上的linuxahah同学说 ，这是因为死TX修改了协议导致的，并且放出了一个补丁。 但是这个补丁需要打到pidgin的源码里面重新编译，鉴于青蛙前N次编译pidgin的结果都是失败而告终，这个方法还是放弃了。 于是青蛙继续google，发现 Linuxsir的marklf大牛说 ，这个问题还是因为pidgin中的libqq.so引起的， 只要用以前版本的libqq.so替换现在的版本就可以了。 这个方法很好很强大，只要找到2.x版本的libqq.so文件就，然后把它复制到/usr/lib/purple-2/就可以了。 困扰了青蛙好久的问题解决了，终于可以开心的聊QQ了 :D 更新： [2008-03-02 11:33] 放上日志里提到的补丁文件和libqq.so。 qq patch for pidgin 2.3.1 (pidgin-2_3_1-qq_tar.bz2) libqq.so in pidgin 2.2.2 (libqq-2_2_2.zip) 补丁文件需要解压到pidgin的源码目录下，然后用 patch -p1 < xxx.patch 来打源码补丁。大家各取所需吧。","tags":"Linux","url":"2008/03/solution-of-qq-null-group-name-in-pidgin/","loc":"2008/03/solution-of-qq-null-group-name-in-pidgin/"},{"title":"陷入迷茫","text":"过了一个年，青蛙又长了一岁。 但是年过完了，青蛙却处于一种混沌状态，不知道自己应该干点什么，好不容易想做点事情，又没法专心。 想更新blog想了很久，找到几个有趣的东西想写，但是就是没法静下心来写一篇日志。 难道是一个假期把心放散了？ 不能保持这种状况，要静下心，踏踏实实做点事情了！","tags":"Misc","url":"2008/03/my-mind-deep-into-confusion/","loc":"2008/03/my-mind-deep-into-confusion/"},{"title":"年关已过，正式开始工作","text":"终于过完年了。 在家闲了10多天，都快闲出毛病了。 明天，开始上班。 新的一年，新的起点。加油工作！","tags":"Misc","url":"2008/02/year-has-passed-and-formally-work-begin/","loc":"2008/02/year-has-passed-and-formally-work-begin/"},{"title":"鼠年大吉","text":"","tags":"Pictures","url":"2008/02/happy-spring-festival-2008/","loc":"2008/02/happy-spring-festival-2008/"},{"title":"在线拼音输入法","text":"dict.cn的在线拼音输入法，实在是居家旅行，杀人越货，聊天泡妞必备。 要使用，请猛击 http://dict.cn/ime/","tags":"Misc","url":"2008/02/online-pinyin-input-method/","loc":"2008/02/online-pinyin-input-method/"},{"title":"KDE：跨越Linux、Windows和Mac OS X的桌面环境","text":"KDE，这个Linux/Unix下华丽丽的桌面环境，正在走向Windows和Mac OS X。 一些核心的KDE程序，还有其他重要的应用软件，例如KOffice和Amarok，已经开始向这两个平台移植。 这些成就除了因为KDE4的新特性，例如Phonon和Solid，还因为 Trolltech在Qt4的windows版本中也采用了GPL许可 。大家都知道，Qt使用双许可证，对于开源软件的开发可以使用GPL许可证，对于专有软件就需要用商业许可来授权。 但是，在Qt以前的版本中，只有Mac OS X和Linux/X11版本才有GPL许可。 这次伴随着Qt4的发布，windows版本的Qt也终于可以使用GPL许可证了。这个变化最终打开了开源的KDE应用程序通向windows的大门。 当然，KDE开发社区使用 CMake 来替代Autotools也是使KDE走向这三大系统的一个重要原因。 Windows下的KDE 现在（其实是从1月22号起）， 从KDE的镜像站点 中就能下载到二进制的Windows版本的KDE环境了。从 这里 可以下载到一个安装程序，用户可以通过这个小程序选择自己需要的KDE包。 这个小程序可以自动解决包依赖问题，下载并安装需要的包。 现在windows版本的KDE看起来更像是mingw的一个超集，它里面包含了很多mingw的应用程序， 例如gcc、gdb、tar、patch等等。 再加上KDE自身的应用程序，就构成了现在的windows版KDE。 青蛙在自己的机器上安装了一下，简单介绍一下安装过程。 结果装上以后所有的程序都没法执行，提示缺少libkdecore.dll文件。 把所有的包装上也没有这个文件，看来这应该是个bug了， 难道是跟青蛙只选择了MinGW的文件有关？ 这样进一步的测试也就没法进行了。 只好等待它的新版本了。","tags":"Linux","url":"2008/01/kde-beyond-linux-windows-and-mac-os-x-desktop-environment/","loc":"2008/01/kde-beyond-linux-windows-and-mac-os-x-desktop-environment/"},{"title":"Linux kernel 2.6.24 发布","text":"嗯，两句话。 第一，Linux内核2.6系列最新稳定版2.6.24正式发布。 第二，不知道在 这份5.7M的Changelog 里面，包不包含修复vmware6.0无法安装这个错误的记录。","tags":"Linux","url":"2008/01/linux-kernel-2-6-24-released/","loc":"2008/01/linux-kernel-2-6-24-released/"},{"title":"吉林大学校园网的那些事","text":"今天倒腾自己的blog，发现还有这么一篇没写完的东东扔在那里。这篇东西应该是青蛙大四的时候写下的，但是只写到第三部分，而且里面有些说法应该是不对的。今天给它补充完整。希望看到的同学多给青蛙挑挑错，在这篇文章的基础上整理出一个吉大网络近代史。 好了，下面是正文。 嗯,现在吉大的校园网全面抽风中,校内的服务基本上是崩溃了.趁这个时间说说我所经历的校园网吧. 我计划将我所见到的吉大校园网划分为这么几个时代: 教育网的黄金时代 电信网时代 BT时代 时常抽风时代 由于青蛙的时空观错乱,上面有些时代的划分可能有错误,期待有人能给我补上具体时间. 首先还是说一下吉大校园网的结构. 因为吉大有很多个校区,校区之间就用双路光纤互连,每个校区用7609作为核心,使用光纤向下连接各个区域的4006,然后4006再用光纤连接区域里面的各个楼,这就是所谓的光纤到楼了.然后各个楼的主交换机基本上都是3500系列,再向下连接就是用双绞线了,先是千兆线路连接到楼内各个机房,然后机房内交换机(大概一个机房5台左右)用级联的方式相连,这些机房内的交换机再向下就是用百兆线连接用户的电脑了.这个结构自从我上学开始,基本上没有变动,有的也是核心层的小变化. （这个拓扑到后来自然是改了的，据说取消了4006这一层，路由全部到核心的7609上来做了。但是具体情况，青蛙就不知道了，还需要内部人士来确认。） 1.教育网的黄金时代 这个时代,教育网应该是走在时代的前端,因为那个时候ADSL跟小区宽带远远没有现在普及,速度也跟现在差的很远,于是我竟然以能有这么好的教育网而骄傲. 那个时候还没有像现在这么多的p2p文件交换方式,多的也就是ftp或者http站点,校内有相当多的ftp联盟,视频,动画,游戏这些都有专门的联盟来作.于是就成天挂在某个ftp上下些电影啦,游戏啦.这些ftp大多都限速,每ip在100k上下.偶那时候还是忍受着一个8G的小硬盘,经常是下来某个东西,赶紧看完或者玩完,然后接着去下.后来这些ftp联盟大多都销声匿迹了,据我知道至今仅存了功夫茶联盟的G1还在孜孜不倦的为大家贡献着电影. 当时教育网东北到北京的出口ms还是2条155M线路,但是去公共网上下东西还是飞快的,还记得当时最原意做的事情就是去PCHOME测试连接速度,通常都能达到1M左右.一次去长春的某个站点下载一个游戏,将近2G的游戏,不到半个小时就下载回来.这个速度还是相当赞的. 后来, 教育网内的学校多了,吉大的学生多了,入网电脑也多了,教育网东北出口的瓶颈就显现了出来,经常是打开一个公共网的网页要好半天.据说那时候东北的学校一直在跟教育网要出口带宽,结果先是加到4条155M,然后再是增加一条1G线路,但是都很快的被占满.就有了吉大校园网的下一个时代. 趁半夜去NIC版查了一下,换电信网主要是于是由于cernet对吉大限速引起: 长春到沈阳仅有两条155M线路，其中多数带宽被吉林大学占用，从而引起了其它高校的不满，cernet开始对吉林大学限速，限定在180M，导致吉林大学出口带宽严重不足，引起师生的不满。 2.电信时代 那时候网络中心跟学校申请,拿出据说是1千万RMB,跟中国电信租用了1kMB的带宽.于是吉大校园网的黄金时代来临了. 网络中心在核心加了一个路由,去教育网的连接就走教育网,去公网的就从电信出口NAT转发,这样两面的速度都相当理想.应该是这个时代后期,教育网东北出口加到了2.5G. 由于有直接的公网出口,所以网络游戏开始大面积风行,学校附近的网吧开始萧条. 那时候中国电信刚刚进入东北市场,网络铺设还不完善,经常出现某某地方的光纤断掉的情况,也没有备份线路,就得换回教育网用一阵子.那时候拿感觉,真是爬行. 当然换了电信线路也不是所有人都高兴的.因为在出口有NAT,所以公网上有很多ftp站点都没法登录了.特别是那些在外面有自己空间的人,一年半载的没法ftp登录自己的空间.于是这些人就经常的去NIC版骂街. 再后来,网络中心发现中国电信没有按合同开足1G的带宽,而是做了限速.先限定在360M内,后提高至400M.于是网络中心不干了,停止了跟NIC的合作,全部换回了教育网. 3.BT时代 BT是哪年开始流行的我就不清楚了,应该是学校还用电信出口的时候就有了.BT在吉大开始流传开来都是5Q的功劳,一开始还没有人管BT,后来网络中心发现电信出口内大部分的流量都被bt占用了,于是开始想尽办法封堵BT. 再后来,学校内出现了几个BT站点.大家可以在校园网里用bt了.校园网的带宽还是足够的,于是bt开始在吉大广泛的流传开来. 最开始的应该就是微盟了，这个BT站是由微电脑爱好者联盟（记不大清楚了，似乎是这个名字）发起并维护的。开始的时候微盟相当火爆，再加上网络中心的官方支持，发展的十分迅速，至少周围的同学都知道由这么一个微盟。后来，微盟内部出现了问题（具体问题青蛙就不知道了），开始衰落。最后，终于关站了事。虽然后来有一段时间又开了一段时间，但是那时候吉大燕子盛行，最后也只是不了了之。 这个吉大燕子，只要是那段时间（这段时间估计会延续到现在）的吉大学生，几乎没有人不知道了。据说燕子最开始就是从微盟里面分出来的，由于有商业支持，所以发展的相当快。一开始，燕子就抱定了做商业站点的想法，一切向赚钱发展，页首页脚都是广告，外带中间插播。对于贫瘠的校园娱乐生活，燕子的贡献是非常大的。青蛙周围的同学，每天自习回寝室，第一件事就是上燕子上看看。甚至，有些人毕业了，要找些视频或者游戏之类，还会去燕子。 4.时常抽风时代 （青蛙忘记当初为啥准备写这么一段，因为抽风是始终贯穿吉大校园网历史的，所以这个时代有起点，但是不会有终点。） 5.补充 青蛙毕竟离开学校久了，而且大四其间，电脑运回家，没有继续体验吉大网络的机会。按照吉大网络迅猛的发展速度，这其间又产生了不少的时代。所以，青蛙希望各位同学能帮青蛙补充上这段空白 :D 。","tags":"Misc","url":"2008/01/history-of-network-in-jlu/","loc":"2008/01/history-of-network-in-jlu/"},{"title":"Debian里的配置文件：网卡配置/etc/network/interfaces（1）","text":"青蛙准备写一个系列文章，介绍一些Debian/Ubuntu里面常用的配置文件。 当然，Linux系统中的配置文件多如牛毛，青蛙见过配过的也只是寥寥几个。 不过，青蛙会把配置过的配置文件尽量详细的介绍一下， 一是方便自己以后查阅，二来也是为广大Debianer做贡献了。 下面开始正文。 话说Debian系的网卡配置跟Redhat系很不一样， Redhat是放在/etc/sysconfig/network-scripts目录下面的一大堆文件里面， 要修改？你一个一个文件来过吧。 Debian系的则是存在/etc/network/interfaces文件里面， 无论有多少块网卡，统统扔在这个文件里。下面就来看一下这个文件的内容。 首先，一个基本的配置大概是下面这个样子： auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static address 192 . 168 . 0 . 42 network 192 . 168 . 0 . 0 netmask 255 . 255 . 255 . 0 broadcast 192 . 168 . 0 . 255 gateway 192 . 168 . 0 . 1 上面的配置中， 第1行跟第5行说明lo接口跟eth0接口会在系统启动时被自动配置； 第2行将lo接口设置为一个本地回环（loopback）地址； 第6行指出eth0接口具有一个静态的（static）IP配置； 第7行-第11行分别设置eth0接口的ip、网络号、掩码、广播地址和网关。 再来看一个更复杂点的： auto eth0 iface eth0 inet static address 192 . 168 . 1 . 42 network 192 . 168 . 1 . 0 netmask 255 . 255 . 255 . 128 broadcast 192 . 168 . 1 . 0 up route add - net 192 . 168 . 1 . 128 netmask 255 . 255 . 255 . 128 gw 192 . 168 . 1 . 2 up route add default gw 192 . 168 . 1 . 200 down route del default gw 192 . 168 . 1 . 200 down route del - net 192 . 168 . 1 . 128 netmask 255 . 255 . 255 . 128 gw 192 . 168 . 1 . 2 这次，有了一个复杂一些的掩码，和一个比较奇怪的广播地址。 还有就是增加的接口启用、禁用时的路由设置； 第7行和8行配置的左右是在接口启用的时候，添加一条静态路由和一个缺省路由； 第9行和10行会在接口禁用的时候，删掉这两条路由配置。 至于配置路由的写法，仔细看，它就是route命令嘛。 继续，下面是一个物理网卡上多个接口的配置方法： auto eth0 eth0 : 1 iface eth0 inet static address 192 . 168 . 0 . 100 network 192 . 168 . 0 . 0 netmask 255 . 255 . 255 . 0 broadcast 192 . 168 . 0 . 255 gateway 192 . 168 . 0 . 1 iface eth0 : 1 inet static address 192 . 168 . 0 . 200 network 192 . 168 . 0 . 0 netmask 255 . 255 . 255 . 0 8行到11行在eth0上配置了另外一个地址， 这种配置方法在配置一块网卡多个地址的时候很常见：有几个地址就配置几个接口。 冒号后面的数字可以随便写的，只要几个配置的名字不重复就可以。 下面是pre-up和post-down命令时间。 这是一组命令（pre-up、up、post-up、pre-down、down、post-down），分别定义在对应的时刻需要执行的命令。 auto eth0 iface eth0 inet dhcp pre - up [ - f / etc / network / local - network - ok ] 第3行会在激活eth0之前检查/etc/network/local-network-ok文件是否存在，如果不存在，则不会激活eth0。 再更进一步的例子： auto eth0 eth1 iface eth0 inet static address 192 . 168 . 42 . 1 netmask 255 . 255 . 255 . 0 pre - up / path / to / check - mac - address . sh eth0 11 : 22 : 33 : 44 : 55 : 66 pre - up / usr / local / sbin / enable - masq iface eth1 inet dhcp pre - up / path / to / check - mac - address . sh eth1 AA : BB : CC : DD : EE : FF pre - up / usr / local / sbin / firewall 第5行和第8行中，check-mac-address.sh放在/usr/share/doc/ifupdown/examples/目录中， 使用的时候需要给它加上可执行权限。 这两行命令会检测两块网卡的MAC地址是否为11:22:33:44:55:66和AA:BB:CC:DD:EE:FF，如果正确，则启用网卡。 如果MAC地址错误，就不会启用这两块网卡。 第6行和第9行是假定在这两块网卡上分别执行的命令，你可以把它们替换成你想要的任何玩意 ：） 手册上说，这种方法主要是用来检测两块网卡的MAC地址交换（If their MAC addresses get swapped）， 其实就是两块网卡名互换了，这种情况在debian系统上再常见不过了， 主要是因为内核识别网卡的顺序发生了变化。 （ 更新： 2013-05-19 自从有了udev，这种情况应该比较少发生了。 ） 这个问题可以用下面的这种方法来避免。 auto eth0 eth1 mapping eth0 eth1 script / path / to / get - mac - address . sh map 11 : 22 : 33 : 44 : 55 : 66 lan map AA : BB : CC : DD : EE : FF internet iface lan inet static address 192 . 168 . 42 . 1 netmask 255 . 255 . 255 . 0 pre - up / usr / local / sbin / enable - masq $ IFACE iface internet inet dhcp pre - up / usr / local / sbin / firewall $ IFACE 第3行中的get-mac-address.sh也在/usr/share/doc/ifupdown/examples/目录里， 也同样要加可执行权限。 这个脚本的作用，就是获得每块网卡的MAC地址。 这段配置首先配置了两个逻辑接口（这个名词的定义请参见[1]）lan和internet， 然后根据网卡的MAC地址，将逻辑接口映射（mapped）到物理接口上去。 再来看下面这段配置： auto eth0 iface eth0 inet manual up ifconfig $ IFACE 0 . 0 . 0 . 0 up up / usr / local / bin / myconfigscript down ifconfig $ IFACE down 这段配置只是启用一个网卡，但是ifupdown不对这个网卡设置任何ip，而是由外部程序来设置ip。 最后一段配置，这段配置启用了网卡的混杂模式，用来当监听接口。 auto eth0 iface eth0 inet manual up ifconfig $ IFACE 0 . 0 . 0 . 0 up up ip link set $ IFACE promisc on down ip link set $ IFACE promisc off down ifconfig $ IFACE down 好了，interfaces中对于以太网卡的配置基本上介绍完了。 下一篇，青蛙打算介绍interfaces中更进一步的配置，例如ppp、vpn和无线网络等等，敬请期待 :p 更新： 2013-05-19 这个系列没有继续下去确实很可惜。 不过5年过去了，Linux系统的网络配置发生了巨大的变化。 所以，重新再写一个关于Linux的系统配置的文章对于SysAdmin 来说还是有意义的。那么，就让青蛙找时间继续吧。 Reference: [1] debian参考手册","tags":"Linux","url":"2008/01/config-file-in-debian-interfaces-1/","loc":"2008/01/config-file-in-debian-interfaces-1/"},{"title":"Dreamhost主机上的用户数","text":"ssh到我的DH主机上总感觉慢慢的，很不爽。 今天在这里发现了下面两条命令，可以分别查看主机上ssh的用户数和总用户数。 $ grep -i /home/ /etc/passwd | wc -l $ grep -i /home/ /etc/passwd | grep /bin/.*sh$ | wc -l 查了一下，我的空间所在的这个主机上有108个ssh帐户，379个ftp/ssh用户。 vmstat看下负载，真的是够高。 procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu---- r b swpd free buff cache si so bi bo in cs us sy id wa 0 0 41968 213368 66372 2950740 0 1 4 9 1 3 27 7 66 0","tags":"Site","url":"2008/01/number-of-domains-on-one-dreamhost-server/","loc":"2008/01/number-of-domains-on-one-dreamhost-server/"},{"title":"从三到万：超级人造人技术","text":"哦哦，我是标题党么？ 下面这段视频， Richard Hammond 为首的几位哥们只用了三个人和四天时间，就拍出了诺曼底登陆的场面。 比比看，跟拯救大兵瑞恩哪个更强大？","tags":"Misc","url":"2008/01/richard-hammond-presents-bloody-omaha/","loc":"2008/01/richard-hammond-presents-bloody-omaha/"},{"title":"google图片搜索的一个小bug","text":"图片里,红线框起来的内容.以前应该是个连接的,现在变成了一堆html标签.","tags":"Misc","url":"2008/01/a-bug-in-google-image-search/","loc":"2008/01/a-bug-in-google-image-search/"},{"title":"试验一下子Drivel","text":"在Linux里，找一个可以用的blog客户端可真的不是一件简单的事情。 blog客户端本来就少，能够使用 （这也仅仅保留在能正常使用而且不出现bt问题这个层次上）的就更少。 翻来覆去的试了几次，青蛙决定还是试下Drivel， 这个gnome下的小东西写几个字，简单改变下格式倒是都有了， 但是像windows live writer那样可以在客户端里修改作者，添加标签， 设置trackback地址之类的都没有。真是简陋的够可以的。 青蛙决定先试用一段时间。 当然，还是要继续寻找更强大的blog客户端的。 如果能把live writer移植到linux上来就好啦。：p","tags":"Site","url":"2008/01/try-drivel/","loc":"2008/01/try-drivel/"},{"title":"首部Google Phone亮相CES 2008","text":"真没想到第一部Google Phone竟然是国人做出来的。 虽然只是号称的Google Phone（为啥只是号称？下面有说明），不过这还是很让人兴奋的。 这部手机型号为GW4，由启碁科技（Wistron NeWeb Corp）制造，预计今年第二季度就可以上市。 虽然现在这部手机搭载的是一个叫做MontaVista Linux 2.6的Linux系统（这就是只是\"号称\"的原因）， 但是在2008年3月的时候就会运行Google Android了。 GW4基于TI OMAP 1710芯片，处理器主频216MHz，64 MB 程序内存。 包含wifi功能，一个2.5英寸的触摸屏，一个200万像素的摄像头，还有全尺寸键盘。 它包含Opera Web 浏览器、可以与Outlook进行同步的邮件、日程表软件， MSN/Yahoo/AIM客户端， 还有Office 及 PDF 文件阅读器，和一些 Widget 如天气、股票报价等。 不过我更期望的是这些软件可以完全的换成Google的应用程序。 这部手机大概会在今年的第二季度上市，大家拭目以待吧！ 更进一步的信息，参看 PCMAG的报道 吧。更多图片在 这里 。","tags":"Mobile","url":"2008/01/first-google-phone-in-ces-2008/","loc":"2008/01/first-google-phone-in-ces-2008/"},{"title":"feed输出竟然有乱码","text":"再次测试一下，看看是字符编码的问题， 还是wordpress系统的问题，还是google reader的问题! -------------无奈的分割线----------- update: 2008-01-11 22:40 feed问题已经定位，出在Aizatto's Related Posts这个插件上， 它会截取相关日志的部分内容输出到feed里， 但是正好碰上它截取的那部分有特殊字符，所以就挂掉了。 解决办法也很简单，禁用这个插件的摘要输出功能就是了。 唉，wordpress的插件啊，好用的很多，但是真是容易出毛病!","tags":"Site","url":"2008/01/feed-output-error-2/","loc":"2008/01/feed-output-error-2/"},{"title":"新的日工资和小时工资的计算方法","text":"青蛙元旦的时候加了三天班，所以一直在合计这三天能拿到多少米。 于是上网搜了下，发现了下面这个新的计算日工资和小时工资的方法。 拿来算算，这三天赚的米用来交一个月的房租是绰绰有余了。 ------华丽的分割线，以下为转载------ 关于职工全年月平均工作时间和工资折算问题的通知 劳社部发[2008]3号 各省、自治区、直辖市劳动和社会保障厅（局）： 根据《全国年节及纪念日放假办法》（国务院令第513号）的规定， 全体公民的节日假期由原来的10天增设为11天。 据此，职工全年月平均制度工作天数和工资折算办法分别调整如下： 一、制度工作时间的计算 年工作日：365天-104天（休息日）-11天（法定节假日）＝250天 季工作日：250天÷4季＝62。5天/季 月工作日：250天÷12月＝20。83天/月 工作小时数的计算：以月、季、年的工作日乘以每日的8小时。 二、日工资、小时工资的折算 按照《劳动法》第五十一条的规定，法定节假日用人单位应当依法支付工资， 即折算日工资、小时工资时不剔除国家规定的11天法定节假日。 据此，日工资、小时工资的折算为： 日工资：月工资收入÷月计薪天数 小时工资：月工资收入÷（月计薪天数×8小时）。 月计薪天数＝（365天-104天）÷12月＝21。75天 三、2000年3月17日劳动保障部发布的 《关于职工全年月平均工作时间和工资折算问题的通知》（劳社部发[2000]8号）同时废止。 劳动和社会保障部 二○○八年一月三日","tags":"Misc","url":"2008/01/new-method-of-calculating-daily-wage-and-hourly-wage/","loc":"2008/01/new-method-of-calculating-daily-wage-and-hourly-wage/"},{"title":"How do I configure scalable multicasting on Helix Server","text":"原文地址在 这里 我把它翻译成了中文,方便查看。 Helix Server可以通过web方式的管理工具配置为使用可扩展多播，这篇文档只关注可扩展多播功能的配置。 关于Helix Server功能的完整细节可以在管理向导中找到。 Helix Server 管理向导：（第8章 多播） http://www.realnetworks.com/support/docs.html 打开Helix Server的web管理界面。 点击广播分发，可扩展多播。 默认的加载点是/scalable/。RealNetworks建议你使用这个默认值，但是你可以随意更改它。 要建立一个新的频道，点击\"+\"图标，然后在\"编辑频道描述\"文本框中为这个多播连接输入一个名称。 在\"启用频道\"下拉框中选择\"是\"来启用可扩展多播。 在\"启用SAP\"下拉框中选择\"是\"来发布这个多播连接。 在\"路径\"文本框，添加要被广播发布的流名称。如果要使用所有的广播流，那么就保留默认的星号（*）。 下一步，定义可扩展多播使用的端口号和地址。 a. 在\"端口范围\"文本框，输入要使用的端口号。 （青蛙注：这个端口号有一个变态的要求，就是要以偶数端口开始，并且范围中要包含偶数个端口，例如5000-5003。） b. 在\"IP地址范围\"中，输入要使用的地址。 Helix Server使用这个地址范围中第一个可用的地址。 如果使用一个单独的地址而不是一个地址范围，在这两个文本框中输入一样的地址。 在\"生存时间\"文本框中，指出多播包可以在你的网络中传送多远。 （注：原文就这么写的，TTL每过一个路由器减1，减到0这个包就被丢弃。） 输入一个超时时间，这个时间表示一个客户端停止等待多播包或者使用交替URL之前所经过的时间（秒）。 在\"重新使用地址\"中，如果你想给在一个视频中的每个流都使用一个单独的地址，那么就选\"否\"。 如果你想在两个流中都使用一个地址，那选择\"是\"。 下一个选项是选择是否将收不到多播包的播放器转换为单播。这个功能只在使用RealNetworks的播放器时才有效。 a. 在\"转换为单播\"列表框中，如果你不想让客户端转换成单播，那么就选择\"否\"。 当播放一个高码率的节目时应该选择\"否\"，因为大量的单播流会消耗太多的带宽。如果你选择了\"否\"，可以忽略下一个文本框。 b. 要在同一个Helix Server中使备份的单播有效，保持\"交替的单播地址\"文本框是空的。 如果你想将单播转换到另外一个Helix Server上，需要填上那个服务器的地址和路径。下面就是一个例子： rtsp://helixserver.example2.com/broadcast/vivaldi.rm 如果你不想把播放器转向到一个交替流，也可以把他们指向一个web页面来输出信息， 像\"这个节目只对支持单播的RealPlayer有效。 \"在\"交替的单播地址\"文本框中，输入你的web页的URL，像下面这种： http://www.example.com/no_multicast.html （可选）下一个选项是控制是否要把客户端的统计信息记录到Helix Server、Web服务器或者不记录。 点击应用。 Helix Server就被配置为使用可扩展多播了。 可扩展多播的连接有如下形式： http://address:port/mount_point/path/file.rm.sdp ------传说中的分割线------ 这两天yupoo不知道在倒腾啥,没法传图片.青蛙只好把没图的文章发出来了.等yupoo好了再传图吧。","tags":"Linux","url":"2008/01/how-to-configure-scalable-multicasting-on-helix-server/","loc":"2008/01/how-to-configure-scalable-multicasting-on-helix-server/"},{"title":"feedsky验证码","text":"fe091327 feedsky验证.","tags":"Site","url":"2008/01/feedsky-verify-code/","loc":"2008/01/feedsky-verify-code/"},{"title":"New site is online!","text":"新年来了，我的新站点也终于可以用了。这次完全的换到了wordpress平台上，再加上新的域名： www.gfrog.net 希望也是一个全新的开始！ --------------华丽的分割线-------------- update,2008-01-05: feed输出终于正常了,倒腾了好几天,终于发现是 FeedBurner FeedSmith 插件的问题，它直接把我的feed转向到feedburner去了， 但是feedburner又被伟大的GFW盾了，所以每次访问feed都无法显示。 最后，只好去掉这个插件了，让我的feed裸奔吧。 现在页面左上角那个feed的连接是本站的直接输出 https://www.gfrog.net/feed/ 大家还可以通过feedburner和feedsky来订阅.","tags":"Site","url":"2008/01/new-site-is-online/","loc":"2008/01/new-site-is-online/"},{"title":"传说中的QQ,传说中的hiweed兼容层","text":"今天有人在irc上说起了QQ,大家七嘴八舌议论现在linux的各路QQ客户端. Shely老大给了 ubuntu.org.cn上面的一个帖子 .偶照着上头做了下,真的搞定了QQ. 以下为引用: 先执行下代码: sudo sed -ie '/GBK/,/&#94;}/d' /usr/share/X11/locale/zh_CN.UTF-8/XLC_LOCALE 然后下载 http://linuxfire.com.cn/~huahua/zero/qq2007beta1kb5_0.0.2007_x86.tgz http://211.92.88.40/~huahua/zero/qq2007beta1kb5_0.0.2007_x86.tgz ( 或者 qq2007beta1kb5_0.0.2007_x6.tgz: http://files.filefront.com//;8150970;;/ ) 解压，执行里边的 qq2007beta1kb5 就打开 qq 了 ------------------ 如果您的 scim 在里边不上字的话，请在 scim 首选项-》全局设置 里 去掉 \"将预编辑字符串嵌入到客户窗口中\" 经过我一天的试用,QQ运行状态良好.为了QQ客户端郁闷的各位,有这个方法好了.","tags":"Linux","url":"2007/07/qq-in-hiweed-compatible-layer/","loc":"2007/07/qq-in-hiweed-compatible-layer/"},{"title":"郁闷了2天的U盘问题,竟然是因为内核模块","text":"真的真的被debian打败了,U盘插到机器上以后,死活就是认不出来,dmesg上面有消息说插上了,但是是下面这样的消息: Initializing USB Mass Storage driver... usbcore: registered new interface driver usb-storage USB Mass Storage support registered. usb 4-4: new high speed USB device using ehci_hcd and address 7 ehci_hcd 0000:00:1d.7: port 4 reset error -110 hub 4-0:1.0: hub_port_status failed (err = -32) usb 4-4: new high speed USB device using ehci_hcd and address 11 usb 4-4: new high speed USB device using ehci_hcd and address 15 usb 4-4: new high speed USB device using ehci_hcd and address 18 usb 4-4: new high speed USB device using ehci_hcd and address 22 usb 4-4: new high speed USB device using ehci_hcd and address 29 usb 4-4: new high speed USB device using ehci_hcd and address 33 usb 4-4: new high speed USB device using ehci_hcd and address 40 ehci_hcd 0000:00:1d.7: port 4 reset error -110 hub 4-0:1.0: hub_port_status failed (err = -32) usb 4-4: new high speed USB device using ehci_hcd and address 59 usb 4-4: new high speed USB device using ehci_hcd and address 73 usb 4-4: new high speed USB device using ehci_hcd and address 80 ehci_hcd 0000:00:1d.7: port 4 reset error -110 hub 4-0:1.0: hub_port_status failed (err = -32) 然后lsusb根本没有反应. 于是从昨天开始就在找这个原因, 因为以前装的很多debian系统根本没这个问题, 无论是sarge还是etch. 结果这次升级到lenny就出了这么个状况. 开始走了一个很大的弯路, 因为google到有人说这个问题可能是acpi问题引起的, 我想也有可能,因为这个机器是个T40的本子. 于是想连acpi一起配好吧,于是acpid,cpufreqd一顿研究, 问题还是没好,U盘插上灯连亮都不给我亮一下. 结果今晚忽然想起来我还没搜过这个错误提示呢, 结果按上面ehci_hcd的错误提示一搜, 马上就有了结果(在 这里 ).原来挂不上U盘的原因是模块造成的. 以前就听说过这几个usb模块打架,今天就让我碰上了. 问题知道了,解决方法也很简单,root模式下执行: # rmmod ehci_hcd 然后插上U盘,盘上可爱的小绿灯又亮起来了,真开心.","tags":"Linux","url":"2007/07/linux-usb-mod-conflict/","loc":"2007/07/linux-usb-mod-conflict/"},{"title":"feed输出似乎有问题","text":"现在本播feed输出似乎一直停在说验证码的那篇日志上，问题的原因未知。 实在是懒得改了，先凑合一下，这个空间马上到期了，到时候换去wordpress。","tags":"Site","url":"2007/07/feed-output-error/","loc":"2007/07/feed-output-error/"},{"title":"关于linux下访问windows共享的问题","text":"首先，需要安装smbfs包 # aptitude install smbfs 如果没有安装这个包,挂载共享分区时会出现以下错误 smbfs: mount_data version 1919251317 is not supported. 然后,挂载windows共享的命令是 mount - t smbfs // ip / 共享名 - o username = 用户名 , password = 密码 , iocharset = utf - 8 , dmask = 777 , fmask = 777 / media / smb 说下参数, ip,共享名,就是要访问的windows共享资源了 用户名,密码,是在那个windows系统上的用户名密码. dmask=777,fmask=777, 共享分区的读写权限,这里设成777了.根据自己需要改吧. /media/smb ,共享分区挂载的本地路径. /etc/fstab的写法,在/etc/fstab里面添加如下一行: // ip / 共享名 / media / smbf smbfs defaults , username = 用户名 , password = 密码 , iocharset = utf - 8 , dmask = 777 , fmask = 777 0 1 参数意义跟用mount命令时一样. 最后,google到网上有些地方写了smbmount命令, 这个命令不知道是哪个发行版里面带的, 至少在debian里面现在没有了(现在指的是debian lenny版本), 挂载共享直接mount然后指定smbfs格式就行. ps.如果只是想在x里面查看windows共享, 只要在nautilus里面文件->连接到服务器里面,连接到一个windows共享就行了. 参考文章: 1. 一步一学Linux与Windows 共享文件Samba （v0.2b） 2. Mounting remote filesystems with smbfs (英文)","tags":"Linux","url":"2007/07/mount-windows-shared-folder-with-smbfs/","loc":"2007/07/mount-windows-shared-folder-with-smbfs/"},{"title":"fuck tnnd的新浪","text":"妈的 blog连个图片都不给看 还tm有脸叫门户","tags":"Misc","url":"2007/06/fuck-tnnd-sina-blog/","loc":"2007/06/fuck-tnnd-sina-blog/"},{"title":"gmail真是满可爱","text":"今天收到了这个所谓的PayPal Security Center 寄来的邮件. 被gmail给自动spam了. gmail竟然还能识别出来钓鱼邮件,真是太赞了.","tags":"Misc","url":"2007/06/cute-gmail/","loc":"2007/06/cute-gmail/"},{"title":"又见超强验证码","text":"a=? b=? Na2S4O6是啥？ 这个是个啥东西？","tags":"Pictures","url":"2007/06/another-verify-code/","loc":"2007/06/another-verify-code/"},{"title":"Movavi Online:在线视频转换服务","text":"下面是Q&A时间: 什么是Movavi Online? Movavi Online 是一个免费的在线视频转换服务,允许你在各种视频格式之间转换. Movavi Online都支持哪些视频格式呢? Movavi Online 支持输入以下视频格式: AVI (DivX, XVid), MPEG (1, 2, 4), MP4, 3gp, 3gp2, WMV, MOV (QT). 输出视频格式: AVI ( XVid), MPEG-4 , MPEG-2 (DVD Quality, PAL), MPEG-2 (DVD Quality, NTSC), iPod video, iPod 5G video, PSP video, 3gp, 3gp2, MPEG-4 (.mov), Flash (.flv) 我可以一次转换多少个文件呢? 现在,你可以在一次转换过程中转换5个文件. 我最多可以上传多大的文件? 你可以一次上传最多100MB大小的文件. 我能在一次转换过程中把文件转换成不同的格式么? 是的,上传的5个文件中可以设置为转换成5种不同的格式, 我可以把一个文件转换为多种文件格式么? 可以,但是不能在一次转换过程中.需要转换多次. 我怎么得到转换以后的文件呢? 文件下载链接会被寄到上传视频时填写的email地址中, 点击邮件中的链接就可以下载文件了. 这个文件在服务器上保存24小时以后会被删除. Movavi Online的地址: http://online.movavi.com/","tags":"Misc","url":"2007/06/movavi-online-video-convert/","loc":"2007/06/movavi-online-video-convert/"},{"title":"论文进度过半","text":"进度过半,但是时间就剩了3-4天了. 但是一个字也写不进去. 唉,烦","tags":"Misc","url":"2007/06/paper-process/","loc":"2007/06/paper-process/"},{"title":"来吧,让我们来Yupoo吧","text":"Flickr被阉掉了,国内的服务总跟GFW没关系了吧. 让我们来Yupoo好了. logos 由 gfrog 上传于 Yupoo .","tags":"Misc","url":"2007/06/let-us-yupoo/","loc":"2007/06/let-us-yupoo/"},{"title":"面对GFW,你准备好了么?","text":"昨天Flickr被封又引发了一次大规模批判GFW的行动, keso 在日志里fxxk GFW. 如果大家对某W有深仇大恨,那么就来这里发泄一下吧: 不过发泄完了还得继续想法跳墙是不.这里有几个办法. 使用tor之类的匿名代理软件. 例如 小众软件 推荐的 突破网络访问三剑客 还有 Java Anon Proxy .使用匿名代理的好处是可以完美访问被GFWed的各类网站, 例如维基百科,google快照,还有my opera.一次设置,然后就可以无视GFW了. 使用web代理网站. web方式的匿名代理，例如下面两个 http://www.68q.net/ 和 http://www.9i7.cn/ 还有专门针对某网站的,例如pkblogs.com就是针对blogspot的代理. 修改hosts文件. 这个只针对被关键字GFWed的网站,这种类型修改hosts文件,强制将域名解析成ip就可以访问被封掉的服务了. 例如这次针对Flickr,可以把下面两行添加到hosts文件里: farm1。static。flickr。com 68.142.213.135 farm2。static。flickr。com 68.147.123.56 (注意把。改成.哦) 使用浏览器插件.firefox上的greasemonkey跟gladder.ie7的ie7pro. greasemonkey跟ie7pro需要自己编写脚本把域名替换为ip. 例如这次 花儿开了提供了针对Flickr的脚本 .gladder是一个专门的跳墙软件,也是利用了匿名代理. 嗯,大提上就是这几种方法了.在这里还是推荐各种匿名代理软件,毕竟一次就可以搞定各种被盾掉的网站. 总之,让GFW死去吧. 参考连接: 针对Flickr,各位老大各自提供的方法: http://talk.blogbus.com/logs/5719180.html http://blog.istef.info/2007/06/08/save-flickr/ http://hi.baidu.com/binbinmath/blog/item/4e2cf21f9bbf8d62f724e446.html ps. 2007-06-09 1:00 我这里连Flickr的主页都已经上不去了,难道又是GFW的原因?","tags":"Misc","url":"2007/06/are-u-ready-face-gfw/","loc":"2007/06/are-u-ready-face-gfw/"},{"title":"'新域名启用: gfrog.info'","text":"www.gfrog.info 1.99美刀一年.一口气买了5年的. 在http://www.stargateinc.com/上购买. 上次bloggerwave发给我广告费一直没有想到怎么用,正好今天拿来买了一个域名.嘿嘿.","tags":"Site","url":"2007/06/new-domain-name-gfroginfo/","loc":"2007/06/new-domain-name-gfroginfo/"},{"title":"GFW又发飙了,Flickr被封","text":"Flickr终于被盯上了,被GFW完美的和谐掉了.现在登录Flickr,图片都变成了红叉叉. 月光博客 消息,这次竟然是用了关键字过滤的方式, 过滤的词语是farm1。static。flickr。com和farm2。static。flickr。com. 现在,Flickr上那句广告词对于国人来说完全成了空话,看来需要改成: the unsafe way to store , search , sort and share your photos. 现在用国外的服务已经丝毫没有安全感了,被和谐已经成了家常便饭. 除了选择国内的类似服务商,我们还能有什么办法... update: 邦比这里提供了几个访问Flickr的方法: http://hi.baidu.com/binbinmath/blog/item/4e2cf21f9bbf8d62f724e446.html","tags":"Misc","url":"2007/06/gfw-bans-flickr/","loc":"2007/06/gfw-bans-flickr/"},{"title":"树大招风,Dreamhost又出事故","text":"传说Dreamhost经常出事故,例如 前阵子的DNS错误 . 这次,DH又出事了.而且问题好像还很严重: 3500个DreamHost 用户FTP 帐号被黑 . 前几天还想买DH的空间来着,结果 因为支付的问题作罢 .看来实在是树大招风,大服务商也有大服务商的问题. 不过这件事情还是给我们提了个醒,这次DH的密码似乎都是被暴力破解的. 空间密码比较简单的要小心了,一定要给ftp设置一个强度比较高的密码, 这样才可以有效的防止暴破.至于密码,可以用 http://strongpasswordgenerator.com/ 来在线生成一个. ps.前几天查了一下本blog的空间使用情况,才用了区区60M, 看来还是在这个空间上老实待着吧. 而且一年85米的空间使用费用也很容易收回. 至少到现在我的feedsky的话题广告已经给我提供了一年的空间费用了 .","tags":"Misc","url":"2007/06/dreamhost-hacked/","loc":"2007/06/dreamhost-hacked/"},{"title":"股市","text":"虽然这张图片是 假的 ,但是还是很能说明问题的. 前一阵子的股市确实是暴利,似乎是个人进去都能赚到手软. 我周围的人也都琢磨着该怎么进去捞一笔.但是炒股比抢劫来钱还快么? 再看下面这张 4300点一路狂降到6月4号的3600多点,这才是股市. 满眼的绿色","tags":"Pictures","url":"2007/06/stock-market-in-china/","loc":"2007/06/stock-market-in-china/"},{"title":"'学文科的惨了: 史上最强的blog验证码'","text":"不知道这个blog是关于什么的,如果没学过极限,还真搞不定它呢.","tags":"Pictures","url":"2007/06/verify-code/","loc":"2007/06/verify-code/"},{"title":"直通旅客列车6月5日起提前10天售票","text":"以前三天两头的改预售时间实在是太烦人了,经常是按照以前的预售时间去买票的时候被告诉没开始预售或者票已经卖完了. 这次总算规定一个统一的预售时间了.不过看起来管内车还是铁路局自己定预售时间,还是得忍受经常改预售时间的痛苦. 铁道部：直通旅客列车6月5日起提前10天售票 http://news.QQ.com 2007年06月04日14:22 中国新闻网 中新网6月4日电 据中国铁道部网站消息，为更加方便旅客乘火车出行，自6月5日起，铁路火车票预售期将有所调整，所有直通旅客列车车票提前10天发售。 据了解，目前各大火车站的车票预售时间，是根据各铁路局实际情况制定的， 大多数车站提前4天售票，也有部分车站提前5天、6天或10天售票。 铁道部相关负责人称，此项措施是为了更方便旅客购票而推出的。 自6月5日开始，所有直通旅客列车车票在票额所在铁路局管内各售票窗口提前10天发售。 动车组和直达列车客票预售时间不变，仍提前20天售票；异地票预售期也仍保持提前20天发售。 所谓直通旅客列车，就是指走行距离超出一个铁路局管内的旅客列车， 这些列车一般为中长途列车。同时，在铁路局管内开行的旅客列车被称为管内列车， 这些列车一般为短途列车。 铁道部指出，管内旅客列车车票的预售期由各铁路局根据各局情况制定， 但各铁路局管内各车站预售时间要保持一致。 此外，铁道部还要求各铁路局加大营销力度，拓展销售渠道， 积极组织往返票、联程票等异地票的发售，加强售票组织管理， 为广大旅客出行提供便利。(林晓莺)","tags":"Misc","url":"2007/06/train-kicket-presell/","loc":"2007/06/train-kicket-presell/"},{"title":"Fedora 7 正式发布了","text":"消息有点迟了,Fedora 7在我们儿童节那天发布了. 新增内容已经被发的满哪都是了,我就不说了,给大家看下发行发行注记跟屏幕截图吧. 发行注记在这里: http://fedoraproject.org/release-notes/RELEASE-NOTES-zh_CN/ (中文版) http://fedoraproject.org/release-notes/RELEASE-NOTES-en_US/ (英文版) 下面是一个屏幕截图的幻灯片, 请点击这里查看 下载地址: 官方镜像列表","tags":"Linux","url":"2007/06/fedora-7-release/","loc":"2007/06/fedora-7-release/"},{"title":"转向Wordpress?","text":"最近 cbn在搞服务器合租 .正好最近我现在用的服务器时不时的抽风一下, 并且pjblog的功能实在有限,我又懒得自己动手,于是就跟着去凑了凑热闹. cbn服务器现在已经进入了付款阶段,300米一年. 服务器配置如下(摘自 花儿开了 ): 双路双核至强处理器，2G ECC 内存； 服务器位于北京酒仙桥BGP机房，也是 Google.cn 所在的机房，没有电信网通互访的问题，速度超快； 72松为我们提供技术支持和服务器管理，并进行数据备份； 服务器为 100M 共享接入，当然实际分到的带宽也就 1-3M。 每位用户提供 1G+ 磁盘空间和 10G+/month 的带宽，之所以有 + 是因为这只是个软性限制，如果您只是合理的超出，我们是允许的； LAMP 环境，WordPress 的绝佳组合； 可绑定多域名和子域名； 250人民币元左右的年费（最终要视合租人数确定）；(现在已经确定收费300米/年了.) 说实在的,这个价格跟我现在用的空间比起来实在够贵, 我当年买这个空间的时候才85一年. 说起来国内还真不见得有比这再便宜的空间了. 现在的空间前半年用起来还算可以,不过最近经常出现抽风的状况. 而且,最致命的是,现在的空间几乎没有扩展性,服务商给你什么,你就用好了. 这点让我十分不爽. 据说cbn的空间可以按照用户的需要定制安装,但是机器没正式运行以前, 什么都是未知数.只能期待它会跟说的一样好了.... 另外,更换空间以后就是php空间了,可以用我仰慕已久的wordpress系统了, 不过pjblog如何转到wordpress上去,实在是个大问题. 还有以前积累下来的搜索引擎纪录,pr值似乎都有丢掉的危险, 不知道谁有好办法,指点指点我吧!! 如果你看到这篇日志的时候有空,请帮忙点击一下下面的链接,看一下跟访问本站的速度有多大差别,感谢回馈. http://218.240.8.107/ update:2007-5-29 22:30 刚刚在教育网里面tracert了一下上面那个地址 得到的结果如下: Tracing route to 218 . 240 . 8 . 107 over a maximum of 30 hops 1 < 1 ms < 1 ms < 1 ms 219 . 217 . 13 . 254 2 1 ms < 1 ms < 1 ms 192 . 168 . 2 . 21 3 4 ms 3 ms 4 ms 192 . 168 . 2 . 142 4 6 ms 6 ms 6 ms 202 . 198 . 225 . 221 5 5 ms 5 ms 5 ms 202 . 112 . 36 . 57 6 24 ms 21 ms 20 ms 202 . 112 . 36 . 170 7 30 ms 31 ms 31 ms 202 . 127 . 216 . 41 8 29 ms 29 ms * 202 . 112 . 53 . 74 9 32 ms 32 ms 30 ms 218 . 240 . 7 . 218 10 * 31 ms * 218 . 240 . 7 . 113 11 * * * Request timed out . 12 * 158 ms 158 ms 203 . 212 . 0 . 42 13 170 ms 168 ms 169 ms 203 . 212 . 0 . 37 14 37 ms 37 ms 37 ms 218 . 240 . 8 . 107 Trace complete . tracert现在的主机: Tracing route to gfrog . cn [ 210 . 51 . 22 . 163 ] over a maximum of 30 hops : 1 1 ms < 1 ms < 1 ms 219 . 217 . 13 . 254 2 1 ms 1 ms 1 ms 192 . 168 . 2 . 21 3 6 ms 5 ms 5 ms 192 . 168 . 2 . 142 4 6 ms 7 ms 8 ms 202 . 198 . 225 . 221 5 1 ms 2 ms 2 ms 202 . 112 . 36 . 89 6 23 ms 22 ms 23 ms 202 . 112 . 36 . 170 7 * * 32 ms 202 . 127 . 216 . 41 8 45 ms 46 ms 48 ms 202 . 112 . 36 . 250 9 60 ms 58 ms 59 ms 202 . 112 . 36 . 254 10 53 ms 56 ms 53 ms 202 . 112 . 53 . 202 11 239 ms 236 ms 237 ms 219 . 158 . 32 . 97 12 * 220 ms * 219 . 158 . 28 . 190 13 243 ms 239 ms * 218 . 105 . 0 . 61 14 242 ms 242 ms 249 ms 210 . 52 . 206 . 10 15 228 ms 222 ms 227 ms 210 . 51 . 63 . 2 16 225 ms 226 ms 228 ms 210 . 51 . 63 . 66 17 221 ms 229 ms * 210 . 51 . 22 . 163 18 234 ms 228 ms * 210 . 51 . 22 . 163 19 233 ms 229 ms 230 ms 210 . 51 . 22 . 163 Trace complete . 看起来速度还是差不少的, 但是web访问218.240.8.107这个测试地址速度实在是慢的可以, 比访问现在的主机慢很多.","tags":"Misc","url":"2007/05/turn-to-wordpress/","loc":"2007/05/turn-to-wordpress/"},{"title":"都来答答这些问题吧","text":"细看起来,似乎这些东西都见过.细说起来,这些东西哪个都说不明白是啥.看似能说清楚的,写起来又发现自己还是说不明白.唉,自己这半吊子水平.... 来自 baozi的blog 线程和进程有什么区别 pptp和pppoe有什么区别 md5是什么算法 apache1和apache2有什么区别 电子签名怎么工作 什么是jail spantree协议说说 列举加密算法，并且分类 什么是正则表达式，用一个 shell检测一个文件是否是c写的 邮件系统的认证方法？说一下邮件系统的证书认证。 交换机和路由器的区别 青蛙自己感觉能说的清楚的只有3,6,7,11. 3: md5是散列算法,或者叫摘要算法.具体咋回事,偶不知道 - -b 6: jail 一个跟系统相对隔离的环境, 用于安全执行一些特定的服务或者建立蜜罐. 第一次接触jail这个概念还是在baozi大哥在linuxsir上发的几个帖子里面. 从那以后一直试图自己建立jail,但是一直未遂. 7: spaningtree 生成树协议,用于消除第二层设备产生的环路. 这个协议是偶当年在校园网里抓包发现的第一个比较特殊的协议(相对于arp ip tcp来说...) 11: 交换机 二层设备,根据mac-端口对应表工作 路由器 三层设备,根据ip-端口对应表工作","tags":"Misc","url":"2007/04/interview-questions/","loc":"2007/04/interview-questions/"},{"title":"我也说说网银","text":"偶是比较后知后觉的那种人,今天才看到python-chinese邮件列表里看到有人说起 老徐的那封公开信 .google了一下,原来几个月以前各大媒体网站原来都报道过这封信. 老徐在公开信里面讲的那个宾馆里的故事实在是很搞笑, 但是偶不知道activex到底在网上银行交易里面扮演一个什么样的角色, 难道就这么不可或缺么? 于是我继续google,似乎activex只是用来防止密码被键盘钩子截获. 似乎这只是对windows系统来说的? 对于非win系统,还有这个问题么?偶不清楚,google也没有找到答案. 但是,activex对于windows就是安全的么? 似乎也不是,看看最近的 支付宝的activex控件缺陷 ,看来activex反倒给系统留下了隐患. 看到很多人说国外银行的网银都不用activex的,偶继续google之. 似乎国外银行用的也跟我天朝银行是一样的东西嘛, 除了activex.128位SSL加密,数字证书,usb-key.无非也就是这些了. 但是为啥洋人银行都不用activex呢? 大概洋人都穷,买不起windows,又不像我天朝人手一个盗版windows. 于是activex没了生长的土壤,自己也就躲一边去了. 写到这里不由得感叹我天朝昌盛,连微软都要另眼相看, 每次在天朝卖的windows都比在洋人那里卖的贵. 扯得远了,嘿嘿. 至于这个why activex or why not activex的问题,现在还没有结果. 网友的力量能大过银行么? 也很难说. 这次google过程,也发现了很多有趣的东东,最有意思的莫过于下面这封信了 在Mozine论坛上 有人帖了一个北京银行客服的回信 ,搞笑之极.实在怀疑写这封信的那位客服人员连什么是网页都不知道. 引用一段,如下: 您好，感谢您一直使用并支持北京银行个人网银系统，个人网银新版上线后，我们将不再支持Firefox浏览器，原因如下： 1、Firefox作为一种开源的浏览器，要求开发的语言必须具有通用性， 虽然firefox可以添加许多安全插件，但由于一些插件是第三方开发的， 所以语言的差异性就更加的显著，很有可能造成浏览时出现问题。 2、Firefox为了兼容windows，linux，unix和max os，必须制作一种统一的浏览器内核， 而实际上，这些操作系统的网页浏览方式是不一样的， 所以在css，javascript，vbscript等网页脚本语言的调用方式上也是不同的， 因此，在用非IE的浏览器上使用网上银行会出现样式错乱或者使用出错的情况。 3、原来的网银系统使用的框架主要是静态jsp实现方式，仅仅应用了很少的样式结构， 所以，对于浏览器的兼容性基本没有影响。 但是新的网银系统使用了较多的css和较高版本的js， 所以会出现对于firefox不兼容的问题。 鉴于上述原因，我们建议你使用系统自带的IE浏览器，由此给您带来的不便，敬请谅解， 在中国传统的春节到来之际，北京银行祝您工作顺利，节日快乐， 希望您能一如既往的支持北京银行。谢谢！ 有人回帖说这封信也就是标点用的还没有错误,还算比较贴切,呵呵. ps.最后搜了一下linux下的键盘记录器,似乎只有到内核里面才能做这件事情, 但是加载驱动之类的操作都是root才能干的, 而linux的使用哲学就是强烈不建议使用root账户作为日常工作账户 (ubuntu甚至干脆不给用户root账号的密码), 这跟在windows里面没有管理员权限就寸步难行有很大的不同.","tags":"Misc","url":"2007/04/thought-about-net-bank/","loc":"2007/04/thought-about-net-bank/"},{"title":"奋斗三天 LFS终于成功","text":"从前天晚上开始做lfs-6.1,到今天上午12点,终于启动到了lfs系统下面. 先恭喜自己一下.呼呼. 这次lfs不是那么完美的,因为最后一步编译的内核没有起来. 估计是没有initrd的原因.但是说到底还是我的内核配置有问题. 我直接把宿主系统上的2.6.18内核抓来用了.嘿嘿,这还是算是lfs的吧... 秀几个图吧. 先是grub: 然后是启动起来,login的界面: (嗯,我把这个系统命名为gLinux0.02 哈哈 大家还记得gLinux0.01吧 -_-) 然后是uname -a: lfs-6.1默认的是2.6.11.2内核,但是我编译的起不来,现在看到的是debian的2.6.18内核. 以后偶再也不敢说编译内核简单了,最近10次编译内核全部以失败告终,泪... 最后是lfs ID的截图: 列一下我的参考资料吧.这次做lfs偶换掉了几个6.1默认的包,用了6.1.1或者6.2中的包.所以从6.1的手册到6.2的手册都看了一些.下面是6.1跟6.1.1的中文版. 6.1中文: http://lfs.linuxsir.org/doc/lfs6.1zh/index.html 6.1.1中文: http://www.dogdoghome.com/lamp/Linux/LFS-6.1.1/index.html 6.2英文: http://www.linuxfromscratch.org/lfs/view/stable/index.html 还有就是linuxsir上 大牛youbest的文章 ,我基本上是照这里作的,真是太方便了,真诚感谢这样的大牛的付出. 最后,要说lfs-6.1里面的一个bug, 就是Tcl-8.4.9的configure脚本有一个错误, cofigure的时候过不去.要用下面的命令修改它的configure脚本: <kbd> sed -i \"s/relid'/relid/\" configure </kbd> 这个错误在lfs-6.1.1里面改正了.如果还在用lfs-6.1的手册,那么就要注意这点了. Del.icio.us : linux lfs","tags":"Linux","url":"2007/04/make-lfs-6-1-work-after-3-days-work/","loc":"2007/04/make-lfs-6-1-work-after-3-days-work/"},{"title":"回归Debian的怀抱","text":"用来用去,还是觉得debian最亲切,最自然. 虽然ubuntu有多般的好处,但是似乎跟我想要的linux差的很多. 装回debian,用它作宿主系统,研究一下lfs. 从昨天开始装debian,但是苦于没有合适的源, 直到今天也没升级完毕.真是郁闷死我了. 昨天用cn99跟geekbone,apt-get update了好久好久. 查了一下它俩的ip,竟然在电信线路上,怪不得只有10KB/s左右的速度. 今天被cn99逼的没有办法,试了下教育网的源,仍然是10KB/s. 实在没辙了,google了一下,找到了 台湾大学的debian镜像 ,速度竟然能达到150KB/s,轻松的完成了upgrade.实在是太赞了. google的时候 在linuxsir上发现了一个小tip ,就是apt-spy.这个小东西可以自动测试一个地区的源的速度, 然后自动生成一个sources.list.真是一个很好用的小东东. 这个apt-spy不是默认安装的,所以要先找到一个源来安装它. # apt - get install apt - spy # mv sources . list sources . list . bak // backup # man apt - spy // 获取详细的使用方法 # apt - spy update // 更新您的镜像列表文件 / var / lib / apt - spy / mirrors . txt # apt - spy - d testing - a Asia // 在亚洲区寻找速度最快的 testing版镜像 , 并生成 sources . list文件 , // 也可使用 - o 参数指定写入文件 正如 linuxsir那篇文章 所说,这个过程十分的漫长(在我写这篇日志的时候,这个过程还在继续), 但是确实是一劳永逸的. 只要不更换网络接入方式,它生成的sources.list就可以一直用下去. update: apt-spy测试了半个小时以后,终于找到了http://opensource.nchc.org.tw/debian 这个站点,能达到200多KB/s的速度. 最后生成的sources.list如下 # sources.list generated by apt-spy v3.1 deb ftp://opensource.nchc.org.tw/debian/ testing main deb-src ftp://opensource.nchc.org.tw/debian/ testing main #deb http://security.debian.org/ stable/updates main 去opensource.nchc.org.tw看了一下,他提供如下镜像,按照下面重新修改一下apt-spy生成的源,然后就尽情的enjoy吧. Debian 參考 /etc/apt/sources.list 設定 deb http://opensource.nchc.org.tw/debian [stable|testing|unstable] main contrib non-free deb http://opensource.nchc.org.tw/debian-non-US [stable|testing|unstable]/non-US main contrib non-free deb http://opensource.nchc.org.tw/debian-security stable/updates main contrib non-free Unofficial APT KDE deb http://opensource.nchc.org.tw/apt/kde/3.1 woody main I Pv 6 ? deb http://opensource.nchc.org.tw/apt/ipv6 [stable|testing|unstable]/ipv6 ./<br></br> X Free 86 ? 4.3 deb http://opensource.nchc.org.tw/apt/xfree86-4.3/woody ./ ALSA deb http://opensource.nchc.org.tw/apt/alsa woody sherpya<br></br> O Oo ? Woody backport deb http://opensource.nchc.org.tw/apt/OOo [stable|unstable] main contrib Real Player ? deb http://opensource.nchc.org.tw/apt/marillat [stable|testing|unstable] main<br></br> DRBL deb http://opensource.nchc.org.tw/apt/drbl stable main contrib<br></br>","tags":"Linux","url":"2007/03/go-back-to-use-debian/","loc":"2007/03/go-back-to-use-debian/"},{"title":"测试picasa帖图","text":"","tags":"Pictures","url":"2007/02/test-link-pictures-from-picasa/","loc":"2007/02/test-link-pictures-from-picasa/"},{"title":"来说说bblean吧","text":"看到 keyer 推荐的多桌面软件，让青蛙想起了bblean。正好昨天跟 conan 说起了它。 对于有linux使用经验的人来说，bblean看起来会很舒服，而且也会很容易上手。 因为bblean就是linux下面的桌面管理器blackbox的windows版本中的一个。 大量的插件可以使自己的桌面高度定制，内存占用又很低， 对于我这种有时候想疯狂的节约内存的人是最合适不过的了。 上几个大虾们的图好了， 青蛙自己的桌面就是用了bblean默认的布局，没有改，就不秀了。 （下面的图片都来自 deepin.org 的 bblean 版） rmb之 颓废的烟头 ： kavana （这个效果你能认出它是windowsXP么? :p）： 更多的样式跟截图看 这里 。 发一点牢骚，青蛙发现很多bblean桌面都有很重的模仿windows工具栏的倾向。 大概是因为很多人受windows荼毒太深，呵呵。 但是，bblean的操作习惯跟windows完全不同， 扔一个不伦不类的\"开始\"在那里， 似乎就是个摆设， 因为在bblean里，在桌面随便什么地方点鼠标，主菜单就出来了， 干嘛还要费事去点一下开始... 青蛙不是愤青，青蛙只想说，不要单纯的为了模仿而模仿。 有关bblean的更多情况，大家可以看这里： http://bb4win.sourceforge.net/bblean/","tags":"Misc","url":"2007/02/talk-a-bit-about-bblean/","loc":"2007/02/talk-a-bit-about-bblean/"},{"title":"今日主旋律:回家","text":"等这个日子实在太久了. 今天,不顾一切,回家!","tags":"Misc","url":"2007/01/go-back-home-today/","loc":"2007/01/go-back-home-today/"},{"title":"网安沙龙聚会记","text":"网安的各位终于又聚到一起了,大家一起坐了一会,然后出去饭饭. 小树跟fxlt都刚考研完毕,fxlt看来考的不错,预祝fxlt能顺利考上研究生. 小树自己说自己今年放弃考研了,明年再考,那加油一下,明年大家一起努力. uty签去珠海了,他自己说自己跟珠海很是有缘,转了一圈又转回去了,预祝uty下学期实习顺利. jklee今天穿的很像老师,跟以前感觉不一样,貌似jklee下学期还要讲好几门课,预祝他事事顺利. 报告完毕,任务完成.","tags":"Misc","url":"2007/01/niap-meetup/","loc":"2007/01/niap-meetup/"}]};